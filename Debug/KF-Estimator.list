
KF-Estimator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a4c  08007a4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a54  08007a54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000070  08007acc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007acc  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012501  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1c  00000000  00000000  000325a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f95  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbca  00000000  00000000  0005ad0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4974  00000000  00000000  000678d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0013c24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004730  00000000  00000000  0013c338  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00001160  00000000  00000000  00140a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800796c 	.word	0x0800796c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800796c 	.word	0x0800796c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <MPU9250_Initialize>:
#include <MPU9250.h>

MPU9250_Result_t MPU9250_Initialize(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[8] = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef res;

    /* MPU9250_WHO_AM_I ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_WHO_AM_I|0x80;
 8000dfe:	23f5      	movs	r3, #245	; 0xf5
 8000e00:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f003 f81d 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	f107 020c 	add.w	r2, r7, #12
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2302      	movs	r3, #2
 8000e26:	f003 fda3 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	891b      	ldrh	r3, [r3, #8]
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f003 f807 	bl	8003e4c <HAL_GPIO_WritePin>

    //WHO_AM_I Check
    if (cmdbuf[1] != 0x71) {
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	2b71      	cmp	r3, #113	; 0x71
 8000e42:	d001      	beq.n	8000e48 <MPU9250_Initialize+0x5c>
        return MPU9250_RESULT_FAIL;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e284      	b.n	8001352 <MPU9250_Initialize+0x566>
    }
    //Ex
    if (res != HAL_OK) {
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MPU9250_Initialize+0x66>
        return MPU9250_RESULT_FAIL;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e27f      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Reset ----------------------------------------------------------*/

    cmdbuf[0] = MPU9250_PWR_MGMT_1;
 8000e52:	236b      	movs	r3, #107	; 0x6b
 8000e54:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6858      	ldr	r0, [r3, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	891b      	ldrh	r3, [r3, #8]
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	f002 fff1 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	f107 010c 	add.w	r1, r7, #12
 8000e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f003 fd77 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6858      	ldr	r0, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	891b      	ldrh	r3, [r3, #8]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	f002 ffdb 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MPU9250_Initialize+0xb4>
        return MPU9250_RESULT_FAIL;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e258      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f002 fd0d 	bl	80038c0 <HAL_Delay>

    /* MPU9250_I2C_Bypass_mode_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_INT_PIN_CFG;
 8000ea6:	2337      	movs	r3, #55	; 0x37
 8000ea8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x12;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6858      	ldr	r0, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	891b      	ldrh	r3, [r3, #8]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f002 ffc7 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f003 fd4d 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6858      	ldr	r0, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	891b      	ldrh	r3, [r3, #8]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f002 ffb1 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MPU9250_Initialize+0x108>
        return MPU9250_RESULT_FAIL;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e22e      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_I2C_Master_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_USER_CTRL;
 8000ef4:	236a      	movs	r3, #106	; 0x6a
 8000ef6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x30;
 8000ef8:	2330      	movs	r3, #48	; 0x30
 8000efa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6858      	ldr	r0, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	891b      	ldrh	r3, [r3, #8]
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	f002 ffa0 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	f107 010c 	add.w	r1, r7, #12
 8000f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f003 fd26 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000f24:	4603      	mov	r3, r0
 8000f26:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6858      	ldr	r0, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	891b      	ldrh	r3, [r3, #8]
 8000f30:	2201      	movs	r2, #1
 8000f32:	4619      	mov	r1, r3
 8000f34:	f002 ff8a 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MPU9250_Initialize+0x156>
        return MPU9250_RESULT_FAIL;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e207      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Set_I2C_clock_400kbps ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_MST_CTRL;
 8000f42:	2324      	movs	r3, #36	; 0x24
 8000f44:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0D;
 8000f46:	230d      	movs	r3, #13
 8000f48:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6858      	ldr	r0, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	891b      	ldrh	r3, [r3, #8]
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	f002 ff79 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	f107 020c 	add.w	r2, r7, #12
 8000f62:	f107 010c 	add.w	r1, r7, #12
 8000f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f003 fcff 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000f72:	4603      	mov	r3, r0
 8000f74:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6858      	ldr	r0, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	891b      	ldrh	r3, [r3, #8]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 ff63 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MPU9250_Initialize+0x1a4>
        return MPU9250_RESULT_FAIL;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e1e0      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    /* AK8963_Reset ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8000f90:	2325      	movs	r3, #37	; 0x25
 8000f92:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8000f94:	230c      	movs	r3, #12
 8000f96:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6858      	ldr	r0, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	891b      	ldrh	r3, [r3, #8]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f002 ff52 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	f107 010c 	add.w	r1, r7, #12
 8000fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f003 fcd8 	bl	8004970 <HAL_SPI_TransmitReceive>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6858      	ldr	r0, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	891b      	ldrh	r3, [r3, #8]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f002 ff3c 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MPU9250_Initialize+0x1f2>
        return MPU9250_RESULT_FAIL;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e1b9      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8000fde:	2326      	movs	r3, #38	; 0x26
 8000fe0:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL2;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6858      	ldr	r0, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	891b      	ldrh	r3, [r3, #8]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f002 ff2b 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	f003 fcb1 	bl	8004970 <HAL_SPI_TransmitReceive>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6858      	ldr	r0, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	891b      	ldrh	r3, [r3, #8]
 800101a:	2201      	movs	r2, #1
 800101c:	4619      	mov	r1, r3
 800101e:	f002 ff15 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MPU9250_Initialize+0x240>
        return MPU9250_RESULT_FAIL;
 8001028:	2301      	movs	r3, #1
 800102a:	e192      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 800102c:	2363      	movs	r3, #99	; 0x63
 800102e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 8001030:	2301      	movs	r3, #1
 8001032:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6858      	ldr	r0, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	891b      	ldrh	r3, [r3, #8]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f002 ff04 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2302      	movs	r3, #2
 8001058:	f003 fc8a 	bl	8004970 <HAL_SPI_TransmitReceive>
 800105c:	4603      	mov	r3, r0
 800105e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6858      	ldr	r0, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f002 feee 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MPU9250_Initialize+0x28e>
        return MPU9250_RESULT_FAIL;
 8001076:	2301      	movs	r3, #1
 8001078:	e16b      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 800107a:	2327      	movs	r3, #39	; 0x27
 800107c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 800107e:	2381      	movs	r3, #129	; 0x81
 8001080:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6858      	ldr	r0, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	891b      	ldrh	r3, [r3, #8]
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	f002 fedd 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,8,0xFFFF);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2308      	movs	r3, #8
 80010a6:	f003 fc63 	bl	8004970 <HAL_SPI_TransmitReceive>
 80010aa:	4603      	mov	r3, r0
 80010ac:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6858      	ldr	r0, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	891b      	ldrh	r3, [r3, #8]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4619      	mov	r1, r3
 80010ba:	f002 fec7 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MPU9250_Initialize+0x2dc>
        return MPU9250_RESULT_FAIL;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e144      	b.n	8001352 <MPU9250_Initialize+0x566>
    }
    HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f002 fbf9 	bl	80038c0 <HAL_Delay>

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 80010ce:	2325      	movs	r3, #37	; 0x25
 80010d0:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 80010d2:	230c      	movs	r3, #12
 80010d4:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6858      	ldr	r0, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	891b      	ldrh	r3, [r3, #8]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	f002 feb3 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f107 020c 	add.w	r2, r7, #12
 80010ee:	f107 010c 	add.w	r1, r7, #12
 80010f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f003 fc39 	bl	8004970 <HAL_SPI_TransmitReceive>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6858      	ldr	r0, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	891b      	ldrh	r3, [r3, #8]
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	f002 fe9d 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MPU9250_Initialize+0x330>
        return MPU9250_RESULT_FAIL;
 8001118:	2301      	movs	r3, #1
 800111a:	e11a      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800111c:	2326      	movs	r3, #38	; 0x26
 800111e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8001120:	230a      	movs	r3, #10
 8001122:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6858      	ldr	r0, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	891b      	ldrh	r3, [r3, #8]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	f002 fe8c 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	f107 010c 	add.w	r1, r7, #12
 8001140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2302      	movs	r3, #2
 8001148:	f003 fc12 	bl	8004970 <HAL_SPI_TransmitReceive>
 800114c:	4603      	mov	r3, r0
 800114e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6858      	ldr	r0, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	2201      	movs	r2, #1
 800115a:	4619      	mov	r1, r3
 800115c:	f002 fe76 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MPU9250_Initialize+0x37e>
        return MPU9250_RESULT_FAIL;
 8001166:	2301      	movs	r3, #1
 8001168:	e0f3      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 800116a:	2363      	movs	r3, #99	; 0x63
 800116c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 800116e:	2316      	movs	r3, #22
 8001170:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6858      	ldr	r0, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	f002 fe65 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	f107 010c 	add.w	r1, r7, #12
 800118e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	f003 fbeb 	bl	8004970 <HAL_SPI_TransmitReceive>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6858      	ldr	r0, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	891b      	ldrh	r3, [r3, #8]
 80011a6:	2201      	movs	r2, #1
 80011a8:	4619      	mov	r1, r3
 80011aa:	f002 fe4f 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MPU9250_Initialize+0x3cc>
        return MPU9250_RESULT_FAIL;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e0cc      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80011b8:	2327      	movs	r3, #39	; 0x27
 80011ba:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80011bc:	2381      	movs	r3, #129	; 0x81
 80011be:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6858      	ldr	r0, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	891b      	ldrh	r3, [r3, #8]
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	f002 fe3e 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	f107 010c 	add.w	r1, r7, #12
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2302      	movs	r3, #2
 80011e4:	f003 fbc4 	bl	8004970 <HAL_SPI_TransmitReceive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f002 fe28 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MPU9250_Initialize+0x41a>
        return MPU9250_RESULT_FAIL;
 8001202:	2301      	movs	r3, #1
 8001204:	e0a5      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f002 fb5a 	bl	80038c0 <HAL_Delay>

    /* AK8963_WHO_AM_I ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800120c:	2325      	movs	r3, #37	; 0x25
 800120e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 8001210:	238c      	movs	r3, #140	; 0x8c
 8001212:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6858      	ldr	r0, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	891b      	ldrh	r3, [r3, #8]
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	f002 fe14 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2302      	movs	r3, #2
 8001238:	f003 fb9a 	bl	8004970 <HAL_SPI_TransmitReceive>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6858      	ldr	r0, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	891b      	ldrh	r3, [r3, #8]
 8001248:	2201      	movs	r2, #1
 800124a:	4619      	mov	r1, r3
 800124c:	f002 fdfe 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MPU9250_Initialize+0x46e>
        return MPU9250_RESULT_FAIL;
 8001256:	2301      	movs	r3, #1
 8001258:	e07b      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800125a:	2326      	movs	r3, #38	; 0x26
 800125c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_WIA;
 800125e:	2300      	movs	r3, #0
 8001260:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6858      	ldr	r0, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	891b      	ldrh	r3, [r3, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	f002 fded 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	f107 010c 	add.w	r1, r7, #12
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2302      	movs	r3, #2
 8001286:	f003 fb73 	bl	8004970 <HAL_SPI_TransmitReceive>
 800128a:	4603      	mov	r3, r0
 800128c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6858      	ldr	r0, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	891b      	ldrh	r3, [r3, #8]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f002 fdd7 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MPU9250_Initialize+0x4bc>
        return MPU9250_RESULT_FAIL;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e054      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80012a8:	2327      	movs	r3, #39	; 0x27
 80012aa:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80012ac:	2381      	movs	r3, #129	; 0x81
 80012ae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6858      	ldr	r0, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	891b      	ldrh	r3, [r3, #8]
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	f002 fdc6 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	f107 010c 	add.w	r1, r7, #12
 80012cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2302      	movs	r3, #2
 80012d4:	f003 fb4c 	bl	8004970 <HAL_SPI_TransmitReceive>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6858      	ldr	r0, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	891b      	ldrh	r3, [r3, #8]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	f002 fdb0 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MPU9250_Initialize+0x50a>
        return MPU9250_RESULT_FAIL;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02d      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f002 fae2 	bl	80038c0 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 80012fc:	23c9      	movs	r3, #201	; 0xc9
 80012fe:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6858      	ldr	r0, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	891b      	ldrh	r3, [r3, #8]
 8001308:	2200      	movs	r2, #0
 800130a:	4619      	mov	r1, r3
 800130c:	f002 fd9e 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	f107 010c 	add.w	r1, r7, #12
 800131c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2302      	movs	r3, #2
 8001324:	f003 fb24 	bl	8004970 <HAL_SPI_TransmitReceive>
 8001328:	4603      	mov	r3, r0
 800132a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6858      	ldr	r0, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	891b      	ldrh	r3, [r3, #8]
 8001334:	2201      	movs	r2, #1
 8001336:	4619      	mov	r1, r3
 8001338:	f002 fd88 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MPU9250_Initialize+0x55a>
        return MPU9250_RESULT_FAIL;
 8001342:	2301      	movs	r3, #1
 8001344:	e005      	b.n	8001352 <MPU9250_Initialize+0x566>
    }
    //WHO_AM_I Check
    if (cmdbuf[1] != 0x48) {
 8001346:	7b7b      	ldrb	r3, [r7, #13]
 8001348:	2b48      	cmp	r3, #72	; 0x48
 800134a:	d001      	beq.n	8001350 <MPU9250_Initialize+0x564>
        return MPU9250_RESULT_FAIL;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <MPU9250_Initialize+0x566>
    }

    return MPU9250_RESULT_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MPU9250_Config>:

MPU9250_Result_t MPU9250_Config(MPU9250_CONFIG_t *MPU9250_CONFIG){
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[4] = {0};
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef res;

    /* MPU9250_Set_Accel_Scale ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_CONFIG->ACCEL_SCALE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7a9b      	ldrb	r3, [r3, #10]
 800136c:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == ACCEL_SCALE_2G){//2G
 800136e:	7b3b      	ldrb	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d104      	bne.n	800137e <MPU9250_Config+0x22>
        MPU9250_CONFIG->ARES = 2.0/MPU9250_ACC_SENS_FACTOR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	e016      	b.n	80013ac <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_4G){//4G
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	2b08      	cmp	r3, #8
 8001382:	d104      	bne.n	800138e <MPU9250_Config+0x32>
        MPU9250_CONFIG->ARES = 4.0/MPU9250_ACC_SENS_FACTOR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	e00e      	b.n	80013ac <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_8G){//8G
 800138e:	7b3b      	ldrb	r3, [r7, #12]
 8001390:	2b10      	cmp	r3, #16
 8001392:	d104      	bne.n	800139e <MPU9250_Config+0x42>
        MPU9250_CONFIG->ARES = 8.0/MPU9250_ACC_SENS_FACTOR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	e006      	b.n	80013ac <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_16G){//16G
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	2b18      	cmp	r3, #24
 80013a2:	d103      	bne.n	80013ac <MPU9250_Config+0x50>
        MPU9250_CONFIG->ARES = 16.0/MPU9250_ACC_SENS_FACTOR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80013aa:	60da      	str	r2, [r3, #12]
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG|0x80;
 80013ac:	239c      	movs	r3, #156	; 0x9c
 80013ae:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6858      	ldr	r0, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	891b      	ldrh	r3, [r3, #8]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 fd46 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	f107 010c 	add.w	r1, r7, #12
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2302      	movs	r3, #2
 80013d4:	f003 facc 	bl	8004970 <HAL_SPI_TransmitReceive>
 80013d8:	4603      	mov	r3, r0
 80013da:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6858      	ldr	r0, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	891b      	ldrh	r3, [r3, #8]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 fd30 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MPU9250_Config+0x9a>
        return MPU9250_RESULT_FAIL;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e2b3      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG;
 80013f6:	231c      	movs	r3, #28
 80013f8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 80013fa:	7b7a      	ldrb	r2, [r7, #13]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7a9b      	ldrb	r3, [r3, #10]
 8001400:	4313      	orrs	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6858      	ldr	r0, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	891b      	ldrh	r3, [r3, #8]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f002 fd1b 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	f107 010c 	add.w	r1, r7, #12
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2302      	movs	r3, #2
 800142a:	f003 faa1 	bl	8004970 <HAL_SPI_TransmitReceive>
 800142e:	4603      	mov	r3, r0
 8001430:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6858      	ldr	r0, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	891b      	ldrh	r3, [r3, #8]
 800143a:	2201      	movs	r2, #1
 800143c:	4619      	mov	r1, r3
 800143e:	f002 fd05 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MPU9250_Config+0xf0>
        return MPU9250_RESULT_FAIL;
 8001448:	2301      	movs	r3, #1
 800144a:	e288      	b.n	800195e <MPU9250_Config+0x602>
    }

    /* MPU9250_GYRO_CONFIG ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_CONFIG->GYRO_SCALE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7adb      	ldrb	r3, [r3, #11]
 8001450:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == GYRO_SCALE_250dps){//250dps
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <MPU9250_Config+0x104>
        MPU9250_CONFIG->GRES = 2.0/MPU9250_GYRO_SENS_FACTOR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4aa8      	ldr	r2, [pc, #672]	; (80016fc <MPU9250_Config+0x3a0>)
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	e013      	b.n	8001488 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_500dps){//500dps
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	2b08      	cmp	r3, #8
 8001464:	d103      	bne.n	800146e <MPU9250_Config+0x112>
        MPU9250_CONFIG->GRES = 4.0/MPU9250_GYRO_SENS_FACTOR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4aa5      	ldr	r2, [pc, #660]	; (8001700 <MPU9250_Config+0x3a4>)
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	e00c      	b.n	8001488 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_1000dps){//1000dps
 800146e:	7b3b      	ldrb	r3, [r7, #12]
 8001470:	2b10      	cmp	r3, #16
 8001472:	d103      	bne.n	800147c <MPU9250_Config+0x120>
        MPU9250_CONFIG->GRES = 8.0/MPU9250_GYRO_SENS_FACTOR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4aa3      	ldr	r2, [pc, #652]	; (8001704 <MPU9250_Config+0x3a8>)
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	e005      	b.n	8001488 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_2000dps){//2000dps
 800147c:	7b3b      	ldrb	r3, [r7, #12]
 800147e:	2b18      	cmp	r3, #24
 8001480:	d102      	bne.n	8001488 <MPU9250_Config+0x12c>
        MPU9250_CONFIG->GRES = 16.0/MPU9250_GYRO_SENS_FACTOR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4aa0      	ldr	r2, [pc, #640]	; (8001708 <MPU9250_Config+0x3ac>)
 8001486:	611a      	str	r2, [r3, #16]
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG|0x80;
 8001488:	239b      	movs	r3, #155	; 0x9b
 800148a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6858      	ldr	r0, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	891b      	ldrh	r3, [r3, #8]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f002 fcd8 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	f107 010c 	add.w	r1, r7, #12
 80014a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2302      	movs	r3, #2
 80014b0:	f003 fa5e 	bl	8004970 <HAL_SPI_TransmitReceive>
 80014b4:	4603      	mov	r3, r0
 80014b6:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6858      	ldr	r0, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	891b      	ldrh	r3, [r3, #8]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	f002 fcc2 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80014c8:	7cfb      	ldrb	r3, [r7, #19]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MPU9250_Config+0x176>
        return MPU9250_RESULT_FAIL;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e245      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG;
 80014d2:	231b      	movs	r3, #27
 80014d4:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 80014d6:	7b7a      	ldrb	r2, [r7, #13]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7a9b      	ldrb	r3, [r3, #10]
 80014dc:	4313      	orrs	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6858      	ldr	r0, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	891b      	ldrh	r3, [r3, #8]
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	f002 fcad 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	f107 010c 	add.w	r1, r7, #12
 80014fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2302      	movs	r3, #2
 8001506:	f003 fa33 	bl	8004970 <HAL_SPI_TransmitReceive>
 800150a:	4603      	mov	r3, r0
 800150c:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6858      	ldr	r0, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	891b      	ldrh	r3, [r3, #8]
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	f002 fc97 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800151e:	7cfb      	ldrb	r3, [r7, #19]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MPU9250_Config+0x1cc>
        return MPU9250_RESULT_FAIL;
 8001524:	2301      	movs	r3, #1
 8001526:	e21a      	b.n	800195e <MPU9250_Config+0x602>
    }

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/
    /* AK8963_Set_Fuse_access_mode ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001528:	2325      	movs	r3, #37	; 0x25
 800152a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 800152c:	230c      	movs	r3, #12
 800152e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6858      	ldr	r0, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	891b      	ldrh	r3, [r3, #8]
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	f002 fc86 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2302      	movs	r3, #2
 8001554:	f003 fa0c 	bl	8004970 <HAL_SPI_TransmitReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6858      	ldr	r0, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	891b      	ldrh	r3, [r3, #8]
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	f002 fc70 	bl	8003e4c <HAL_GPIO_WritePin>
    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800156c:	2326      	movs	r3, #38	; 0x26
 800156e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8001570:	230a      	movs	r3, #10
 8001572:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6858      	ldr	r0, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	891b      	ldrh	r3, [r3, #8]
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	f002 fc64 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	f107 010c 	add.w	r1, r7, #12
 8001590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2302      	movs	r3, #2
 8001598:	f003 f9ea 	bl	8004970 <HAL_SPI_TransmitReceive>
 800159c:	4603      	mov	r3, r0
 800159e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6858      	ldr	r0, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	891b      	ldrh	r3, [r3, #8]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f002 fc4e 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80015b0:	7cfb      	ldrb	r3, [r7, #19]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MPU9250_Config+0x25e>
        return MPU9250_RESULT_FAIL;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1d1      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80015ba:	2363      	movs	r3, #99	; 0x63
 80015bc:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0F;
 80015be:	230f      	movs	r3, #15
 80015c0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6858      	ldr	r0, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	f002 fc3d 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f107 020c 	add.w	r2, r7, #12
 80015da:	f107 010c 	add.w	r1, r7, #12
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2302      	movs	r3, #2
 80015e6:	f003 f9c3 	bl	8004970 <HAL_SPI_TransmitReceive>
 80015ea:	4603      	mov	r3, r0
 80015ec:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6858      	ldr	r0, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f002 fc27 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MPU9250_Config+0x2ac>
        return MPU9250_RESULT_FAIL;
 8001604:	2301      	movs	r3, #1
 8001606:	e1aa      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001608:	2327      	movs	r3, #39	; 0x27
 800160a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 800160c:	2381      	movs	r3, #129	; 0x81
 800160e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6858      	ldr	r0, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	891b      	ldrh	r3, [r3, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	f002 fc16 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	f107 010c 	add.w	r1, r7, #12
 800162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2302      	movs	r3, #2
 8001634:	f003 f99c 	bl	8004970 <HAL_SPI_TransmitReceive>
 8001638:	4603      	mov	r3, r0
 800163a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6858      	ldr	r0, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	891b      	ldrh	r3, [r3, #8]
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fc00 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800164c:	7cfb      	ldrb	r3, [r7, #19]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MPU9250_Config+0x2fa>
        return MPU9250_RESULT_FAIL;
 8001652:	2301      	movs	r3, #1
 8001654:	e183      	b.n	800195e <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f002 f931 	bl	80038c0 <HAL_Delay>

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800165e:	2325      	movs	r3, #37	; 0x25
 8001660:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 8001662:	238c      	movs	r3, #140	; 0x8c
 8001664:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6858      	ldr	r0, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	891b      	ldrh	r3, [r3, #8]
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	f002 fbeb 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f107 020c 	add.w	r2, r7, #12
 800167e:	f107 010c 	add.w	r1, r7, #12
 8001682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2302      	movs	r3, #2
 800168a:	f003 f971 	bl	8004970 <HAL_SPI_TransmitReceive>
 800168e:	4603      	mov	r3, r0
 8001690:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6858      	ldr	r0, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	891b      	ldrh	r3, [r3, #8]
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	f002 fbd5 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MPU9250_Config+0x350>
        return MPU9250_RESULT_FAIL;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e158      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 80016ac:	2326      	movs	r3, #38	; 0x26
 80016ae:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ASAX;
 80016b0:	2310      	movs	r3, #16
 80016b2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6858      	ldr	r0, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	891b      	ldrh	r3, [r3, #8]
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	f002 fbc4 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	f107 010c 	add.w	r1, r7, #12
 80016d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	f003 f94a 	bl	8004970 <HAL_SPI_TransmitReceive>
 80016dc:	4603      	mov	r3, r0
 80016de:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6858      	ldr	r0, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	891b      	ldrh	r3, [r3, #8]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	f002 fbae 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <MPU9250_Config+0x3b0>
        return MPU9250_RESULT_FAIL;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e131      	b.n	800195e <MPU9250_Config+0x602>
 80016fa:	bf00      	nop
 80016fc:	3bfa232d 	.word	0x3bfa232d
 8001700:	3c7a232d 	.word	0x3c7a232d
 8001704:	3cfa232d 	.word	0x3cfa232d
 8001708:	3d7a232d 	.word	0x3d7a232d
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 800170c:	2327      	movs	r3, #39	; 0x27
 800170e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x83;
 8001710:	2383      	movs	r3, #131	; 0x83
 8001712:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6858      	ldr	r0, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	891b      	ldrh	r3, [r3, #8]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f002 fb94 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f107 020c 	add.w	r2, r7, #12
 800172c:	f107 010c 	add.w	r1, r7, #12
 8001730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2302      	movs	r3, #2
 8001738:	f003 f91a 	bl	8004970 <HAL_SPI_TransmitReceive>
 800173c:	4603      	mov	r3, r0
 800173e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6858      	ldr	r0, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	891b      	ldrh	r3, [r3, #8]
 8001748:	2201      	movs	r2, #1
 800174a:	4619      	mov	r1, r3
 800174c:	f002 fb7e 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MPU9250_Config+0x3fe>
        return MPU9250_RESULT_FAIL;
 8001756:	2301      	movs	r3, #1
 8001758:	e101      	b.n	800195e <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 800175a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175e:	f002 f8af 	bl	80038c0 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 8001762:	23c9      	movs	r3, #201	; 0xc9
 8001764:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6858      	ldr	r0, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	891b      	ldrh	r3, [r3, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	f002 fb6b 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,4,0xFFFF);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f107 020c 	add.w	r2, r7, #12
 800177e:	f107 010c 	add.w	r1, r7, #12
 8001782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2304      	movs	r3, #4
 800178a:	f003 f8f1 	bl	8004970 <HAL_SPI_TransmitReceive>
 800178e:	4603      	mov	r3, r0
 8001790:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6858      	ldr	r0, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	891b      	ldrh	r3, [r3, #8]
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	f002 fb55 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MPU9250_Config+0x450>
        return MPU9250_RESULT_FAIL;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0d8      	b.n	800195e <MPU9250_Config+0x602>
    }

    for(int i=0;i<3;i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e032      	b.n	8001818 <MPU9250_Config+0x4bc>
        MPU9250_CONFIG->MAG_SENSITIVITY[i] = (((cmdbuf[i+1] -128)*0.5)/128)+1;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	f107 0218 	add.w	r2, r7, #24
 80017ba:	4413      	add	r3, r2
 80017bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80017c0:	3b80      	subs	r3, #128	; 0x80
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec6 	bl	8000554 <__aeabi_i2d>
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <MPU9250_Config+0x60c>)
 80017ce:	f7fe ff2b 	bl	8000628 <__aeabi_dmul>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	4618      	mov	r0, r3
 80017d8:	4621      	mov	r1, r4
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <MPU9250_Config+0x610>)
 80017e0:	f7ff f84c 	bl	800087c <__aeabi_ddiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <MPU9250_Config+0x614>)
 80017f2:	f7fe fd63 	bl	80002bc <__adddf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	4618      	mov	r0, r3
 80017fc:	4621      	mov	r1, r4
 80017fe:	f7ff f925 	bl	8000a4c <__aeabi_d2f>
 8001802:	4601      	mov	r1, r0
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3304      	adds	r3, #4
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	6019      	str	r1, [r3, #0]
    for(int i=0;i<3;i++){
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2b02      	cmp	r3, #2
 800181c:	ddc9      	ble.n	80017b2 <MPU9250_Config+0x456>
    }

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800181e:	2325      	movs	r3, #37	; 0x25
 8001820:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001822:	230c      	movs	r3, #12
 8001824:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6858      	ldr	r0, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	891b      	ldrh	r3, [r3, #8]
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	f002 fb0b 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	f003 f891 	bl	8004970 <HAL_SPI_TransmitReceive>
 800184e:	4603      	mov	r3, r0
 8001850:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6858      	ldr	r0, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	891b      	ldrh	r3, [r3, #8]
 800185a:	2201      	movs	r2, #1
 800185c:	4619      	mov	r1, r3
 800185e:	f002 faf5 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001862:	7cfb      	ldrb	r3, [r7, #19]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MPU9250_Config+0x510>
        return MPU9250_RESULT_FAIL;
 8001868:	2301      	movs	r3, #1
 800186a:	e078      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800186c:	2326      	movs	r3, #38	; 0x26
 800186e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8001870:	230a      	movs	r3, #10
 8001872:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6858      	ldr	r0, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	891b      	ldrh	r3, [r3, #8]
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	f002 fae4 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f107 020c 	add.w	r2, r7, #12
 800188c:	f107 010c 	add.w	r1, r7, #12
 8001890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2302      	movs	r3, #2
 8001898:	f003 f86a 	bl	8004970 <HAL_SPI_TransmitReceive>
 800189c:	4603      	mov	r3, r0
 800189e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6858      	ldr	r0, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	891b      	ldrh	r3, [r3, #8]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	f002 face 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MPU9250_Config+0x55e>
        return MPU9250_RESULT_FAIL;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e051      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80018ba:	2363      	movs	r3, #99	; 0x63
 80018bc:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 80018be:	2316      	movs	r3, #22
 80018c0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6858      	ldr	r0, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	891b      	ldrh	r3, [r3, #8]
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	f002 fabd 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f107 020c 	add.w	r2, r7, #12
 80018da:	f107 010c 	add.w	r1, r7, #12
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2302      	movs	r3, #2
 80018e6:	f003 f843 	bl	8004970 <HAL_SPI_TransmitReceive>
 80018ea:	4603      	mov	r3, r0
 80018ec:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6858      	ldr	r0, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	891b      	ldrh	r3, [r3, #8]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4619      	mov	r1, r3
 80018fa:	f002 faa7 	bl	8003e4c <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MPU9250_Config+0x5ac>
        return MPU9250_RESULT_FAIL;
 8001904:	2301      	movs	r3, #1
 8001906:	e02a      	b.n	800195e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001908:	2327      	movs	r3, #39	; 0x27
 800190a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 800190c:	2381      	movs	r3, #129	; 0x81
 800190e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6858      	ldr	r0, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	891b      	ldrh	r3, [r3, #8]
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f002 fa96 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	f107 010c 	add.w	r1, r7, #12
 800192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2302      	movs	r3, #2
 8001934:	f003 f81c 	bl	8004970 <HAL_SPI_TransmitReceive>
 8001938:	4603      	mov	r3, r0
 800193a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6858      	ldr	r0, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	891b      	ldrh	r3, [r3, #8]
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	f002 fa80 	bl	8003e4c <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800194c:	2064      	movs	r0, #100	; 0x64
 800194e:	f001 ffb7 	bl	80038c0 <HAL_Delay>

    //Ex
    if (res != HAL_OK) {
 8001952:	7cfb      	ldrb	r3, [r7, #19]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MPU9250_Config+0x600>
        return MPU9250_RESULT_FAIL;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <MPU9250_Config+0x602>
    }

    return MPU9250_RESULT_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	bf00      	nop
 8001968:	3fe00000 	.word	0x3fe00000
 800196c:	40600000 	.word	0x40600000
 8001970:	3ff00000 	.word	0x3ff00000
 8001974:	00000000 	.word	0x00000000

08001978 <MPU9250_Update6DOF>:

MPU9250_Result_t MPU9250_Update6DOF(MPU9250_CONFIG_t *MPU9250_CONFIG,MPU9250_DATA_t *MPU9250_DATA){
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08d      	sub	sp, #52	; 0x34
 800197c:	af02      	add	r7, sp, #8
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    uint8_t cmdbuf[15] = {0};
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	f8c3 200b 	str.w	r2, [r3, #11]
    HAL_StatusTypeDef res;

    /* MPU9250_Get_Accel_Gyro_and_Temp ---------------------------------------------------------*/

    uint8_t cmd_base = MPU9250_ACCEL_XOUT_H|0x80;
 8001992:	23bb      	movs	r3, #187	; 0xbb
 8001994:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < 15; ++i) {
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800199c:	e010      	b.n	80019c0 <MPU9250_Update6DOF+0x48>
        cmdbuf[i] = cmd_base + i;
 800199e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a2:	7ff9      	ldrb	r1, [r7, #31]
 80019a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019a8:	440a      	add	r2, r1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019b0:	440b      	add	r3, r1
 80019b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 15; ++i) {
 80019b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ba:	3301      	adds	r3, #1
 80019bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c4:	2b0e      	cmp	r3, #14
 80019c6:	d9ea      	bls.n	800199e <MPU9250_Update6DOF+0x26>
    }

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6858      	ldr	r0, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	891b      	ldrh	r3, [r3, #8]
 80019d0:	2200      	movs	r2, #0
 80019d2:	4619      	mov	r1, r3
 80019d4:	f002 fa3a 	bl	8003e4c <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,15,0xFFFF);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f107 020c 	add.w	r2, r7, #12
 80019e0:	f107 010c 	add.w	r1, r7, #12
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	230f      	movs	r3, #15
 80019ec:	f002 ffc0 	bl	8004970 <HAL_SPI_TransmitReceive>
 80019f0:	4603      	mov	r3, r0
 80019f2:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6858      	ldr	r0, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	891b      	ldrh	r3, [r3, #8]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	f002 fa24 	bl	8003e4c <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001a04:	7fbb      	ldrb	r3, [r7, #30]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MPU9250_Update6DOF+0x96>
        return MPU9250_RESULT_FAIL;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0ae      	b.n	8001b6c <MPU9250_Update6DOF+0x1f4>
    }

    for(int i=0;i<3;i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	e07a      	b.n	8001b0a <MPU9250_Update6DOF+0x192>
        MPU9250_DATA->accel_raw[i] = (uint16_t)cmdbuf[2*i+1] << 8 | cmdbuf[2*i+2];
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a1e:	4413      	add	r3, r2
 8001a20:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a32:	440b      	add	r3, r1
 8001a34:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	3304      	adds	r3, #4
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	809a      	strh	r2, [r3, #4]
        MPU9250_DATA->gyro_raw[i] = (uint16_t)cmdbuf[2*i+9] << 8 | cmdbuf[2*i+10];
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	3309      	adds	r3, #9
 8001a54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a58:	4413      	add	r3, r2
 8001a5a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	3305      	adds	r3, #5
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	3210      	adds	r2, #16
 8001a80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MPU9250_DATA->accel[i] = ((int16_t)MPU9250_DATA->accel_raw[i] * MPU9250_CONFIG->ARES) - MPU9250_CONFIG->ACCEL_OFFSET[i];
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	889b      	ldrh	r3, [r3, #4]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	edc3 7a00 	vstr	s15, [r3]
        MPU9250_DATA->gyro[i] = ((int16_t)MPU9250_DATA->gyro_raw[i] * MPU9250_CONFIG->GRES) - MPU9250_CONFIG->GYRO_OFFSET[i];
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	3210      	adds	r2, #16
 8001ac8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	330a      	adds	r3, #10
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3304      	adds	r3, #4
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	3304      	adds	r3, #4
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<3;i++){
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	3301      	adds	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dd81      	ble.n	8001a14 <MPU9250_Update6DOF+0x9c>
    }
    MPU9250_DATA->temperature_raw = ((uint16_t)cmdbuf[7] << 8) | cmdbuf[8];
 8001b10:	7cfb      	ldrb	r3, [r7, #19]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	7d3b      	ldrb	r3, [r7, #20]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    MPU9250_DATA->temperature = (MPU9250_DATA->temperature_raw/333.87) + 21.0;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd11 	bl	8000554 <__aeabi_i2d>
 8001b32:	a312      	add	r3, pc, #72	; (adr r3, 8001b7c <MPU9250_Update6DOF+0x204>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fea0 	bl	800087c <__aeabi_ddiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MPU9250_Update6DOF+0x200>)
 8001b4a:	f7fe fbb7 	bl	80002bc <__adddf3>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	f7fe ff79 	bl	8000a4c <__aeabi_d2f>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    if (res != HAL_OK) {
 8001b60:	7fbb      	ldrb	r3, [r7, #30]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MPU9250_Update6DOF+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <MPU9250_Update6DOF+0x1f4>
    }

    return MPU9250_RESULT_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	372c      	adds	r7, #44	; 0x2c
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	40350000 	.word	0x40350000
 8001b7c:	851eb852 	.word	0x851eb852
 8001b80:	4074ddeb 	.word	0x4074ddeb

08001b84 <MPU9250_Calibrate>:
    }

    return MPU9250_RESULT_OK;
}

MPU9250_Result_t MPU9250_Calibrate(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09a      	sub	sp, #104	; 0x68
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
    MPU9250_DATA_t MPU9250_TEMP;
    float ax_sum=0,ay_sum=0,az_sum=0;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	667b      	str	r3, [r7, #100]	; 0x64
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	663b      	str	r3, [r7, #96]	; 0x60
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    float gx_sum=0,gy_sum=0,gz_sum=0;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	653b      	str	r3, [r7, #80]	; 0x50

    /* MPU9250_Accel_Gyro_Calibration---------------------------------------------------------*/
    for (uint8_t i = 0; i < 3; ++i) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001bb6:	e018      	b.n	8001bea <MPU9250_Calibrate+0x66>
        MPU9250_TEMP.accel_raw[i] = 0;
 8001bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f823 2c5c 	strh.w	r2, [r3, #-92]
        MPU9250_TEMP.accel[i] = 0;
 8001bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b60      	subs	r3, #96	; 0x60
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i) {
 8001be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001be4:	3301      	adds	r3, #1
 8001be6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001bea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d9e2      	bls.n	8001bb8 <MPU9250_Calibrate+0x34>
    }

    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001bf8:	e03e      	b.n	8001c78 <MPU9250_Calibrate+0xf4>
        MPU9250_Update6DOF(MPU9250_CONFIG,&MPU9250_TEMP);
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff feb9 	bl	8001978 <MPU9250_Update6DOF>
        ax_sum += MPU9250_TEMP.accel[0];
 8001c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c0a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        ay_sum += MPU9250_TEMP.accel[1];
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c22:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        az_sum += MPU9250_TEMP.accel[2] - 1;
 8001c26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c32:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        gx_sum += MPU9250_TEMP.gyro[0];
 8001c3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c42:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        gy_sum += MPU9250_TEMP.gyro[1];
 8001c4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        gz_sum += MPU9250_TEMP.gyro[2];
 8001c5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001c6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c72:	3301      	adds	r3, #1
 8001c74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c80:	d3bb      	bcc.n	8001bfa <MPU9250_Calibrate+0x76>
    }
    MPU9250_CONFIG->ACCEL_OFFSET[0] = ax_sum/CALIBRATE_TIMES;
 8001c82:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001c86:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edc3 7a08 	vstr	s15, [r3, #32]
    MPU9250_CONFIG->ACCEL_OFFSET[1] = ay_sum/CALIBRATE_TIMES;
 8001c94:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001c98:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    MPU9250_CONFIG->ACCEL_OFFSET[2] = az_sum/CALIBRATE_TIMES;
 8001ca6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001caa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    MPU9250_CONFIG->GYRO_OFFSET[0] = gx_sum/CALIBRATE_TIMES;
 8001cb8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001cbc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    MPU9250_CONFIG->GYRO_OFFSET[1] = gy_sum/CALIBRATE_TIMES;
 8001cca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001cce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    MPU9250_CONFIG->GYRO_OFFSET[2] = gz_sum/CALIBRATE_TIMES;
 8001cdc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ce0:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001cf8 <MPU9250_Calibrate+0x174>
 8001ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    return MPU9250_RESULT_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3768      	adds	r7, #104	; 0x68
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	447a0000 	.word	0x447a0000

08001cfc <attitudeInit>:
 */
#include "attitude.h"

#define betaDef         0.1 // 2 * proportional gain

void attitudeInit(AttitudeState *s, KalmanState* kf) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    // gyroscope drift estimated to be 1 deg/s
    s->beta = sqrt(3.0/4) * 3.14159265358979 * (1.0/180.0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <attitudeInit+0x44>)
 8001d0a:	601a      	str	r2, [r3, #0]
    s->q0 = 1.0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d12:	60da      	str	r2, [r3, #12]
    s->q1 = s->q2 = s->q3 = 0.0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
    s->step = 0.0000175;  // step for gradient descent found through testing
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <attitudeInit+0x48>)
 8001d30:	605a      	str	r2, [r3, #4]
    initKFMatrices(kf);
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f000 f808 	bl	8001d48 <initKFMatrices>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	3c77a4e2 	.word	0x3c77a4e2
 8001d44:	3792ccf7 	.word	0x3792ccf7

08001d48 <initKFMatrices>:

void initKFMatrices(KalmanState* kf) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    /*
    * Kalman Filter array is 3 rows
    *  Each row represents an axis
    *  Each column represents x1, x2, x3 for their respective axis
    */
    kf->time = 0.001; // sample rate (s)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4abd      	ldr	r2, [pc, #756]	; (8002048 <initKFMatrices+0x300>)
 8001d54:	601a      	str	r2, [r3, #0]
    float32_t t = kf->time;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	61fb      	str	r3, [r7, #28]
    float32_t t2= t*t;
 8001d5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	edc7 7a06 	vstr	s15, [r7, #24]
    float32_t t2d2      = t2/2.0; //precompute
 8001d6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d78:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t t4d4      = t2d2*t2d2;
 8001d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d88:	edc7 7a04 	vstr	s15, [r7, #16]
    float32_t t3d2      = t2d2*t;
 8001d8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d98:	edc7 7a03 	vstr	s15, [r7, #12]

    // Stores state of current axis
    for (uint8_t i = 0; i < X_MAT_SZ; ++i) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001da2:	e00d      	b.n	8001dc0 <initKFMatrices+0x78>
        kf->x_mat[i] = 0;
 8001da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < X_MAT_SZ; ++i) {
 8001db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d9ed      	bls.n	8001da4 <initKFMatrices+0x5c>
    }
    arm_mat_init_f32(&kf->X, X_MAT_SZ, 1, kf->x_mat);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	f004 fdb1 	bl	800693c <arm_mat_init_f32>

    // A Matrix
    for (uint8_t i = 0; i < A_MAT_SZ; ++i) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001de0:	e00d      	b.n	8001dfe <initKFMatrices+0xb6>
        kf->a_mat[i] = 0;
 8001de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	330a      	adds	r3, #10
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < A_MAT_SZ; ++i) {
 8001df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d9ed      	bls.n	8001de2 <initKFMatrices+0x9a>
    }
    kf->a_mat[0] = 1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
    kf->a_mat[1] = t;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
    kf->a_mat[2] = -t2d2;
 8001e14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e18:	eef1 7a67 	vneg.f32	s15, s15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    kf->a_mat[4] = 1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
    kf->a_mat[5] = -t;
 8001e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e2e:	eef1 7a67 	vneg.f32	s15, s15
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    kf->a_mat[8] = 0; // discard old acceleration reading
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	649a      	str	r2, [r3, #72]	; 0x48
    arm_mat_init_f32(&kf->A, 3, 3, kf->a_mat);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3328      	adds	r3, #40	; 0x28
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	f004 fd75 	bl	800693c <arm_mat_init_f32>

    // G Matrix
    kf->g_mat[0] = 0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	64da      	str	r2, [r3, #76]	; 0x4c
    kf->g_mat[1] = 0;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	651a      	str	r2, [r3, #80]	; 0x50
    kf->g_mat[2] = 1; // set acc equal to new acceleration reading
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    arm_mat_init_f32(&kf->G, G_MAT_SZ, 1, kf->g_mat);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	334c      	adds	r3, #76	; 0x4c
 8001e74:	2201      	movs	r2, #1
 8001e76:	2103      	movs	r1, #3
 8001e78:	f004 fd60 	bl	800693c <arm_mat_init_f32>

    // H Matrix
    kf->h_mat[0] = 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
    kf->h_mat[1] = 0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	65da      	str	r2, [r3, #92]	; 0x5c
    kf->h_mat[2] = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60
    arm_mat_init_f32(&kf->H, 1, H_MAT_SZ, kf->h_mat);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3358      	adds	r3, #88	; 0x58
 8001e9e:	2209      	movs	r2, #9
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	f004 fd4b 	bl	800693c <arm_mat_init_f32>

    // Z Matrix pos of current axis
    for (uint8_t i = 0; i < Z_MAT_SZ; ++i) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001eac:	e00e      	b.n	8001ecc <initKFMatrices+0x184>
        kf->z_mat[i] = 0;
 8001eae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	331e      	adds	r3, #30
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < Z_MAT_SZ; ++i) {
 8001ec2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001ecc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d9ec      	bls.n	8001eae <initKFMatrices+0x166>
    }
    arm_mat_init_f32(&kf->Z, 1, 1, kf->z_mat);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	337c      	adds	r3, #124	; 0x7c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	f004 fd2b 	bl	800693c <arm_mat_init_f32>

    // W Matrix
    for (uint8_t i = 0; i < W_MAT_SZ; ++i) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001eec:	e00d      	b.n	8001f0a <initKFMatrices+0x1c2>
        kf->w_mat[i] = 0;
 8001eee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	3322      	adds	r3, #34	; 0x22
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < W_MAT_SZ; ++i) {
 8001f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f04:	3301      	adds	r3, #1
 8001f06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d9ed      	bls.n	8001eee <initKFMatrices+0x1a6>
    }
    kf->w_mat[2] = -ACC_X_BIAS;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	; (800204c <initKFMatrices+0x304>)
 8001f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    kf->w_mat[5] = -ACC_Y_BIAS;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <initKFMatrices+0x308>)
 8001f1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    kf->w_mat[8] = -ACC_Z_BIAS;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <initKFMatrices+0x30c>)
 8001f26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    arm_mat_init_f32(&kf->W, 3, 3, kf->w_mat);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3388      	adds	r3, #136	; 0x88
 8001f34:	2203      	movs	r2, #3
 8001f36:	2103      	movs	r1, #3
 8001f38:	f004 fd00 	bl	800693c <arm_mat_init_f32>

    // V Matrix measured accelerometer various for current axis
    for (uint8_t i = 0; i < 3; ++i) kf->v_mat[i] = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f42:	e00e      	b.n	8001f62 <initKFMatrices+0x21a>
 8001f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	332a      	adds	r3, #42	; 0x2a
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d9ec      	bls.n	8001f44 <initKFMatrices+0x1fc>
    kf->v_mat[0] = ACC_X_VAR*t2d2;
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7fe fb04 	bl	8000578 <__aeabi_f2d>
 8001f70:	a32f      	add	r3, pc, #188	; (adr r3, 8002030 <initKFMatrices+0x2e8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb57 	bl	8000628 <__aeabi_dmul>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7fe fd63 	bl	8000a4c <__aeabi_d2f>
 8001f86:	4602      	mov	r2, r0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    kf->v_mat[1] = ACC_Y_VAR*t2d2;
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7fe faf2 	bl	8000578 <__aeabi_f2d>
 8001f94:	a328      	add	r3, pc, #160	; (adr r3, 8002038 <initKFMatrices+0x2f0>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb45 	bl	8000628 <__aeabi_dmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f7fe fd51 	bl	8000a4c <__aeabi_d2f>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    kf->v_mat[2] = ACC_Z_VAR*t2d2;
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7fe fae0 	bl	8000578 <__aeabi_f2d>
 8001fb8:	a321      	add	r3, pc, #132	; (adr r3, 8002040 <initKFMatrices+0x2f8>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4621      	mov	r1, r4
 8001fca:	f7fe fd3f 	bl	8000a4c <__aeabi_d2f>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    arm_mat_init_f32(&kf->V, 1, 1, kf->v_mat);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	33ac      	adds	r3, #172	; 0xac
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	f004 fcaa 	bl	800693c <arm_mat_init_f32>

    // P Matrix initially position is known to be true
    for(uint8_t i = 0; i < 9; ++i) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001fee:	e00d      	b.n	800200c <initKFMatrices+0x2c4>
        kf->p_mat[i] = 0;
 8001ff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	332e      	adds	r3, #46	; 0x2e
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < 9; ++i) {
 8002002:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002006:	3301      	adds	r3, #1
 8002008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800200c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002010:	2b08      	cmp	r3, #8
 8002012:	d9ed      	bls.n	8001ff0 <initKFMatrices+0x2a8>
    }
    arm_mat_init_f32(&kf->P, 3, 3, kf->p_mat);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	33b8      	adds	r3, #184	; 0xb8
 800201e:	2203      	movs	r2, #3
 8002020:	2103      	movs	r1, #3
 8002022:	f004 fc8b 	bl	800693c <arm_mat_init_f32>

    // Q Matrix constant
    for (uint8_t i = 0; i < Q_MAT_SZ; ++i) {
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800202c:	e025      	b.n	800207a <initKFMatrices+0x332>
 800202e:	bf00      	nop
 8002030:	f40aee09 	.word	0xf40aee09
 8002034:	3ed92ebe 	.word	0x3ed92ebe
 8002038:	bcfd322c 	.word	0xbcfd322c
 800203c:	3ed11df0 	.word	0x3ed11df0
 8002040:	899de7cc 	.word	0x899de7cc
 8002044:	3eecd237 	.word	0x3eecd237
 8002048:	3a83126f 	.word	0x3a83126f
 800204c:	3b8dd6d8 	.word	0x3b8dd6d8
 8002050:	b9bfd12b 	.word	0xb9bfd12b
 8002054:	baf73556 	.word	0xbaf73556
 8002058:	38d1b717 	.word	0x38d1b717
        kf->q_mat[i] = 0;
 800205c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	3336      	adds	r3, #54	; 0x36
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3304      	adds	r3, #4
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < Q_MAT_SZ; ++i) {
 8002070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002074:	3301      	adds	r3, #1
 8002076:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800207a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800207e:	2b08      	cmp	r3, #8
 8002080:	d9ec      	bls.n	800205c <initKFMatrices+0x314>
    }
    kf->q_mat[0] = t4d4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    kf->q_mat[1] = t3d2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    kf->q_mat[3] = t3d2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    kf->q_mat[4] = t2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    arm_mat_init_f32(&kf->Q, 3, 3, kf->q_mat);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	33dc      	adds	r3, #220	; 0xdc
 80020ac:	2203      	movs	r2, #3
 80020ae:	2103      	movs	r1, #3
 80020b0:	f004 fc44 	bl	800693c <arm_mat_init_f32>
    arm_mat_scale_f32(&kf->Q, Q_COVAR, &kf->Q);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c0:	4619      	mov	r1, r3
 80020c2:	ed1f 0a1b 	vldr	s0, [pc, #-108]	; 8002058 <initKFMatrices+0x310>
 80020c6:	4610      	mov	r0, r2
 80020c8:	f003 ffca 	bl	8006060 <arm_mat_scale_f32>

    // R Matrix
    kf->r_mat[0] = R_COVAR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <initKFMatrices+0x408>)
 80020d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    arm_mat_init_f32(&kf->R, 1, 1, kf->r_mat);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020e0:	2201      	movs	r2, #1
 80020e2:	2101      	movs	r1, #1
 80020e4:	f004 fc2a 	bl	800693c <arm_mat_init_f32>

    // Identity Matrix
    for (uint8_t i = 0; i < I_MAT_SZ; ++i) {
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3020 	strb.w	r3, [r7, #32]
 80020ee:	e00e      	b.n	800210e <initKFMatrices+0x3c6>
        kf->i_mat[i] = 0;
 80020f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	3340      	adds	r3, #64	; 0x40
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < I_MAT_SZ; ++i) {
 8002104:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002108:	3301      	adds	r3, #1
 800210a:	f887 3020 	strb.w	r3, [r7, #32]
 800210e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002112:	2b08      	cmp	r3, #8
 8002114:	d9ec      	bls.n	80020f0 <initKFMatrices+0x3a8>
    }
    kf->i_mat[0] = 1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800211c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    kf->i_mat[4] = 1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002126:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    kf->i_mat[8] = 1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002130:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    arm_mat_init_f32(&kf->I, 3, 3, kf->i_mat);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002140:	2203      	movs	r2, #3
 8002142:	2103      	movs	r1, #3
 8002144:	f004 fbfa 	bl	800693c <arm_mat_init_f32>
}
 8002148:	bf00      	nop
 800214a:	372c      	adds	r7, #44	; 0x2c
 800214c:	46bd      	mov	sp, r7
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	3851b717 	.word	0x3851b717
 8002154:	00000000 	.word	0x00000000

08002158 <kfUpdate>:

void kfUpdate(KalmanState *kf, float* acc) {
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b0d7      	sub	sp, #348	; 0x15c
 800215c:	af00      	add	r7, sp, #0
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	6018      	str	r0, [r3, #0]
 8002162:	463b      	mov	r3, r7
 8002164:	6019      	str	r1, [r3, #0]
    // Update Equations
    float32_t auxA_3_3_mat[9] = {0};
 8002166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fd10 	bl	8006b94 <memset>
    float32_t auxB_3_3_mat[9] = {0};
 8002174:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002178:	2224      	movs	r2, #36	; 0x24
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fd09 	bl	8006b94 <memset>
    float32_t auxC_3_3_mat[9] = {0};
 8002182:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fd02 	bl	8006b94 <memset>
    float32_t auxP_3_3_mat[9] = {0};
 8002190:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f004 fcfb 	bl	8006b94 <memset>
    float32_t auxA_3_1_mat[3] = {0};
 800219e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
    float32_t auxB_3_1_mat[3] = {0};
 80021aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
    float32_t auxC_3_1_mat[3] = {0};
 80021b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
    float32_t auxD_3_1_mat[3] = {0};
 80021c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
    float32_t auxX_3_1_mat[3] = {0};
 80021ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
    float32_t auxK_3_1_mat[3] = {0};
 80021da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
    float32_t auxA_1_1_mat[1] = {0};
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	67bb      	str	r3, [r7, #120]	; 0x78
    float32_t auxB_1_1_mat[1] = {0};
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	677b      	str	r3, [r7, #116]	; 0x74
    float32_t auxC_1_1_mat[1] = {0};
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	673b      	str	r3, [r7, #112]	; 0x70
    arm_matrix_instance_f32 auxA_3_3, auxB_3_3, auxC_3_3;
    arm_matrix_instance_f32 auxA_3_1, auxB_3_1, auxC_3_1, auxD_3_1;
    arm_matrix_instance_f32 auxA_1_1, auxB_1_1, auxC_1_1;
    arm_matrix_instance_f32 auxX_3_1, auxP_3_3;
    arm_matrix_instance_f32 auxK_3_1;
    arm_mat_init_f32(&auxA_3_3, 3, 3, auxA_3_3_mat);
 80021f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021fc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002200:	2203      	movs	r2, #3
 8002202:	2103      	movs	r1, #3
 8002204:	f004 fb9a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_3_3, 3, 3, auxB_3_3_mat);
 8002208:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800220c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002210:	2203      	movs	r2, #3
 8002212:	2103      	movs	r1, #3
 8002214:	f004 fb92 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_3_3, 3, 3, auxC_3_3_mat);
 8002218:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800221c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002220:	2203      	movs	r2, #3
 8002222:	2103      	movs	r1, #3
 8002224:	f004 fb8a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxP_3_3, 3, 3, auxP_3_3_mat);
 8002228:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800222c:	f107 0010 	add.w	r0, r7, #16
 8002230:	2203      	movs	r2, #3
 8002232:	2103      	movs	r1, #3
 8002234:	f004 fb82 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxA_3_1, 3, 1, auxA_3_1_mat);
 8002238:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800223c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002240:	2201      	movs	r2, #1
 8002242:	2103      	movs	r1, #3
 8002244:	f004 fb7a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_3_1, 3, 1, auxB_3_1_mat);
 8002248:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800224c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002250:	2201      	movs	r2, #1
 8002252:	2103      	movs	r1, #3
 8002254:	f004 fb72 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_3_1, 3, 1, auxC_3_1_mat);
 8002258:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800225c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002260:	2201      	movs	r2, #1
 8002262:	2103      	movs	r1, #3
 8002264:	f004 fb6a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxD_3_1, 3, 1, auxD_3_1_mat);
 8002268:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800226c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002270:	2201      	movs	r2, #1
 8002272:	2103      	movs	r1, #3
 8002274:	f004 fb62 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxX_3_1, 3, 1, auxX_3_1_mat);
 8002278:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800227c:	f107 0018 	add.w	r0, r7, #24
 8002280:	2201      	movs	r2, #1
 8002282:	2103      	movs	r1, #3
 8002284:	f004 fb5a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxK_3_1, 3, 1, auxK_3_1_mat);
 8002288:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800228c:	f107 0008 	add.w	r0, r7, #8
 8002290:	2201      	movs	r2, #1
 8002292:	2103      	movs	r1, #3
 8002294:	f004 fb52 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxA_1_1, 1, 1, auxA_1_1_mat);
 8002298:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800229c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80022a0:	2201      	movs	r2, #1
 80022a2:	2101      	movs	r1, #1
 80022a4:	f004 fb4a 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_1_1, 1, 1, auxB_1_1_mat);
 80022a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80022b0:	2201      	movs	r2, #1
 80022b2:	2101      	movs	r1, #1
 80022b4:	f004 fb42 	bl	800693c <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_1_1, 1, 1, auxC_1_1_mat);
 80022b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022bc:	f107 0020 	add.w	r0, r7, #32
 80022c0:	2201      	movs	r2, #1
 80022c2:	2101      	movs	r1, #1
 80022c4:	f004 fb3a 	bl	800693c <arm_mat_init_f32>
    for (uint8_t i = 0; i < 3; ++i) {
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80022ce:	e147      	b.n	8002560 <kfUpdate+0x408>
        uint8_t X_mat_offset = i*3;
 80022d0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80022d4:	461a      	mov	r2, r3
 80022d6:	0052      	lsls	r2, r2, #1
 80022d8:	4413      	add	r3, r2
 80022da:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
        // Predict Equations

        /* Set current state to respective coordinate axis */
        arm_mat_init_f32(&kf->X, 3, 1, kf->x_mat+X_mat_offset);
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	2201      	movs	r2, #1
 80022f6:	2103      	movs	r1, #3
 80022f8:	f004 fb20 	bl	800693c <arm_mat_init_f32>
        arm_mat_init_f32(&kf->V, 1, 1, kf->v_mat+i);
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 800230c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	2101      	movs	r1, #1
 8002318:	f004 fb10 	bl	800693c <arm_mat_init_f32>
        arm_mat_init_f32(&kf->W, 3, 1, kf->w_mat+X_mat_offset);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800232c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	2201      	movs	r2, #1
 8002336:	2103      	movs	r1, #3
 8002338:	f004 fb00 	bl	800693c <arm_mat_init_f32>

        /* G*ak: Update measured acceleration disturbance matrix */
        // conversion for gs to m/s^2
        arm_mat_scale_f32(&kf->G, acc[i]*9.80665, &auxA_3_1); // G*ak 3x1
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8002344:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	463a      	mov	r2, r7
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4413      	add	r3, r2
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f910 	bl	8000578 <__aeabi_f2d>
 8002358:	a387      	add	r3, pc, #540	; (adr r3, 8002578 <kfUpdate+0x420>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f963 	bl	8000628 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fb6f 	bl	8000a4c <__aeabi_d2f>
 800236e:	4602      	mov	r2, r0
 8002370:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002374:	4619      	mov	r1, r3
 8002376:	ee00 2a10 	vmov	s0, r2
 800237a:	4620      	mov	r0, r4
 800237c:	f003 fe70 	bl	8006060 <arm_mat_scale_f32>

        /* A*x_k-1k-1: Update process matrix */
        arm_mat_mult_f32(&kf->A, &kf->X, &auxB_3_1); // A*X 3x1
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 7098 	add.w	r0, r3, #304	; 0x130
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002390:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002394:	4619      	mov	r1, r3
 8002396:	f003 ff1d 	bl	80061d4 <arm_mat_mult_f32>

        /* sigma*W_k: Update position measurement noise matrix */
        arm_mat_scale_f32(&kf->W, 1, &auxC_3_1); // W*1 3x1
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80023a6:	4611      	mov	r1, r2
 80023a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fe57 	bl	8006060 <arm_mat_scale_f32>

        /* x_kk-1= A*x_k-1k-1 + G*ak + W */
        arm_mat_add_f32(&auxB_3_1, &auxA_3_1, &auxD_3_1); // A*X + G*ak
 80023b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80023ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fac6 	bl	8006950 <arm_mat_add_f32>
        arm_mat_add_f32(&auxD_3_1, &auxC_3_1, &auxX_3_1); //X = A*X + G*ak + W*sigma
 80023c4:	f107 0218 	add.w	r2, r7, #24
 80023c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80023cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fabd 	bl	8006950 <arm_mat_add_f32>

        /*P_kk-1= APA_T + Qk */
        arm_mat_trans_f32(&kf->A, &auxA_3_3);       // A_t 3x3
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80023de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fc6d 	bl	8005cc4 <arm_mat_trans_f32>
        arm_mat_mult_f32(&kf->P, &auxA_3_3, &auxB_3_3); // P*A_t
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80023f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80023f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 feea 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_mult_f32(&kf->A, &auxB_3_3, &auxC_3_3); // A*P*A_t
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002408:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800240c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fedf 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxC_3_3, &kf->Q, &auxP_3_3);  // P = A*P*A_t + Q 3x3
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800241e:	f107 0210 	add.w	r2, r7, #16
 8002422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fa92 	bl	8006950 <arm_mat_add_f32>

        // Update Equations

        /* Kalman gain: K = P_kk-1*Ht_k*S^-1_k */
        arm_mat_trans_f32(&kf->H, &auxA_3_1);   // H_t
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002434:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fc42 	bl	8005cc4 <arm_mat_trans_f32>
        arm_mat_mult_f32(&auxP_3_3, &auxA_3_1, &auxB_3_1);   // PH_t 3x1
 8002440:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002444:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4618      	mov	r0, r3
 800244e:	f003 fec1 	bl	80061d4 <arm_mat_mult_f32>

        arm_mat_mult_f32(&kf->H, &auxB_3_1, &auxA_1_1); // HPH_t 1x1
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800245a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800245e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002462:	4618      	mov	r0, r3
 8002464:	f003 feb6 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxA_1_1, &kf->R, &auxB_1_1); // S = HPH_t + R 1x1
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 71b8 	add.w	r1, r3, #368	; 0x170
 8002470:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002478:	4618      	mov	r0, r3
 800247a:	f004 fa69 	bl	8006950 <arm_mat_add_f32>
        arm_mat_inverse_f32(&auxB_1_1, &auxC_1_1); // S^-1
 800247e:	f107 0220 	add.w	r2, r7, #32
 8002482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ffdf 	bl	800644c <arm_mat_inverse_f32>

        arm_mat_mult_f32(&auxA_3_1, &auxC_1_1, &auxC_3_1); // H_t * S^-1 3x1
 800248e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002492:	f107 0120 	add.w	r1, r7, #32
 8002496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fe9a 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_mult_f32(&auxP_3_3, &auxC_3_1, &auxK_3_1); // K = P * H^t * S^-1
 80024a0:	f107 0208 	add.w	r2, r7, #8
 80024a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fe91 	bl	80061d4 <arm_mat_mult_f32>

        /* A posteriori state estimate */
        arm_mat_mult_f32(&auxK_3_1, &kf->H, &auxA_3_3); // KH
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 71a0 	add.w	r1, r3, #320	; 0x140
 80024ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fe86 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_sub_f32(&kf->I, &auxA_3_3, &auxB_3_3); // I-KH
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024d4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fcc9 	bl	8005e70 <arm_mat_sub_f32>
        arm_mat_mult_f32(&auxB_3_3, &auxX_3_1, &auxA_3_1); // (I-KH)*X
 80024de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024e2:	f107 0118 	add.w	r1, r7, #24
 80024e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fe72 	bl	80061d4 <arm_mat_mult_f32>

        arm_mat_mult_f32(&auxA_3_3, &auxX_3_1, &auxB_3_1); // KHX
 80024f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80024f4:	f107 0118 	add.w	r1, r7, #24
 80024f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fe69 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_mult_f32(&auxK_3_1, &kf->V, &auxC_3_1); // Kv
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800250a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fe5e 	bl	80061d4 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxA_3_1, &auxB_3_1, &auxD_3_1); // (I-KH)*X + KHX
 8002518:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800251c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002520:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002524:	4618      	mov	r0, r3
 8002526:	f004 fa13 	bl	8006950 <arm_mat_add_f32>
        arm_mat_add_f32(&auxD_3_1, &auxC_3_1, &kf->X); // (I-KH)*X + KHX + Kv
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8002532:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800253a:	4618      	mov	r0, r3
 800253c:	f004 fa08 	bl	8006950 <arm_mat_add_f32>

        /* A posteriori estimate cov */
        arm_mat_mult_f32(&auxB_3_3, &auxP_3_3, &kf->P); // (I-KH)*P
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8002548:	f107 0110 	add.w	r1, r7, #16
 800254c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fe3f 	bl	80061d4 <arm_mat_mult_f32>
    for (uint8_t i = 0; i < 3; ++i) {
 8002556:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 8002560:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002564:	2b02      	cmp	r3, #2
 8002566:	f67f aeb3 	bls.w	80022d0 <kfUpdate+0x178>
    }
}
 800256a:	bf00      	nop
 800256c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	f3af 8000 	nop.w
 8002578:	3a92a305 	.word	0x3a92a305
 800257c:	40239d01 	.word	0x40239d01

08002580 <invSqrt>:
    s->yaw = atan2(t1, t0) * 57.29578;
}

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x) {
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 800258a:	edd7 7a01 	vldr	s15, [r7, #4]
 800258e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002596:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	613b      	str	r3, [r7, #16]
    long i = *(long*)&y;
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i>>1);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	105a      	asrs	r2, r3, #1
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <invSqrt+0x9c>)
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 80025b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80025bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80025d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	edc7 7a04 	vstr	s15, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 80025e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80025e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80025f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	ee07 3a90 	vmov	s15, r3
}
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	5f3759df 	.word	0x5f3759df

08002620 <normalizeGravity>:

void normalizeGravity(AttitudeState *s, float* acc) {
 8002620:	b480      	push	{r7}
 8002622:	b095      	sub	sp, #84	; 0x54
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    float q0, q1, q2, q3;
    float q0q0, q1q1, q2q2, q3q3;
    float q0q1, q0q2, q0q3;
    float q1q2, q1q3;
    float q2q3;
    q0 = s->q0;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
    q1 = s->q1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
    q2 = s->q2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
    q3 = s->q3;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	643b      	str	r3, [r7, #64]	; 0x40
    q0q0 = q0*q0;
 8002642:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002646:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q1q1 = q1*q1;
 8002652:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002656:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q2q2 = q2*q2;
 8002662:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002666:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q3q3 = q3*q3;
 8002672:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002676:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    q0q1 = q0*q1;
 8002682:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002686:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    q0q2 = q0*q2;
 8002692:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002696:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    q0q3 = q0*q3;
 80026a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    q1q2 = q1*q2;
 80026b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	edc7 7a08 	vstr	s15, [r7, #32]
    q1q3 = q1*q3;
 80026c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80026c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	edc7 7a07 	vstr	s15, [r7, #28]
    q2q3 = q2*q3;
 80026d2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80026d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	edc7 7a06 	vstr	s15, [r7, #24]

    // rotate acceleration vector by quaternion orientation
    // essentially rotating sensor frame into inertial frame
    float r_acc[3];
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	ed93 7a00 	vldr	s14, [r3]
 80026e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80026ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3308      	adds	r3, #8
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002708:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800270c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3304      	adds	r3, #4
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	edd3 6a00 	vldr	s13, [r3]
 8002726:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002732:	edd7 7a08 	vldr	s15, [r7, #32]
 8002736:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3304      	adds	r3, #4
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274a:	edd7 7a07 	vldr	s15, [r7, #28]
 800274e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3308      	adds	r3, #8
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275e:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002770:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	edd3 6a00 	vldr	s13, [r3]
 800277a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800277e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 8002786:	edc7 7a03 	vstr	s15, [r7, #12]
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 800278a:	edd7 7a08 	vldr	s15, [r7, #32]
 800278e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3304      	adds	r3, #4
 80027a0:	edd3 6a00 	vldr	s13, [r3]
 80027a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3308      	adds	r3, #8
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c4:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 80027c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 80027da:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	edd3 6a00 	vldr	s13, [r3]
 80027e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	edd3 6a00 	vldr	s13, [r3]
 80027fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002802:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 8002806:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800280a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3308      	adds	r3, #8
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 800281a:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3304      	adds	r3, #4
 8002822:	edd3 6a00 	vldr	s13, [r3]
 8002826:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 8002832:	edc7 7a04 	vstr	s15, [r7, #16]
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002836:	edd7 7a07 	vldr	s15, [r7, #28]
 800283a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	edd7 7a06 	vldr	s15, [r7, #24]
 800284c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	3304      	adds	r3, #4
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	3308      	adds	r3, #8
 8002864:	edd3 6a00 	vldr	s13, [r3]
 8002868:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800286c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002870:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 8002874:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002878:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002886:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	edd3 6a00 	vldr	s13, [r3]
 8002892:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	3304      	adds	r3, #4
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee37 7a27 	vadd.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	3308      	adds	r3, #8
 80028ba:	edd3 6a00 	vldr	s13, [r3]
 80028be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80028c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 80028c6:	ee37 7a67 	vsub.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3308      	adds	r3, #8
 80028ce:	edd3 6a00 	vldr	s13, [r3]
 80028d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 80028de:	edc7 7a05 	vstr	s15, [r7, #20]
    acc[0] = r_acc[0];
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	601a      	str	r2, [r3, #0]
    acc[1] = r_acc[1];
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3304      	adds	r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	601a      	str	r2, [r3, #0]
    acc[2] = r_acc[2] - 1; // subtract out gravity component from acc
 80028f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3308      	adds	r3, #8
 80028f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002900:	edc3 7a00 	vstr	s15, [r3]
}
 8002904:	bf00      	nop
 8002906:	3754      	adds	r7, #84	; 0x54
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <madgwickUpdate>:

void madgwickUpdate(AttitudeState *s, float* acc, float* gyro, uint8_t sz) {
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b0aa      	sub	sp, #168	; 0xa8
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	70fb      	strb	r3, [r7, #3]
    float w_x, w_y, w_z, a_x, a_y, a_z;
    float invNorm;
    float deltat = s->step;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float beta = s->beta;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float qDot_omega_1, qDot_omega_2, qDot_omega_3, qDot_omega_4;  // quaternion derivative from gyroscopes elements
    float f_1, f_2, f_3;                                        // objective function elements
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;   // objective function Jacobian elements
    float qHatDot_1, qHatDot_2, qHatDot_3, qHatDot_4;   // estimated direction of the gyroscope error
    // Auxiliary variables to avoid repeated calculations
    w_x = gyro[0];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    w_y = gyro[1];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    w_z = gyro[2];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    a_x = acc[0];
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    a_y = acc[1];
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    a_z = acc[2];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q_1 = s->q0;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    q_2 = s->q1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    q_3 = s->q2;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	67fb      	str	r3, [r7, #124]	; 0x7c
    q_4 = s->q3;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	67bb      	str	r3, [r7, #120]	; 0x78
    float halfq_1 = 0.5 * q_1;
 800297a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800297e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002986:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float halfq_2 = 0.5 * q_2;
 800298a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800298e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float halfq_3 = 0.5 * q_3;
 800299a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800299e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float halfq_4 = 0.5 * q_4;
 80029aa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float twoq_1 = 2.0 * q_1;
 80029ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80029be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029c2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float twoq_2 = 2.0 * q_2;
 80029c6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80029ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ce:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float twoq_3 = 2.0 * q_3;
 80029d2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80029d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // Normalize the accelerometer measurement
    invNorm = invSqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 80029de:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80029e2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80029e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80029ee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80029f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029fa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80029fe:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f7ff fdb7 	bl	8002580 <invSqrt>
 8002a12:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    a_x *= invNorm;
 8002a16:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002a1a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    a_y *= invNorm;
 8002a26:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002a2a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    a_z *= invNorm;
 8002a36:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002a3a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a42:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    // Compute the objective function and Jacobian
    f_1 = twoq_2 * q_4 - twoq_1 * q_3 - a_x;
 8002a46:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a4a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a52:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002a56:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a62:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    f_2 = twoq_1 * q_2 + twoq_3 * q_4 - a_y;
 8002a6e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002a72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002a7e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a92:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    f_3 = 1.0 - twoq_2 * q_2 - twoq_3 * q_3 - a_z;
 8002a96:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a9a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fd67 	bl	8000578 <__aeabi_f2d>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460c      	mov	r4, r1
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	49f0      	ldr	r1, [pc, #960]	; (8002e78 <madgwickUpdate+0x568>)
 8002ab8:	f7fd fbfe 	bl	80002b8 <__aeabi_dsub>
 8002abc:	4603      	mov	r3, r0
 8002abe:	460c      	mov	r4, r1
 8002ac0:	4625      	mov	r5, r4
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002ac8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	ee17 0a90 	vmov	r0, s15
 8002ad4:	f7fd fd50 	bl	8000578 <__aeabi_f2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbea 	bl	80002b8 <__aeabi_dsub>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	4625      	mov	r5, r4
 8002aea:	461c      	mov	r4, r3
 8002aec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002af0:	f7fd fd42 	bl	8000578 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fbdc 	bl	80002b8 <__aeabi_dsub>
 8002b00:	4603      	mov	r3, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4618      	mov	r0, r3
 8002b06:	4621      	mov	r1, r4
 8002b08:	f7fd ffa0 	bl	8000a4c <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_11or24 = twoq_3;  // J_11 negated in matrix multiplication
 8002b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
    J_12or23 = 2.0 * q_4;
 8002b14:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002b18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b1c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_13or22 = twoq_1;  // J_12 negated in matrix multiplication
 8002b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
    J_14or21 = twoq_2;
 8002b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    J_32 = 2.0 * J_14or21;  // negated in matrix multiplication
 8002b28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    J_33 = 2.0 * J_11or24;  // negated in matrix multiplication
 8002b34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // Compute the gradient (matrix multiplication)
    qHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8002b40:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002b44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002b50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8002b60:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002b64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002b70:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002b80:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8002b90:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002b94:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002ba0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002bb0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8002bc0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bc4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bcc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002bd0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Normalize the gradient
    invNorm = invSqrt(qHatDot_1 * qHatDot_1 + qHatDot_2 * qHatDot_2 + qHatDot_3 * qHatDot_3 + qHatDot_4 * qHatDot_4);
 8002be0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002be4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002bf0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002c00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002c10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	f7ff fcae 	bl	8002580 <invSqrt>
 8002c24:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    qHatDot_1 *= invNorm;
 8002c28:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002c2c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 *= invNorm;
 8002c38:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002c3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 *= invNorm;
 8002c48:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002c4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 *= invNorm;
 8002c58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c5c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute the quaternion derivative measured by gyroscopes
    qDot_omega_1 = -halfq_2 * w_x - halfq_3 * w_y - halfq_4 * w_z;
 8002c68:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c6c:	eeb1 7a67 	vneg.f32	s14, s15
 8002c70:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c78:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002c7c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c88:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002c8c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c98:	edc7 7a08 	vstr	s15, [r7, #32]
    qDot_omega_2 = halfq_1 * w_x + halfq_3 * w_z - halfq_4 * w_y;
 8002c9c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002ca0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002cac:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002cbc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	edc7 7a07 	vstr	s15, [r7, #28]
    qDot_omega_3 = halfq_1 * w_y - halfq_2 * w_z + halfq_4 * w_x;
 8002ccc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002cd0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002cdc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ce8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8002cec:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	edc7 7a06 	vstr	s15, [r7, #24]
    qDot_omega_4 = halfq_1 * w_z + halfq_2 * w_y - halfq_3 * w_x;
 8002cfc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002d00:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d08:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002d0c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d18:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8002d1c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d28:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute then integrate the estimated quaternion derivative
    q_1 += (qDot_omega_1 - (beta * qHatDot_1)) * deltat;
 8002d2c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002d30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d40:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d50:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 += (qDot_omega_2 - (beta * qHatDot_2)) * deltat;
 8002d54:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002d58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d68:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 += (qDot_omega_3 - (beta * qHatDot_3)) * deltat;
 8002d7c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002d80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d90:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 += (qDot_omega_4 - (beta * qHatDot_4)) * deltat;
 8002da4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002da8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002db4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002db8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalize quaternion
    invNorm = invSqrt(q_1 * q_1 + q_2 * q_2 + q_3 * q_3 + q_4 * q_4);
 8002dcc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002dd0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd8:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002ddc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002dec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df8:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002dfc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0c:	f7ff fbb8 	bl	8002580 <invSqrt>
 8002e10:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    q_1 *= invNorm;
 8002e14:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e20:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 *= invNorm;
 8002e24:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002e28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e30:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 *= invNorm;
 8002e34:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002e38:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 *= invNorm;
 8002e44:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002e48:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Save new quaternion to state
    s->q0 = q_1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e5a:	60da      	str	r2, [r3, #12]
    s->q1 = q_2;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e62:	611a      	str	r2, [r3, #16]
    s->q2 = q_3;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e68:	615a      	str	r2, [r3, #20]
    s->q3 = q_4;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e6e:	619a      	str	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	37a8      	adds	r7, #168	; 0xa8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bdb0      	pop	{r4, r5, r7, pc}
 8002e78:	3ff00000 	.word	0x3ff00000

08002e7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t computeAttitude = 0;
volatile uint16_t num_computations = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
    computeAttitude = 1;
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
    ++num_computations;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002e96:	801a      	strh	r2, [r3, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	2000008c 	.word	0x2000008c
 8002ea8:	2000008e 	.word	0x2000008e

08002eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0a4      	sub	sp, #144	; 0x90
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb2:	f000 fc93 	bl	80037dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb6:	f000 f8c5 	bl	8003044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eba:	f000 f9c7 	bl	800324c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ebe:	f000 f99b 	bl	80031f8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002ec2:	f000 f92d 	bl	8003120 <MX_SPI2_Init>
  MX_TIM6_Init();
 8002ec6:	f000 f961 	bl	800318c <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU9250_DATA_t mpu_data;
  MPU9250_CONFIG_t mpu_config;
  mpu_config.hspi = &hspi2;
 8002eca:	4b53      	ldr	r3, [pc, #332]	; (8003018 <main+0x16c>)
 8002ecc:	607b      	str	r3, [r7, #4]
  mpu_config.GPIOx = MPU_CS_GPIO_Port;
 8002ece:	4b53      	ldr	r3, [pc, #332]	; (800301c <main+0x170>)
 8002ed0:	60bb      	str	r3, [r7, #8]
  mpu_config.GPIO_PIN = MPU_CS_Pin;
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	81bb      	strh	r3, [r7, #12]
  mpu_config.ACCEL_SCALE = ACCEL_SCALE_4G;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	73bb      	strb	r3, [r7, #14]
  mpu_config.GYRO_SCALE = GYRO_SCALE_500dps;
 8002eda:	2308      	movs	r3, #8
 8002edc:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 3; ++i) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002ee4:	e025      	b.n	8002f32 <main+0x86>
      mpu_config.ACCEL_OFFSET[i] = 0;
 8002ee6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002eea:	3308      	adds	r3, #8
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b8c      	subs	r3, #140	; 0x8c
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
      mpu_config.GYRO_OFFSET[i] = 0;
 8002efc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002f00:	330a      	adds	r3, #10
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b88      	subs	r3, #136	; 0x88
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      mpu_config.MAG_OFFSET[i] = 0;
 8002f12:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002f16:	330e      	adds	r3, #14
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b8c      	subs	r3, #140	; 0x8c
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 3; ++i) {
 8002f28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002f32:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d9d5      	bls.n	8002ee6 <main+0x3a>
  }
  MPU9250_Initialize(&mpu_config);
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd ff55 	bl	8000dec <MPU9250_Initialize>
  MPU9250_Config(&mpu_config);
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fa09 	bl	800135c <MPU9250_Config>
  MPU9250_Calibrate(&mpu_config);
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fe19 	bl	8001b84 <MPU9250_Calibrate>

  // Initialize attitude variables
  attitudeInit(&s, &kf);
 8002f52:	4933      	ldr	r1, [pc, #204]	; (8003020 <main+0x174>)
 8002f54:	4833      	ldr	r0, [pc, #204]	; (8003024 <main+0x178>)
 8002f56:	f7fe fed1 	bl	8001cfc <attitudeInit>
  initKFMatrices(&kf);
 8002f5a:	4831      	ldr	r0, [pc, #196]	; (8003020 <main+0x174>)
 8002f5c:	f7fe fef4 	bl	8001d48 <initKFMatrices>
  // start timer for quaternion computations
  HAL_TIM_Base_Start_IT(&htim6);
 8002f60:	4831      	ldr	r0, [pc, #196]	; (8003028 <main+0x17c>)
 8002f62:	f001 ff7e 	bl	8004e62 <HAL_TIM_Base_Start_IT>
  while (1)
  {
      if (computeAttitude) {
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <main+0x180>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0fa      	beq.n	8002f66 <main+0xba>
          MPU9250_Update6DOF(&mpu_config, &mpu_data);
 8002f70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fcfd 	bl	8001978 <MPU9250_Update6DOF>
          madgwickUpdate(&s, mpu_data.accel, mpu_data.gyro, 3);
 8002f7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f82:	f103 0214 	add.w	r2, r3, #20
 8002f86:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	4825      	ldr	r0, [pc, #148]	; (8003024 <main+0x178>)
 8002f8e:	f7ff fcbf 	bl	8002910 <madgwickUpdate>
//          computeAngles(&s);
          normalizeGravity(&s, mpu_data.accel);
 8002f92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f96:	4619      	mov	r1, r3
 8002f98:	4822      	ldr	r0, [pc, #136]	; (8003024 <main+0x178>)
 8002f9a:	f7ff fb41 	bl	8002620 <normalizeGravity>
          kfUpdate(&kf, mpu_data.accel);
 8002f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	481e      	ldr	r0, [pc, #120]	; (8003020 <main+0x174>)
 8002fa6:	f7ff f8d7 	bl	8002158 <kfUpdate>
          if (num_computations >= 100) {
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <main+0x184>)
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b63      	cmp	r3, #99	; 0x63
 8002fb2:	d92c      	bls.n	800300e <main+0x162>
              // print estimated KF position
              printf("x: %i ", (int32_t) (kf.x_mat[0]*100)); // in units of cm
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <main+0x174>)
 8002fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003034 <main+0x188>
 8002fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc6:	ee17 1a90 	vmov	r1, s15
 8002fca:	481b      	ldr	r0, [pc, #108]	; (8003038 <main+0x18c>)
 8002fcc:	f003 fdea 	bl	8006ba4 <iprintf>
              printf("y: %i ", (int32_t) (kf.x_mat[3]*100));
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <main+0x174>)
 8002fd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fd6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003034 <main+0x188>
 8002fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe2:	ee17 1a90 	vmov	r1, s15
 8002fe6:	4815      	ldr	r0, [pc, #84]	; (800303c <main+0x190>)
 8002fe8:	f003 fddc 	bl	8006ba4 <iprintf>
              printf("z: %i\n\r", (int32_t) (kf.x_mat[6]*100));
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <main+0x174>)
 8002fee:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ff2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003034 <main+0x188>
 8002ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffe:	ee17 1a90 	vmov	r1, s15
 8003002:	480f      	ldr	r0, [pc, #60]	; (8003040 <main+0x194>)
 8003004:	f003 fdce 	bl	8006ba4 <iprintf>
//                printf("%i ", (int32_t) (mpu_data.accel[1]*10000));
//                printf("%i\r\n", (int32_t) (mpu_data.accel[2]*10000));
//                printf("gyro x: %i, ", (int32_t) (mpu_data.gyro[0]*1000));
//                printf("gyro y: %i, ", (int32_t) (mpu_data.gyro[1]*1000));
//                printf("gyro z: %i \n\r", (int32_t) (mpu_data.gyro[2]*1000));
              num_computations = 0;
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <main+0x184>)
 800300a:	2200      	movs	r2, #0
 800300c:	801a      	strh	r2, [r3, #0]
          } // prints at 1 Hz
          computeAttitude = 0;
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <main+0x180>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
      if (computeAttitude) {
 8003014:	e7a7      	b.n	8002f66 <main+0xba>
 8003016:	bf00      	nop
 8003018:	200000a0 	.word	0x200000a0
 800301c:	40020800 	.word	0x40020800
 8003020:	200000f8 	.word	0x200000f8
 8003024:	200002b8 	.word	0x200002b8
 8003028:	20000278 	.word	0x20000278
 800302c:	2000008c 	.word	0x2000008c
 8003030:	2000008e 	.word	0x2000008e
 8003034:	42c80000 	.word	0x42c80000
 8003038:	08007984 	.word	0x08007984
 800303c:	0800798c 	.word	0x0800798c
 8003040:	08007994 	.word	0x08007994

08003044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b094      	sub	sp, #80	; 0x50
 8003048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	2234      	movs	r2, #52	; 0x34
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fd9e 	bl	8006b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <SystemClock_Config+0xd4>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <SystemClock_Config+0xd4>)
 8003072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003076:	6413      	str	r3, [r2, #64]	; 0x40
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <SystemClock_Config+0xd4>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003084:	2300      	movs	r3, #0
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <SystemClock_Config+0xd8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <SystemClock_Config+0xd8>)
 8003092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b20      	ldr	r3, [pc, #128]	; (800311c <SystemClock_Config+0xd8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a8:	2301      	movs	r3, #1
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ac:	2310      	movs	r3, #16
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b0:	2302      	movs	r3, #2
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030b4:	2300      	movs	r3, #0
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030b8:	2308      	movs	r3, #8
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030c0:	2302      	movs	r3, #2
 80030c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030c4:	2302      	movs	r3, #2
 80030c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030c8:	2302      	movs	r3, #2
 80030ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 f98f 	bl	80043f4 <HAL_RCC_OscConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80030dc:	f000 f94a 	bl	8003374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e0:	230f      	movs	r3, #15
 80030e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e4:	2302      	movs	r3, #2
 80030e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030f8:	f107 0308 	add.w	r3, r7, #8
 80030fc:	2104      	movs	r1, #4
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 febe 	bl	8003e80 <HAL_RCC_ClockConfig>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800310a:	f000 f933 	bl	8003374 <Error_Handler>
  }
}
 800310e:	bf00      	nop
 8003110:	3750      	adds	r7, #80	; 0x50
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000

08003120 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <MX_SPI2_Init+0x64>)
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <MX_SPI2_Init+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <MX_SPI2_Init+0x64>)
 800312c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <MX_SPI2_Init+0x64>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_SPI2_Init+0x64>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_SPI2_Init+0x64>)
 8003140:	2202      	movs	r2, #2
 8003142:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_SPI2_Init+0x64>)
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_SPI2_Init+0x64>)
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_SPI2_Init+0x64>)
 8003154:	2228      	movs	r2, #40	; 0x28
 8003156:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <MX_SPI2_Init+0x64>)
 800315a:	2200      	movs	r2, #0
 800315c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_SPI2_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <MX_SPI2_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_SPI2_Init+0x64>)
 800316c:	220a      	movs	r2, #10
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <MX_SPI2_Init+0x64>)
 8003172:	f001 fb99 	bl	80048a8 <HAL_SPI_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800317c:	f000 f8fa 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200000a0 	.word	0x200000a0
 8003188:	40003800 	.word	0x40003800

0800318c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003192:	463b      	mov	r3, r7
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <MX_TIM6_Init+0x64>)
 800319c:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <MX_TIM6_Init+0x68>)
 800319e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 639;
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031a2:	f240 227f 	movw	r2, #639	; 0x27f
 80031a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031b0:	2263      	movs	r2, #99	; 0x63
 80031b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031bc:	f001 fe26 	bl	8004e0c <HAL_TIM_Base_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80031c6:	f000 f8d5 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031d2:	463b      	mov	r3, r7
 80031d4:	4619      	mov	r1, r3
 80031d6:	4806      	ldr	r0, [pc, #24]	; (80031f0 <MX_TIM6_Init+0x64>)
 80031d8:	f002 f838 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80031e2:	f000 f8c7 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000278 	.word	0x20000278
 80031f4:	40001000 	.word	0x40001000

080031f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <MX_USART2_UART_Init+0x50>)
 8003200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800321e:	220c      	movs	r2, #12
 8003220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <MX_USART2_UART_Init+0x4c>)
 8003230:	f002 f89c 	bl	800536c <HAL_UART_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800323a:	f000 f89b 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200002f8 	.word	0x200002f8
 8003248:	40004400 	.word	0x40004400

0800324c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <MX_GPIO_Init+0xf4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <MX_GPIO_Init+0xf4>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <MX_GPIO_Init+0xf4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <MX_GPIO_Init+0xf4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <MX_GPIO_Init+0xf4>)
 8003288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <MX_GPIO_Init+0xf4>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a27      	ldr	r2, [pc, #156]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a20      	ldr	r2, [pc, #128]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <MX_GPIO_Init+0xf4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2108      	movs	r1, #8
 80032d6:	481b      	ldr	r0, [pc, #108]	; (8003344 <MX_GPIO_Init+0xf8>)
 80032d8:	f000 fdb8 	bl	8003e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	2120      	movs	r1, #32
 80032e0:	4819      	ldr	r0, [pc, #100]	; (8003348 <MX_GPIO_Init+0xfc>)
 80032e2:	f000 fdb3 	bl	8003e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <MX_GPIO_Init+0x100>)
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4619      	mov	r1, r3
 80032fa:	4812      	ldr	r0, [pc, #72]	; (8003344 <MX_GPIO_Init+0xf8>)
 80032fc:	f000 fc14 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_CS_Pin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8003300:	2308      	movs	r3, #8
 8003302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003304:	2301      	movs	r3, #1
 8003306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4619      	mov	r1, r3
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <MX_GPIO_Init+0xf8>)
 8003318:	f000 fc06 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800331c:	2320      	movs	r3, #32
 800331e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	2301      	movs	r3, #1
 8003322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_GPIO_Init+0xfc>)
 8003334:	f000 fbf8 	bl	8003b28 <HAL_GPIO_Init>

}
 8003338:	bf00      	nop
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	40020800 	.word	0x40020800
 8003348:	40020000 	.word	0x40020000
 800334c:	10210000 	.word	0x10210000

08003350 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003358:	1d39      	adds	r1, r7, #4
 800335a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800335e:	2201      	movs	r2, #1
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <__io_putchar+0x20>)
 8003362:	f002 f850 	bl	8005406 <HAL_UART_Transmit>
  return ch;
 8003366:	687b      	ldr	r3, [r7, #4]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200002f8 	.word	0x200002f8

08003374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_MspInit+0x4c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_MspInit+0x4c>)
 8003394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_MspInit+0x4c>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_MspInit+0x4c>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_MspInit+0x4c>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_MspInit+0x4c>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033c2:	2007      	movs	r0, #7
 80033c4:	f000 fb6e 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a30      	ldr	r2, [pc, #192]	; (80034b4 <HAL_SPI_MspInit+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d15a      	bne.n	80034ac <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a2e      	ldr	r2, [pc, #184]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_SPI_MspInit+0xe4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800344a:	2302      	movs	r3, #2
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800345a:	2307      	movs	r3, #7
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4815      	ldr	r0, [pc, #84]	; (80034bc <HAL_SPI_MspInit+0xe8>)
 8003466:	f000 fb5f 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800346a:	2304      	movs	r3, #4
 800346c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800347a:	2305      	movs	r3, #5
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	480d      	ldr	r0, [pc, #52]	; (80034bc <HAL_SPI_MspInit+0xe8>)
 8003486:	f000 fb4f 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800348a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800348e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800349c:	2305      	movs	r3, #5
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <HAL_SPI_MspInit+0xec>)
 80034a8:	f000 fb3e 	bl	8003b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40003800 	.word	0x40003800
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020400 	.word	0x40020400

080034c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_TIM_Base_MspInit+0x48>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d115      	bne.n	8003502 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_TIM_Base_MspInit+0x4c>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <HAL_TIM_Base_MspInit+0x4c>)
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_TIM_Base_MspInit+0x4c>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	2036      	movs	r0, #54	; 0x36
 80034f8:	f000 fadf 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034fc:	2036      	movs	r0, #54	; 0x36
 80034fe:	f000 faf8 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40001000 	.word	0x40001000
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <HAL_UART_MspInit+0x84>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12b      	bne.n	800358e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b18      	ldr	r3, [pc, #96]	; (800359c <HAL_UART_MspInit+0x88>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_UART_MspInit+0x88>)
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_UART_MspInit+0x88>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_UART_MspInit+0x88>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_UART_MspInit+0x88>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_UART_MspInit+0x88>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800356e:	230c      	movs	r3, #12
 8003570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800357e:	2307      	movs	r3, #7
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <HAL_UART_MspInit+0x8c>)
 800358a:	f000 facd 	bl	8003b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800358e:	bf00      	nop
 8003590:	3728      	adds	r7, #40	; 0x28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40004400 	.word	0x40004400
 800359c:	40023800 	.word	0x40023800
 80035a0:	40020000 	.word	0x40020000

080035a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <HardFault_Handler+0x4>

080035b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <MemManage_Handler+0x4>

080035be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <BusFault_Handler+0x4>

080035c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <UsageFault_Handler+0x4>

080035ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f8:	f000 f942 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <TIM6_DAC_IRQHandler+0x10>)
 8003606:	f001 fc50 	bl	8004eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000278 	.word	0x20000278

08003614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e00a      	b.n	800363c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003626:	f3af 8000 	nop.w
 800362a:	4601      	mov	r1, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	b2ca      	uxtb	r2, r1
 8003634:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf0      	blt.n	8003626 <_read+0x12>
	}

return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e009      	b.n	8003674 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe71 	bl	8003350 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf1      	blt.n	8003660 <_write+0x12>
	}
	return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_close>:

int _close(int file)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
	return -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036ae:	605a      	str	r2, [r3, #4]
	return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_isatty>:

int _isatty(int file)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
	return 1;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	return 0;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f003 fa0e 	bl	8006b40 <__errno>
 8003724:	4602      	mov	r2, r0
 8003726:	230c      	movs	r3, #12
 8003728:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <_sbrk+0x64>)
 8003740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20020000 	.word	0x20020000
 8003750:	00000400 	.word	0x00000400
 8003754:	20000090 	.word	0x20000090
 8003758:	20000340 	.word	0x20000340

0800375c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <SystemInit+0x28>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	4a07      	ldr	r2, [pc, #28]	; (8003784 <SystemInit+0x28>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <SystemInit+0x28>)
 8003772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003776:	609a      	str	r2, [r3, #8]
#endif
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800378c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800378e:	e003      	b.n	8003798 <LoopCopyDataInit>

08003790 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003792:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003794:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003796:	3104      	adds	r1, #4

08003798 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003798:	480b      	ldr	r0, [pc, #44]	; (80037c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800379c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800379e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037a0:	d3f6      	bcc.n	8003790 <CopyDataInit>
  ldr  r2, =_sbss
 80037a2:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037a4:	e002      	b.n	80037ac <LoopFillZerobss>

080037a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037a8:	f842 3b04 	str.w	r3, [r2], #4

080037ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037b0:	d3f9      	bcc.n	80037a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037b2:	f7ff ffd3 	bl	800375c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b6:	f003 f9c9 	bl	8006b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ba:	f7ff fb77 	bl	8002eac <main>
  bx  lr    
 80037be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037c4:	08007a5c 	.word	0x08007a5c
  ldr  r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037cc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80037d0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80037d4:	20000340 	.word	0x20000340

080037d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <ADC_IRQHandler>
	...

080037dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_Init+0x40>)
 80037e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_Init+0x40>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_Init+0x40>)
 80037f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_Init+0x40>)
 80037fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 f94d 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2000      	movs	r0, #0
 800380c:	f000 f808 	bl	8003820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7ff fdb8 	bl	8003384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00

08003820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_InitTick+0x54>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_InitTick+0x58>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003836:	fbb3 f3f1 	udiv	r3, r3, r1
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f965 	bl	8003b0e <HAL_SYSTICK_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00e      	b.n	800386c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d80a      	bhi.n	800386a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003854:	2200      	movs	r2, #0
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800385c:	f000 f92d 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003860:	4a06      	ldr	r2, [pc, #24]	; (800387c <HAL_InitTick+0x5c>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000000 	.word	0x20000000
 8003878:	20000008 	.word	0x20000008
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_IncTick+0x20>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_IncTick+0x24>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000008 	.word	0x20000008
 80038a4:	20000338 	.word	0x20000338

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000338 	.word	0x20000338

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_Delay+0x40>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000008 	.word	0x20000008

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800392c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff29 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff3e 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff31 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa2 	bl	8003a60 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e165      	b.n	8003e10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b44:	2201      	movs	r2, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	f040 8154 	bne.w	8003e0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d00b      	beq.n	8003b82 <HAL_GPIO_Init+0x5a>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d007      	beq.n	8003b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b76:	2b11      	cmp	r3, #17
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d130      	bne.n	8003be4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0xfc>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b12      	cmp	r3, #18
 8003c22:	d123      	bne.n	8003c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	08da      	lsrs	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3208      	adds	r2, #8
 8003c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	08da      	lsrs	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3208      	adds	r2, #8
 8003c66:	69b9      	ldr	r1, [r7, #24]
 8003c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0203 	and.w	r2, r3, #3
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ae 	beq.w	8003e0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <HAL_GPIO_Init+0x2fc>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <HAL_GPIO_Init+0x2fc>)
 8003cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_GPIO_Init+0x2fc>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cca:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	; (8003e2c <HAL_GPIO_Init+0x304>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d025      	beq.n	8003d42 <HAL_GPIO_Init+0x21a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <HAL_GPIO_Init+0x308>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x216>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4c      	ldr	r2, [pc, #304]	; (8003e34 <HAL_GPIO_Init+0x30c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x212>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4b      	ldr	r2, [pc, #300]	; (8003e38 <HAL_GPIO_Init+0x310>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x20e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_GPIO_Init+0x314>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x20a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a49      	ldr	r2, [pc, #292]	; (8003e40 <HAL_GPIO_Init+0x318>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x206>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a48      	ldr	r2, [pc, #288]	; (8003e44 <HAL_GPIO_Init+0x31c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x202>
 8003d26:	2306      	movs	r3, #6
 8003d28:	e00c      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e00a      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x21c>
 8003d42:	2300      	movs	r3, #0
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d54:	4934      	ldr	r1, [pc, #208]	; (8003e28 <HAL_GPIO_Init+0x300>)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d86:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db0:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_GPIO_Init+0x320>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	f67f ae96 	bls.w	8003b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3724      	adds	r7, #36	; 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40020400 	.word	0x40020400
 8003e34:	40020800 	.word	0x40020800
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40021400 	.word	0x40021400
 8003e44:	40021800 	.word	0x40021800
 8003e48:	40013c00 	.word	0x40013c00

08003e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e5c:	787b      	ldrb	r3, [r7, #1]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e68:	e003      	b.n	8003e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	041a      	lsls	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	619a      	str	r2, [r3, #24]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cc      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d044      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e067      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4934      	ldr	r1, [pc, #208]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7ff fc9a 	bl	80038a8 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7ff fc96 	bl	80038a8 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d20c      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f855 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 800400a:	4601      	mov	r1, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	fa21 f303 	lsr.w	r3, r1, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fbfa 	bl	8003820 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023c00 	.word	0x40023c00
 800403c:	40023800 	.word	0x40023800
 8004040:	0800799c 	.word	0x0800799c
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_RCC_GetHCLKFreq+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000000 	.word	0x20000000

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff0 	bl	800404c <HAL_RCC_GetHCLKFreq>
 800406c:	4601      	mov	r1, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0a9b      	lsrs	r3, r3, #10
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4a03      	ldr	r2, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	080079ac 	.word	0x080079ac

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffdc 	bl	800404c <HAL_RCC_GetHCLKFreq>
 8004094:	4601      	mov	r1, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0b5b      	lsrs	r3, r3, #13
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4a03      	ldr	r2, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	080079ac 	.word	0x080079ac

080040b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ce:	4bc6      	ldr	r3, [pc, #792]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	f200 817e 	bhi.w	80043d8 <HAL_RCC_GetSysClockFreq+0x324>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004119 	.word	0x08004119
 80040e8:	080043d9 	.word	0x080043d9
 80040ec:	080043d9 	.word	0x080043d9
 80040f0:	080043d9 	.word	0x080043d9
 80040f4:	0800411f 	.word	0x0800411f
 80040f8:	080043d9 	.word	0x080043d9
 80040fc:	080043d9 	.word	0x080043d9
 8004100:	080043d9 	.word	0x080043d9
 8004104:	08004125 	.word	0x08004125
 8004108:	080043d9 	.word	0x080043d9
 800410c:	080043d9 	.word	0x080043d9
 8004110:	080043d9 	.word	0x080043d9
 8004114:	08004281 	.word	0x08004281
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4bb4      	ldr	r3, [pc, #720]	; (80043ec <HAL_RCC_GetSysClockFreq+0x338>)
 800411a:	613b      	str	r3, [r7, #16]
       break;
 800411c:	e15f      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800411e:	4bb4      	ldr	r3, [pc, #720]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004120:	613b      	str	r3, [r7, #16]
      break;
 8004122:	e15c      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004124:	4bb0      	ldr	r3, [pc, #704]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412e:	4bae      	ldr	r3, [pc, #696]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d04a      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4bab      	ldr	r3, [pc, #684]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	f04f 0400 	mov.w	r4, #0
 8004144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	ea03 0501 	and.w	r5, r3, r1
 8004150:	ea04 0602 	and.w	r6, r4, r2
 8004154:	4629      	mov	r1, r5
 8004156:	4632      	mov	r2, r6
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	0154      	lsls	r4, r2, #5
 8004162:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004166:	014b      	lsls	r3, r1, #5
 8004168:	4619      	mov	r1, r3
 800416a:	4622      	mov	r2, r4
 800416c:	1b49      	subs	r1, r1, r5
 800416e:	eb62 0206 	sbc.w	r2, r2, r6
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	0194      	lsls	r4, r2, #6
 800417c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004180:	018b      	lsls	r3, r1, #6
 8004182:	1a5b      	subs	r3, r3, r1
 8004184:	eb64 0402 	sbc.w	r4, r4, r2
 8004188:	f04f 0100 	mov.w	r1, #0
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	00e2      	lsls	r2, r4, #3
 8004192:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004196:	00d9      	lsls	r1, r3, #3
 8004198:	460b      	mov	r3, r1
 800419a:	4614      	mov	r4, r2
 800419c:	195b      	adds	r3, r3, r5
 800419e:	eb44 0406 	adc.w	r4, r4, r6
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	0262      	lsls	r2, r4, #9
 80041ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041b0:	0259      	lsls	r1, r3, #9
 80041b2:	460b      	mov	r3, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	4621      	mov	r1, r4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f04f 0400 	mov.w	r4, #0
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	f7fc fc92 	bl	8000aec <__aeabi_uldivmod>
 80041c8:	4603      	mov	r3, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	e049      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	099b      	lsrs	r3, r3, #6
 80041d6:	f04f 0400 	mov.w	r4, #0
 80041da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	ea03 0501 	and.w	r5, r3, r1
 80041e6:	ea04 0602 	and.w	r6, r4, r2
 80041ea:	4629      	mov	r1, r5
 80041ec:	4632      	mov	r2, r6
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	0154      	lsls	r4, r2, #5
 80041f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041fc:	014b      	lsls	r3, r1, #5
 80041fe:	4619      	mov	r1, r3
 8004200:	4622      	mov	r2, r4
 8004202:	1b49      	subs	r1, r1, r5
 8004204:	eb62 0206 	sbc.w	r2, r2, r6
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	0194      	lsls	r4, r2, #6
 8004212:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	1a5b      	subs	r3, r3, r1
 800421a:	eb64 0402 	sbc.w	r4, r4, r2
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	00e2      	lsls	r2, r4, #3
 8004228:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800422c:	00d9      	lsls	r1, r3, #3
 800422e:	460b      	mov	r3, r1
 8004230:	4614      	mov	r4, r2
 8004232:	195b      	adds	r3, r3, r5
 8004234:	eb44 0406 	adc.w	r4, r4, r6
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	02a2      	lsls	r2, r4, #10
 8004242:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004246:	0299      	lsls	r1, r3, #10
 8004248:	460b      	mov	r3, r1
 800424a:	4614      	mov	r4, r2
 800424c:	4618      	mov	r0, r3
 800424e:	4621      	mov	r1, r4
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	461a      	mov	r2, r3
 8004258:	4623      	mov	r3, r4
 800425a:	f7fc fc47 	bl	8000aec <__aeabi_uldivmod>
 800425e:	4603      	mov	r3, r0
 8004260:	460c      	mov	r4, r1
 8004262:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004264:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	3301      	adds	r3, #1
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	613b      	str	r3, [r7, #16]
      break;
 800427e:	e0ae      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428a:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d04a      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b54      	ldr	r3, [pc, #336]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	f04f 0400 	mov.w	r4, #0
 80042a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	ea03 0501 	and.w	r5, r3, r1
 80042ac:	ea04 0602 	and.w	r6, r4, r2
 80042b0:	4629      	mov	r1, r5
 80042b2:	4632      	mov	r2, r6
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f04f 0400 	mov.w	r4, #0
 80042bc:	0154      	lsls	r4, r2, #5
 80042be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042c2:	014b      	lsls	r3, r1, #5
 80042c4:	4619      	mov	r1, r3
 80042c6:	4622      	mov	r2, r4
 80042c8:	1b49      	subs	r1, r1, r5
 80042ca:	eb62 0206 	sbc.w	r2, r2, r6
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	f04f 0400 	mov.w	r4, #0
 80042d6:	0194      	lsls	r4, r2, #6
 80042d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042dc:	018b      	lsls	r3, r1, #6
 80042de:	1a5b      	subs	r3, r3, r1
 80042e0:	eb64 0402 	sbc.w	r4, r4, r2
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	00e2      	lsls	r2, r4, #3
 80042ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042f2:	00d9      	lsls	r1, r3, #3
 80042f4:	460b      	mov	r3, r1
 80042f6:	4614      	mov	r4, r2
 80042f8:	195b      	adds	r3, r3, r5
 80042fa:	eb44 0406 	adc.w	r4, r4, r6
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	0262      	lsls	r2, r4, #9
 8004308:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800430c:	0259      	lsls	r1, r3, #9
 800430e:	460b      	mov	r3, r1
 8004310:	4614      	mov	r4, r2
 8004312:	4618      	mov	r0, r3
 8004314:	4621      	mov	r1, r4
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	f7fc fbe4 	bl	8000aec <__aeabi_uldivmod>
 8004324:	4603      	mov	r3, r0
 8004326:	460c      	mov	r4, r1
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e049      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432c:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	f240 11ff 	movw	r1, #511	; 0x1ff
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	ea03 0501 	and.w	r5, r3, r1
 8004342:	ea04 0602 	and.w	r6, r4, r2
 8004346:	4629      	mov	r1, r5
 8004348:	4632      	mov	r2, r6
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	0154      	lsls	r4, r2, #5
 8004354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004358:	014b      	lsls	r3, r1, #5
 800435a:	4619      	mov	r1, r3
 800435c:	4622      	mov	r2, r4
 800435e:	1b49      	subs	r1, r1, r5
 8004360:	eb62 0206 	sbc.w	r2, r2, r6
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f04f 0400 	mov.w	r4, #0
 800436c:	0194      	lsls	r4, r2, #6
 800436e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	1a5b      	subs	r3, r3, r1
 8004376:	eb64 0402 	sbc.w	r4, r4, r2
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	00e2      	lsls	r2, r4, #3
 8004384:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004388:	00d9      	lsls	r1, r3, #3
 800438a:	460b      	mov	r3, r1
 800438c:	4614      	mov	r4, r2
 800438e:	195b      	adds	r3, r3, r5
 8004390:	eb44 0406 	adc.w	r4, r4, r6
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	02a2      	lsls	r2, r4, #10
 800439e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043a2:	0299      	lsls	r1, r3, #10
 80043a4:	460b      	mov	r3, r1
 80043a6:	4614      	mov	r4, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	4621      	mov	r1, r4
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f04f 0400 	mov.w	r4, #0
 80043b2:	461a      	mov	r2, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	f7fc fb99 	bl	8000aec <__aeabi_uldivmod>
 80043ba:	4603      	mov	r3, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0f1b      	lsrs	r3, r3, #28
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	613b      	str	r3, [r7, #16]
      break;
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCC_GetSysClockFreq+0x338>)
 80043da:	613b      	str	r3, [r7, #16]
      break;
 80043dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043de:	693b      	ldr	r3, [r7, #16]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8083 	beq.w	8004514 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800440e:	4b95      	ldr	r3, [pc, #596]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d019      	beq.n	800444e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800441a:	4b92      	ldr	r3, [pc, #584]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004422:	2b08      	cmp	r3, #8
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004426:	4b8f      	ldr	r3, [pc, #572]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004434:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004440:	4b88      	ldr	r3, [pc, #544]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b85      	ldr	r3, [pc, #532]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d05b      	beq.n	8004512 <HAL_RCC_OscConfig+0x11e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d157      	bne.n	8004512 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e216      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x8a>
 8004470:	4b7c      	ldr	r3, [pc, #496]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7b      	ldr	r2, [pc, #492]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e01d      	b.n	80044ba <HAL_RCC_OscConfig+0xc6>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0xae>
 8004488:	4b76      	ldr	r3, [pc, #472]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a75      	ldr	r2, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800448e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a72      	ldr	r2, [pc, #456]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0xc6>
 80044a2:	4b70      	ldr	r3, [pc, #448]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6f      	ldr	r2, [pc, #444]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6c      	ldr	r2, [pc, #432]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80044b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d013      	beq.n	80044ea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7ff f9f1 	bl	80038a8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ca:	f7ff f9ed 	bl	80038a8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1db      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044dc:	4b61      	ldr	r3, [pc, #388]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0xd6>
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ea:	f7ff f9dd 	bl	80038a8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f2:	f7ff f9d9 	bl	80038a8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1c7      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004504:	4b57      	ldr	r3, [pc, #348]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0xfe>
 8004510:	e000      	b.n	8004514 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d06f      	beq.n	8004600 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004520:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800452c:	4b4d      	ldr	r3, [pc, #308]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004534:	2b08      	cmp	r3, #8
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004538:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004544:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800454c:	2b0c      	cmp	r3, #12
 800454e:	d11c      	bne.n	800458a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004550:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455c:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_OscConfig+0x180>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e18f      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4938      	ldr	r1, [pc, #224]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004588:	e03a      	b.n	8004600 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_RCC_OscConfig+0x274>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7ff f986 	bl	80038a8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a0:	f7ff f982 	bl	80038a8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e170      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4925      	ldr	r1, [pc, #148]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
 80045d2:	e015      	b.n	8004600 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_OscConfig+0x274>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045da:	f7ff f965 	bl	80038a8 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e2:	f7ff f961 	bl	80038a8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e14f      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d037      	beq.n	800467c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004614:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_RCC_OscConfig+0x278>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7ff f945 	bl	80038a8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7ff f941 	bl	80038a8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e12f      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_OscConfig+0x270>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x22e>
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <HAL_RCC_OscConfig+0x278>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7ff f92e 	bl	80038a8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464e:	e00f      	b.n	8004670 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7ff f92a 	bl	80038a8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d908      	bls.n	8004670 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e118      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	42470000 	.word	0x42470000
 800466c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	4b8a      	ldr	r3, [pc, #552]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e9      	bne.n	8004650 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8097 	beq.w	80047b8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468e:	4b83      	ldr	r3, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b7f      	ldr	r3, [pc, #508]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a7e      	ldr	r2, [pc, #504]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b7c      	ldr	r3, [pc, #496]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x4ac>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7ff f8e9 	bl	80038a8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7ff f8e5 	bl	80038a8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0d3      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x31a>
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e01c      	b.n	8004748 <HAL_RCC_OscConfig+0x354>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b05      	cmp	r3, #5
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x33c>
 8004716:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a60      	ldr	r2, [pc, #384]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b5e      	ldr	r3, [pc, #376]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a5d      	ldr	r2, [pc, #372]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0x354>
 8004730:	4b5a      	ldr	r3, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a59      	ldr	r2, [pc, #356]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	4b57      	ldr	r3, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a56      	ldr	r2, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004742:	f023 0304 	bic.w	r3, r3, #4
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7ff f8aa 	bl	80038a8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7ff f8a6 	bl	80038a8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e092      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	4b4b      	ldr	r3, [pc, #300]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ee      	beq.n	8004758 <HAL_RCC_OscConfig+0x364>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7ff f894 	bl	80038a8 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7ff f890 	bl	80038a8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e07c      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479a:	4b40      	ldr	r3, [pc, #256]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ee      	bne.n	8004784 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d105      	bne.n	80047b8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ac:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	4a3a      	ldr	r2, [pc, #232]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80047b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d068      	beq.n	8004892 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047c0:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d060      	beq.n	800488e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d145      	bne.n	8004860 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_RCC_OscConfig+0x4b0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7ff f865 	bl	80038a8 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7ff f861 	bl	80038a8 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e04f      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f4:	4b29      	ldr	r3, [pc, #164]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	019b      	lsls	r3, r3, #6
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	071b      	lsls	r3, r3, #28
 800482c:	491b      	ldr	r1, [pc, #108]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_RCC_OscConfig+0x4b0>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7ff f836 	bl	80038a8 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004840:	f7ff f832 	bl	80038a8 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e020      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x44c>
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCC_OscConfig+0x4b0>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7ff f81f 	bl	80038a8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486e:	f7ff f81b 	bl	80038a8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e009      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_OscConfig+0x4a8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCC_OscConfig+0x47a>
 800488c:	e001      	b.n	8004892 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42470060 	.word	0x42470060

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e056      	b.n	8004968 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fd7d 	bl	80033d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	ea42 0103 	orr.w	r1, r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 0104 	and.w	r1, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004956:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	; 0x30
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800497e:	2301      	movs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x26>
 8004992:	2302      	movs	r3, #2
 8004994:	e18a      	b.n	8004cac <HAL_SPI_TransmitReceive+0x33c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800499e:	f7fe ff83 	bl	80038a8 <HAL_GetTick>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d00f      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0x70>
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c6:	d107      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x68>
 80049d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d003      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049de:	e15b      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x82>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x82>
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f8:	e14e      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d003      	beq.n	8004a0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2205      	movs	r2, #5
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	887a      	ldrh	r2, [r7, #2]
 8004a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d007      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6a:	d178      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x10a>
 8004a74:	8b7b      	ldrh	r3, [r7, #26]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d166      	bne.n	8004b48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	1c9a      	adds	r2, r3, #2
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9e:	e053      	b.n	8004b48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d11b      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x176>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x176>
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d113      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d119      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x1b8>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d014      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b24:	2301      	movs	r3, #1
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b28:	f7fe febe 	bl	80038a8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d807      	bhi.n	8004b48 <HAL_SPI_TransmitReceive+0x1d8>
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d003      	beq.n	8004b48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b46:	e0a7      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1a6      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x130>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1a1      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x130>
 8004b5c:	e07c      	b.n	8004c58 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x1fc>
 8004b66:	8b7b      	ldrh	r3, [r7, #26]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d16b      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	e057      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11c      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x26c>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d017      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x26c>
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d114      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d119      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x2ae>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d014      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c1e:	f7fe fe43 	bl	80038a8 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d803      	bhi.n	8004c36 <HAL_SPI_TransmitReceive+0x2c6>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x2cc>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c42:	e029      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1a2      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x224>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d19d      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f893 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c74:	e010      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	e000      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3730      	adds	r7, #48	; 0x30
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cc4:	e04c      	b.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ccc:	d048      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cce:	f7fe fdeb 	bl	80038a8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d902      	bls.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d13d      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfc:	d111      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d06:	d004      	beq.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d10:	d107      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2a:	d10f      	bne.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e00f      	b.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d1a3      	bne.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <SPI_EndRxTxTransaction+0x7c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <SPI_EndRxTxTransaction+0x80>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0d5b      	lsrs	r3, r3, #21
 8004da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db2:	d112      	bne.n	8004dda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff ff78 	bl	8004cb4 <SPI_WaitFlagStateUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d016      	beq.n	8004df8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00f      	b.n	8004dfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b80      	cmp	r3, #128	; 0x80
 8004df2:	d0f2      	beq.n	8004dda <SPI_EndRxTxTransaction+0x52>
 8004df4:	e000      	b.n	8004df8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004df6:	bf00      	nop
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000000 	.word	0x20000000
 8004e08:	165e9f81 	.word	0x165e9f81

08004e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e01d      	b.n	8004e5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fe fb46 	bl	80034c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f000 f95e 	bl	800510c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d122      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d11b      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0202 	mvn.w	r2, #2
 8004ed6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8ee 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8e0 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8f1 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d122      	bne.n	8004f5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d11b      	bne.n	8004f5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0204 	mvn.w	r2, #4
 8004f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8c4 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004f46:	e005      	b.n	8004f54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8b6 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8c7 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d122      	bne.n	8004fae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11b      	bne.n	8004fae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0208 	mvn.w	r2, #8
 8004f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f89a 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004f9a:	e005      	b.n	8004fa8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f88c 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f89d 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d122      	bne.n	8005002 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d11b      	bne.n	8005002 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f06f 0210 	mvn.w	r2, #16
 8004fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f870 	bl	80050ce <HAL_TIM_IC_CaptureCallback>
 8004fee:	e005      	b.n	8004ffc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f862 	bl	80050ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f873 	bl	80050e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10e      	bne.n	800502e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0201 	mvn.w	r2, #1
 8005026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fd ff27 	bl	8002e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d10e      	bne.n	800505a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d107      	bne.n	800505a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f97f 	bl	8005358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d10e      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d107      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f838 	bl	80050f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d10e      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0220 	mvn.w	r2, #32
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f949 	bl	8005344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a40      	ldr	r2, [pc, #256]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3c      	ldr	r2, [pc, #240]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3a      	ldr	r2, [pc, #232]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <TIM_Base_SetConfig+0x114>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d027      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <TIM_Base_SetConfig+0x118>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d023      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <TIM_Base_SetConfig+0x11c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2a      	ldr	r2, [pc, #168]	; (800522c <TIM_Base_SetConfig+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a29      	ldr	r2, [pc, #164]	; (8005230 <TIM_Base_SetConfig+0x124>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a28      	ldr	r2, [pc, #160]	; (8005234 <TIM_Base_SetConfig+0x128>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_Base_SetConfig+0x12c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_Base_SetConfig+0x130>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <TIM_Base_SetConfig+0x134>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <TIM_Base_SetConfig+0x138>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a23      	ldr	r2, [pc, #140]	; (8005248 <TIM_Base_SetConfig+0x13c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <TIM_Base_SetConfig+0x114>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <TIM_Base_SetConfig+0x124>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	615a      	str	r2, [r3, #20]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40010400 	.word	0x40010400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800
 8005240:	40001800 	.word	0x40001800
 8005244:	40001c00 	.word	0x40001c00
 8005248:	40002000 	.word	0x40002000

0800524c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005260:	2302      	movs	r3, #2
 8005262:	e05a      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d022      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d01d      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d018      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40010400 	.word	0x40010400
 800533c:	40014000 	.word	0x40014000
 8005340:	40001800 	.word	0x40001800

08005344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e03f      	b.n	80053fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fe f8be 	bl	8003514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f90b 	bl	80055cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	af02      	add	r7, sp, #8
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b20      	cmp	r3, #32
 8005424:	f040 8083 	bne.w	800552e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Transmit+0x2e>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e07b      	b.n	8005530 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_UART_Transmit+0x40>
 8005442:	2302      	movs	r3, #2
 8005444:	e074      	b.n	8005530 <HAL_UART_Transmit+0x12a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2221      	movs	r2, #33	; 0x21
 8005458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800545c:	f7fe fa24 	bl	80038a8 <HAL_GetTick>
 8005460:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005476:	e042      	b.n	80054fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d122      	bne.n	80054d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2200      	movs	r2, #0
 8005498:	2180      	movs	r1, #128	; 0x80
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f84c 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e042      	b.n	8005530 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3302      	adds	r3, #2
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	e017      	b.n	80054fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	e013      	b.n	80054fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2180      	movs	r1, #128	; 0x80
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f829 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e01f      	b.n	8005530 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	60ba      	str	r2, [r7, #8]
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1b7      	bne.n	8005478 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2200      	movs	r2, #0
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f810 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e006      	b.n	8005530 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	e000      	b.n	8005530 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
  }
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005548:	e02c      	b.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005550:	d028      	beq.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x30>
 8005558:	f7fe f9a6 	bl	80038a8 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	429a      	cmp	r2, r3
 8005566:	d21d      	bcs.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005576:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e00f      	b.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d0c3      	beq.n	800554a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800560e:	f023 030c 	bic.w	r3, r3, #12
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	430b      	orrs	r3, r1
 800561a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563a:	f040 818b 	bne.w	8005954 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4ac1      	ldr	r2, [pc, #772]	; (8005948 <UART_SetConfig+0x37c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d005      	beq.n	8005654 <UART_SetConfig+0x88>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4abf      	ldr	r2, [pc, #764]	; (800594c <UART_SetConfig+0x380>)
 800564e:	4293      	cmp	r3, r2
 8005650:	f040 80bd 	bne.w	80057ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fe fd1a 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8005658:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	461d      	mov	r5, r3
 800565e:	f04f 0600 	mov.w	r6, #0
 8005662:	46a8      	mov	r8, r5
 8005664:	46b1      	mov	r9, r6
 8005666:	eb18 0308 	adds.w	r3, r8, r8
 800566a:	eb49 0409 	adc.w	r4, r9, r9
 800566e:	4698      	mov	r8, r3
 8005670:	46a1      	mov	r9, r4
 8005672:	eb18 0805 	adds.w	r8, r8, r5
 8005676:	eb49 0906 	adc.w	r9, r9, r6
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005686:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800568a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800568e:	4688      	mov	r8, r1
 8005690:	4691      	mov	r9, r2
 8005692:	eb18 0005 	adds.w	r0, r8, r5
 8005696:	eb49 0106 	adc.w	r1, r9, r6
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	461d      	mov	r5, r3
 80056a0:	f04f 0600 	mov.w	r6, #0
 80056a4:	196b      	adds	r3, r5, r5
 80056a6:	eb46 0406 	adc.w	r4, r6, r6
 80056aa:	461a      	mov	r2, r3
 80056ac:	4623      	mov	r3, r4
 80056ae:	f7fb fa1d 	bl	8000aec <__aeabi_uldivmod>
 80056b2:	4603      	mov	r3, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	461a      	mov	r2, r3
 80056b8:	4ba5      	ldr	r3, [pc, #660]	; (8005950 <UART_SetConfig+0x384>)
 80056ba:	fba3 2302 	umull	r2, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	461d      	mov	r5, r3
 80056c8:	f04f 0600 	mov.w	r6, #0
 80056cc:	46a9      	mov	r9, r5
 80056ce:	46b2      	mov	sl, r6
 80056d0:	eb19 0309 	adds.w	r3, r9, r9
 80056d4:	eb4a 040a 	adc.w	r4, sl, sl
 80056d8:	4699      	mov	r9, r3
 80056da:	46a2      	mov	sl, r4
 80056dc:	eb19 0905 	adds.w	r9, r9, r5
 80056e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f8:	4689      	mov	r9, r1
 80056fa:	4692      	mov	sl, r2
 80056fc:	eb19 0005 	adds.w	r0, r9, r5
 8005700:	eb4a 0106 	adc.w	r1, sl, r6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	461d      	mov	r5, r3
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	196b      	adds	r3, r5, r5
 8005710:	eb46 0406 	adc.w	r4, r6, r6
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fb f9e8 	bl	8000aec <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	461a      	mov	r2, r3
 8005722:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <UART_SetConfig+0x384>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a86      	ldr	r2, [pc, #536]	; (8005950 <UART_SetConfig+0x384>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005744:	4498      	add	r8, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	461d      	mov	r5, r3
 800574a:	f04f 0600 	mov.w	r6, #0
 800574e:	46a9      	mov	r9, r5
 8005750:	46b2      	mov	sl, r6
 8005752:	eb19 0309 	adds.w	r3, r9, r9
 8005756:	eb4a 040a 	adc.w	r4, sl, sl
 800575a:	4699      	mov	r9, r3
 800575c:	46a2      	mov	sl, r4
 800575e:	eb19 0905 	adds.w	r9, r9, r5
 8005762:	eb4a 0a06 	adc.w	sl, sl, r6
 8005766:	f04f 0100 	mov.w	r1, #0
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800577a:	4689      	mov	r9, r1
 800577c:	4692      	mov	sl, r2
 800577e:	eb19 0005 	adds.w	r0, r9, r5
 8005782:	eb4a 0106 	adc.w	r1, sl, r6
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	461d      	mov	r5, r3
 800578c:	f04f 0600 	mov.w	r6, #0
 8005790:	196b      	adds	r3, r5, r5
 8005792:	eb46 0406 	adc.w	r4, r6, r6
 8005796:	461a      	mov	r2, r3
 8005798:	4623      	mov	r3, r4
 800579a:	f7fb f9a7 	bl	8000aec <__aeabi_uldivmod>
 800579e:	4603      	mov	r3, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	461a      	mov	r2, r3
 80057a4:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <UART_SetConfig+0x384>)
 80057a6:	fba3 1302 	umull	r1, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2164      	movs	r1, #100	; 0x64
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	3332      	adds	r3, #50	; 0x32
 80057b8:	4a65      	ldr	r2, [pc, #404]	; (8005950 <UART_SetConfig+0x384>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	f003 0207 	and.w	r2, r3, #7
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4442      	add	r2, r8
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	e26f      	b.n	8005cae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ce:	f7fe fc49 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 80057d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	461d      	mov	r5, r3
 80057d8:	f04f 0600 	mov.w	r6, #0
 80057dc:	46a8      	mov	r8, r5
 80057de:	46b1      	mov	r9, r6
 80057e0:	eb18 0308 	adds.w	r3, r8, r8
 80057e4:	eb49 0409 	adc.w	r4, r9, r9
 80057e8:	4698      	mov	r8, r3
 80057ea:	46a1      	mov	r9, r4
 80057ec:	eb18 0805 	adds.w	r8, r8, r5
 80057f0:	eb49 0906 	adc.w	r9, r9, r6
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005800:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005804:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005808:	4688      	mov	r8, r1
 800580a:	4691      	mov	r9, r2
 800580c:	eb18 0005 	adds.w	r0, r8, r5
 8005810:	eb49 0106 	adc.w	r1, r9, r6
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	461d      	mov	r5, r3
 800581a:	f04f 0600 	mov.w	r6, #0
 800581e:	196b      	adds	r3, r5, r5
 8005820:	eb46 0406 	adc.w	r4, r6, r6
 8005824:	461a      	mov	r2, r3
 8005826:	4623      	mov	r3, r4
 8005828:	f7fb f960 	bl	8000aec <__aeabi_uldivmod>
 800582c:	4603      	mov	r3, r0
 800582e:	460c      	mov	r4, r1
 8005830:	461a      	mov	r2, r3
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <UART_SetConfig+0x384>)
 8005834:	fba3 2302 	umull	r2, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	461d      	mov	r5, r3
 8005842:	f04f 0600 	mov.w	r6, #0
 8005846:	46a9      	mov	r9, r5
 8005848:	46b2      	mov	sl, r6
 800584a:	eb19 0309 	adds.w	r3, r9, r9
 800584e:	eb4a 040a 	adc.w	r4, sl, sl
 8005852:	4699      	mov	r9, r3
 8005854:	46a2      	mov	sl, r4
 8005856:	eb19 0905 	adds.w	r9, r9, r5
 800585a:	eb4a 0a06 	adc.w	sl, sl, r6
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800586e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005872:	4689      	mov	r9, r1
 8005874:	4692      	mov	sl, r2
 8005876:	eb19 0005 	adds.w	r0, r9, r5
 800587a:	eb4a 0106 	adc.w	r1, sl, r6
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	461d      	mov	r5, r3
 8005884:	f04f 0600 	mov.w	r6, #0
 8005888:	196b      	adds	r3, r5, r5
 800588a:	eb46 0406 	adc.w	r4, r6, r6
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	f7fb f92b 	bl	8000aec <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	461a      	mov	r2, r3
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <UART_SetConfig+0x384>)
 800589e:	fba3 1302 	umull	r1, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	3332      	adds	r3, #50	; 0x32
 80058b0:	4a27      	ldr	r2, [pc, #156]	; (8005950 <UART_SetConfig+0x384>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058be:	4498      	add	r8, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	461d      	mov	r5, r3
 80058c4:	f04f 0600 	mov.w	r6, #0
 80058c8:	46a9      	mov	r9, r5
 80058ca:	46b2      	mov	sl, r6
 80058cc:	eb19 0309 	adds.w	r3, r9, r9
 80058d0:	eb4a 040a 	adc.w	r4, sl, sl
 80058d4:	4699      	mov	r9, r3
 80058d6:	46a2      	mov	sl, r4
 80058d8:	eb19 0905 	adds.w	r9, r9, r5
 80058dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f4:	4689      	mov	r9, r1
 80058f6:	4692      	mov	sl, r2
 80058f8:	eb19 0005 	adds.w	r0, r9, r5
 80058fc:	eb4a 0106 	adc.w	r1, sl, r6
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	461d      	mov	r5, r3
 8005906:	f04f 0600 	mov.w	r6, #0
 800590a:	196b      	adds	r3, r5, r5
 800590c:	eb46 0406 	adc.w	r4, r6, r6
 8005910:	461a      	mov	r2, r3
 8005912:	4623      	mov	r3, r4
 8005914:	f7fb f8ea 	bl	8000aec <__aeabi_uldivmod>
 8005918:	4603      	mov	r3, r0
 800591a:	460c      	mov	r4, r1
 800591c:	461a      	mov	r2, r3
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <UART_SetConfig+0x384>)
 8005920:	fba3 1302 	umull	r1, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	2164      	movs	r1, #100	; 0x64
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	3332      	adds	r3, #50	; 0x32
 8005932:	4a07      	ldr	r2, [pc, #28]	; (8005950 <UART_SetConfig+0x384>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	f003 0207 	and.w	r2, r3, #7
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4442      	add	r2, r8
 8005944:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005946:	e1b2      	b.n	8005cae <UART_SetConfig+0x6e2>
 8005948:	40011000 	.word	0x40011000
 800594c:	40011400 	.word	0x40011400
 8005950:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4ad7      	ldr	r2, [pc, #860]	; (8005cb8 <UART_SetConfig+0x6ec>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d005      	beq.n	800596a <UART_SetConfig+0x39e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4ad6      	ldr	r2, [pc, #856]	; (8005cbc <UART_SetConfig+0x6f0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	f040 80d1 	bne.w	8005b0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800596a:	f7fe fb8f 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 800596e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	469a      	mov	sl, r3
 8005974:	f04f 0b00 	mov.w	fp, #0
 8005978:	46d0      	mov	r8, sl
 800597a:	46d9      	mov	r9, fp
 800597c:	eb18 0308 	adds.w	r3, r8, r8
 8005980:	eb49 0409 	adc.w	r4, r9, r9
 8005984:	4698      	mov	r8, r3
 8005986:	46a1      	mov	r9, r4
 8005988:	eb18 080a 	adds.w	r8, r8, sl
 800598c:	eb49 090b 	adc.w	r9, r9, fp
 8005990:	f04f 0100 	mov.w	r1, #0
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800599c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059a4:	4688      	mov	r8, r1
 80059a6:	4691      	mov	r9, r2
 80059a8:	eb1a 0508 	adds.w	r5, sl, r8
 80059ac:	eb4b 0609 	adc.w	r6, fp, r9
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4619      	mov	r1, r3
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	f04f 0400 	mov.w	r4, #0
 80059c2:	0094      	lsls	r4, r2, #2
 80059c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059c8:	008b      	lsls	r3, r1, #2
 80059ca:	461a      	mov	r2, r3
 80059cc:	4623      	mov	r3, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	4631      	mov	r1, r6
 80059d2:	f7fb f88b 	bl	8000aec <__aeabi_uldivmod>
 80059d6:	4603      	mov	r3, r0
 80059d8:	460c      	mov	r4, r1
 80059da:	461a      	mov	r2, r3
 80059dc:	4bb8      	ldr	r3, [pc, #736]	; (8005cc0 <UART_SetConfig+0x6f4>)
 80059de:	fba3 2302 	umull	r2, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	469b      	mov	fp, r3
 80059ec:	f04f 0c00 	mov.w	ip, #0
 80059f0:	46d9      	mov	r9, fp
 80059f2:	46e2      	mov	sl, ip
 80059f4:	eb19 0309 	adds.w	r3, r9, r9
 80059f8:	eb4a 040a 	adc.w	r4, sl, sl
 80059fc:	4699      	mov	r9, r3
 80059fe:	46a2      	mov	sl, r4
 8005a00:	eb19 090b 	adds.w	r9, r9, fp
 8005a04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a1c:	4689      	mov	r9, r1
 8005a1e:	4692      	mov	sl, r2
 8005a20:	eb1b 0509 	adds.w	r5, fp, r9
 8005a24:	eb4c 060a 	adc.w	r6, ip, sl
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	f04f 0400 	mov.w	r4, #0
 8005a3a:	0094      	lsls	r4, r2, #2
 8005a3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a40:	008b      	lsls	r3, r1, #2
 8005a42:	461a      	mov	r2, r3
 8005a44:	4623      	mov	r3, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	4631      	mov	r1, r6
 8005a4a:	f7fb f84f 	bl	8000aec <__aeabi_uldivmod>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	460c      	mov	r4, r1
 8005a52:	461a      	mov	r2, r3
 8005a54:	4b9a      	ldr	r3, [pc, #616]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005a56:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	2164      	movs	r1, #100	; 0x64
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	3332      	adds	r3, #50	; 0x32
 8005a68:	4a95      	ldr	r2, [pc, #596]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a74:	4498      	add	r8, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	469b      	mov	fp, r3
 8005a7a:	f04f 0c00 	mov.w	ip, #0
 8005a7e:	46d9      	mov	r9, fp
 8005a80:	46e2      	mov	sl, ip
 8005a82:	eb19 0309 	adds.w	r3, r9, r9
 8005a86:	eb4a 040a 	adc.w	r4, sl, sl
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	46a2      	mov	sl, r4
 8005a8e:	eb19 090b 	adds.w	r9, r9, fp
 8005a92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aaa:	4689      	mov	r9, r1
 8005aac:	4692      	mov	sl, r2
 8005aae:	eb1b 0509 	adds.w	r5, fp, r9
 8005ab2:	eb4c 060a 	adc.w	r6, ip, sl
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	0094      	lsls	r4, r2, #2
 8005aca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	f7fb f808 	bl	8000aec <__aeabi_uldivmod>
 8005adc:	4603      	mov	r3, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b77      	ldr	r3, [pc, #476]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	; 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3332      	adds	r3, #50	; 0x32
 8005af6:	4a72      	ldr	r2, [pc, #456]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4442      	add	r2, r8
 8005b08:	609a      	str	r2, [r3, #8]
 8005b0a:	e0d0      	b.n	8005cae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fe faaa 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8005b10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	469a      	mov	sl, r3
 8005b16:	f04f 0b00 	mov.w	fp, #0
 8005b1a:	46d0      	mov	r8, sl
 8005b1c:	46d9      	mov	r9, fp
 8005b1e:	eb18 0308 	adds.w	r3, r8, r8
 8005b22:	eb49 0409 	adc.w	r4, r9, r9
 8005b26:	4698      	mov	r8, r3
 8005b28:	46a1      	mov	r9, r4
 8005b2a:	eb18 080a 	adds.w	r8, r8, sl
 8005b2e:	eb49 090b 	adc.w	r9, r9, fp
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b46:	4688      	mov	r8, r1
 8005b48:	4691      	mov	r9, r2
 8005b4a:	eb1a 0508 	adds.w	r5, sl, r8
 8005b4e:	eb4b 0609 	adc.w	r6, fp, r9
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	f04f 0400 	mov.w	r4, #0
 8005b64:	0094      	lsls	r4, r2, #2
 8005b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b6a:	008b      	lsls	r3, r1, #2
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	4631      	mov	r1, r6
 8005b74:	f7fa ffba 	bl	8000aec <__aeabi_uldivmod>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	4b50      	ldr	r3, [pc, #320]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005b80:	fba3 2302 	umull	r2, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	469b      	mov	fp, r3
 8005b8e:	f04f 0c00 	mov.w	ip, #0
 8005b92:	46d9      	mov	r9, fp
 8005b94:	46e2      	mov	sl, ip
 8005b96:	eb19 0309 	adds.w	r3, r9, r9
 8005b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b9e:	4699      	mov	r9, r3
 8005ba0:	46a2      	mov	sl, r4
 8005ba2:	eb19 090b 	adds.w	r9, r9, fp
 8005ba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	eb1b 0509 	adds.w	r5, fp, r9
 8005bc6:	eb4c 060a 	adc.w	r6, ip, sl
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	f04f 0400 	mov.w	r4, #0
 8005bdc:	0094      	lsls	r4, r2, #2
 8005bde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005be2:	008b      	lsls	r3, r1, #2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	4631      	mov	r1, r6
 8005bec:	f7fa ff7e 	bl	8000aec <__aeabi_uldivmod>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2164      	movs	r1, #100	; 0x64
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	3332      	adds	r3, #50	; 0x32
 8005c0a:	4a2d      	ldr	r2, [pc, #180]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c16:	4498      	add	r8, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	469b      	mov	fp, r3
 8005c1c:	f04f 0c00 	mov.w	ip, #0
 8005c20:	46d9      	mov	r9, fp
 8005c22:	46e2      	mov	sl, ip
 8005c24:	eb19 0309 	adds.w	r3, r9, r9
 8005c28:	eb4a 040a 	adc.w	r4, sl, sl
 8005c2c:	4699      	mov	r9, r3
 8005c2e:	46a2      	mov	sl, r4
 8005c30:	eb19 090b 	adds.w	r9, r9, fp
 8005c34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c4c:	4689      	mov	r9, r1
 8005c4e:	4692      	mov	sl, r2
 8005c50:	eb1b 0509 	adds.w	r5, fp, r9
 8005c54:	eb4c 060a 	adc.w	r6, ip, sl
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	f04f 0400 	mov.w	r4, #0
 8005c6a:	0094      	lsls	r4, r2, #2
 8005c6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c70:	008b      	lsls	r3, r1, #2
 8005c72:	461a      	mov	r2, r3
 8005c74:	4623      	mov	r3, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	4631      	mov	r1, r6
 8005c7a:	f7fa ff37 	bl	8000aec <__aeabi_uldivmod>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	460c      	mov	r4, r1
 8005c82:	461a      	mov	r2, r3
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005c86:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2164      	movs	r1, #100	; 0x64
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	; 0x32
 8005c98:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <UART_SetConfig+0x6f4>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4442      	add	r2, r8
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	e7ff      	b.n	8005cae <UART_SetConfig+0x6e2>
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb8:	40011000 	.word	0x40011000
 8005cbc:	40011400 	.word	0x40011400
 8005cc0:	51eb851f 	.word	0x51eb851f

08005cc4 <arm_mat_trans_f32>:
 8005cc4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	8802      	ldrh	r2, [r0, #0]
 8005ccc:	884b      	ldrh	r3, [r1, #2]
 8005cce:	9201      	str	r2, [sp, #4]
 8005cd0:	684a      	ldr	r2, [r1, #4]
 8005cd2:	6847      	ldr	r7, [r0, #4]
 8005cd4:	9202      	str	r2, [sp, #8]
 8005cd6:	8842      	ldrh	r2, [r0, #2]
 8005cd8:	9801      	ldr	r0, [sp, #4]
 8005cda:	4283      	cmp	r3, r0
 8005cdc:	f040 80c6 	bne.w	8005e6c <arm_mat_trans_f32+0x1a8>
 8005ce0:	f8b1 9000 	ldrh.w	r9, [r1]
 8005ce4:	4591      	cmp	r9, r2
 8005ce6:	f040 80c1 	bne.w	8005e6c <arm_mat_trans_f32+0x1a8>
 8005cea:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 8005cee:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 8005cf2:	f009 0903 	and.w	r9, r9, #3
 8005cf6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8005cfa:	b28b      	uxth	r3, r1
 8005cfc:	0086      	lsls	r6, r0, #2
 8005cfe:	00c4      	lsls	r4, r0, #3
 8005d00:	b291      	uxth	r1, r2
 8005d02:	3301      	adds	r3, #1
 8005d04:	eb04 0046 	add.w	r0, r4, r6, lsl #1
 8005d08:	1c4a      	adds	r2, r1, #1
 8005d0a:	0119      	lsls	r1, r3, #4
 8005d0c:	fb00 f303 	mul.w	r3, r0, r3
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	0093      	lsls	r3, r2, #2
 8005d14:	9104      	str	r1, [sp, #16]
 8005d16:	9303      	str	r3, [sp, #12]
 8005d18:	f04f 0800 	mov.w	r8, #0
 8005d1c:	f8cd 9000 	str.w	r9, [sp]
 8005d20:	9a02      	ldr	r2, [sp, #8]
 8005d22:	eb02 0c88 	add.w	ip, r2, r8, lsl #2
 8005d26:	f1ba 0f00 	cmp.w	sl, #0
 8005d2a:	d06a      	beq.n	8005e02 <arm_mat_trans_f32+0x13e>
 8005d2c:	683d      	ldr	r5, [r7, #0]
 8005d2e:	f8cc 5000 	str.w	r5, [ip]
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	eb0c 0906 	add.w	r9, ip, r6
 8005d38:	eb0c 0304 	add.w	r3, ip, r4
 8005d3c:	f8c9 1000 	str.w	r1, [r9]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
 8005d48:	eb09 0204 	add.w	r2, r9, r4
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	fa1f f58b 	uxth.w	r5, fp
 8005d52:	6011      	str	r1, [r2, #0]
 8005d54:	f00b 0b01 	and.w	fp, fp, #1
 8005d58:	f107 0310 	add.w	r3, r7, #16
 8005d5c:	eb0c 0200 	add.w	r2, ip, r0
 8005d60:	4481      	add	r9, r0
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	d049      	beq.n	8005dfa <arm_mat_trans_f32+0x136>
 8005d66:	f1bb 0f00 	cmp.w	fp, #0
 8005d6a:	d018      	beq.n	8005d9e <arm_mat_trans_f32+0xda>
 8005d6c:	f8d3 b000 	ldr.w	fp, [r3]
 8005d70:	f8c2 b000 	str.w	fp, [r2]
 8005d74:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8005d78:	f8c9 b000 	str.w	fp, [r9]
 8005d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d80:	1911      	adds	r1, r2, r4
 8005d82:	edc1 7a00 	vstr	s15, [r1]
 8005d86:	3d01      	subs	r5, #1
 8005d88:	ed93 0a03 	vldr	s0, [r3, #12]
 8005d8c:	eb09 0104 	add.w	r1, r9, r4
 8005d90:	b2ad      	uxth	r5, r5
 8005d92:	ed81 0a00 	vstr	s0, [r1]
 8005d96:	3310      	adds	r3, #16
 8005d98:	1882      	adds	r2, r0, r2
 8005d9a:	4481      	add	r9, r0
 8005d9c:	b36d      	cbz	r5, 8005dfa <arm_mat_trans_f32+0x136>
 8005d9e:	f8d3 b000 	ldr.w	fp, [r3]
 8005da2:	f8c2 b000 	str.w	fp, [r2]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	f8c9 1000 	str.w	r1, [r9]
 8005dac:	edd3 0a02 	vldr	s1, [r3, #8]
 8005db0:	1911      	adds	r1, r2, r4
 8005db2:	edc1 0a00 	vstr	s1, [r1]
 8005db6:	ed93 1a03 	vldr	s2, [r3, #12]
 8005dba:	eb09 0104 	add.w	r1, r9, r4
 8005dbe:	ed81 1a00 	vstr	s2, [r1]
 8005dc2:	1882      	adds	r2, r0, r2
 8005dc4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8005dc8:	f8c2 b000 	str.w	fp, [r2]
 8005dcc:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8005dd0:	4481      	add	r9, r0
 8005dd2:	1911      	adds	r1, r2, r4
 8005dd4:	f8c9 b000 	str.w	fp, [r9]
 8005dd8:	edd3 1a06 	vldr	s3, [r3, #24]
 8005ddc:	edc1 1a00 	vstr	s3, [r1]
 8005de0:	3d02      	subs	r5, #2
 8005de2:	ed93 2a07 	vldr	s4, [r3, #28]
 8005de6:	eb09 0104 	add.w	r1, r9, r4
 8005dea:	b2ad      	uxth	r5, r5
 8005dec:	ed81 2a00 	vstr	s4, [r1]
 8005df0:	3320      	adds	r3, #32
 8005df2:	1882      	adds	r2, r0, r2
 8005df4:	4481      	add	r9, r0
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	d1d1      	bne.n	8005d9e <arm_mat_trans_f32+0xda>
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	18ff      	adds	r7, r7, r3
 8005e00:	4494      	add	ip, r2
 8005e02:	9900      	ldr	r1, [sp, #0]
 8005e04:	b321      	cbz	r1, 8005e50 <arm_mat_trans_f32+0x18c>
 8005e06:	463b      	mov	r3, r7
 8005e08:	3901      	subs	r1, #1
 8005e0a:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e0e:	b28a      	uxth	r2, r1
 8005e10:	f8cc 5000 	str.w	r5, [ip]
 8005e14:	f001 0101 	and.w	r1, r1, #1
 8005e18:	44b4      	add	ip, r6
 8005e1a:	b1ba      	cbz	r2, 8005e4c <arm_mat_trans_f32+0x188>
 8005e1c:	b139      	cbz	r1, 8005e2e <arm_mat_trans_f32+0x16a>
 8005e1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005e22:	3a01      	subs	r2, #1
 8005e24:	b292      	uxth	r2, r2
 8005e26:	f8cc 1000 	str.w	r1, [ip]
 8005e2a:	44b4      	add	ip, r6
 8005e2c:	b172      	cbz	r2, 8005e4c <arm_mat_trans_f32+0x188>
 8005e2e:	4619      	mov	r1, r3
 8005e30:	3a02      	subs	r2, #2
 8005e32:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e36:	f8cc 5000 	str.w	r5, [ip]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	44b4      	add	ip, r6
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	f8cc 3000 	str.w	r3, [ip]
 8005e44:	1d0b      	adds	r3, r1, #4
 8005e46:	44b4      	add	ip, r6
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d1f0      	bne.n	8005e2e <arm_mat_trans_f32+0x16a>
 8005e4c:	9903      	ldr	r1, [sp, #12]
 8005e4e:	187f      	adds	r7, r7, r1
 8005e50:	f108 0801 	add.w	r8, r8, #1
 8005e54:	9a01      	ldr	r2, [sp, #4]
 8005e56:	fa1f f888 	uxth.w	r8, r8
 8005e5a:	4590      	cmp	r8, r2
 8005e5c:	f47f af60 	bne.w	8005d20 <arm_mat_trans_f32+0x5c>
 8005e60:	2000      	movs	r0, #0
 8005e62:	b240      	sxtb	r0, r0
 8005e64:	b006      	add	sp, #24
 8005e66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e6a:	4770      	bx	lr
 8005e6c:	20fd      	movs	r0, #253	; 0xfd
 8005e6e:	e7f8      	b.n	8005e62 <arm_mat_trans_f32+0x19e>

08005e70 <arm_mat_sub_f32>:
 8005e70:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005e74:	6803      	ldr	r3, [r0, #0]
 8005e76:	680c      	ldr	r4, [r1, #0]
 8005e78:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005e7c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8005e80:	6857      	ldr	r7, [r2, #4]
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	f040 80ea 	bne.w	800605c <arm_mat_sub_f32+0x1ec>
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	f040 80e6 	bne.w	800605c <arm_mat_sub_f32+0x1ec>
 8005e90:	8841      	ldrh	r1, [r0, #2]
 8005e92:	f8b0 9000 	ldrh.w	r9, [r0]
 8005e96:	fb09 f901 	mul.w	r9, r9, r1
 8005e9a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8005e9e:	f000 80a1 	beq.w	8005fe4 <arm_mat_sub_f32+0x174>
 8005ea2:	eddc 6a01 	vldr	s13, [ip, #4]
 8005ea6:	edd8 7a01 	vldr	s15, [r8, #4]
 8005eaa:	ed9c 6a00 	vldr	s12, [ip]
 8005eae:	ed98 7a00 	vldr	s14, [r8]
 8005eb2:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8005eb6:	ee76 0a47 	vsub.f32	s1, s12, s14
 8005eba:	ed9c 1a02 	vldr	s2, [ip, #8]
 8005ebe:	edd8 1a02 	vldr	s3, [r8, #8]
 8005ec2:	edc7 0a00 	vstr	s1, [r7]
 8005ec6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eca:	ed9c 2a03 	vldr	s4, [ip, #12]
 8005ece:	edd8 2a03 	vldr	s5, [r8, #12]
 8005ed2:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8005ed6:	ee32 3a62 	vsub.f32	s6, s4, s5
 8005eda:	ee71 3a61 	vsub.f32	s7, s2, s3
 8005ede:	4606      	mov	r6, r0
 8005ee0:	edc7 3a02 	vstr	s7, [r7, #8]
 8005ee4:	f000 0001 	and.w	r0, r0, #1
 8005ee8:	ed87 3a03 	vstr	s6, [r7, #12]
 8005eec:	f10c 0110 	add.w	r1, ip, #16
 8005ef0:	f108 0210 	add.w	r2, r8, #16
 8005ef4:	f107 0310 	add.w	r3, r7, #16
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	d06e      	beq.n	8005fda <arm_mat_sub_f32+0x16a>
 8005efc:	b320      	cbz	r0, 8005f48 <arm_mat_sub_f32+0xd8>
 8005efe:	ed91 4a01 	vldr	s8, [r1, #4]
 8005f02:	edd2 4a01 	vldr	s9, [r2, #4]
 8005f06:	ed91 5a00 	vldr	s10, [r1]
 8005f0a:	edd2 5a00 	vldr	s11, [r2]
 8005f0e:	ee74 7a64 	vsub.f32	s15, s8, s9
 8005f12:	ee75 6a65 	vsub.f32	s13, s10, s11
 8005f16:	ed91 6a02 	vldr	s12, [r1, #8]
 8005f1a:	ed92 7a02 	vldr	s14, [r2, #8]
 8005f1e:	edc3 6a00 	vstr	s13, [r3]
 8005f22:	edc3 7a01 	vstr	s15, [r3, #4]
 8005f26:	ed91 0a03 	vldr	s0, [r1, #12]
 8005f2a:	edd2 0a03 	vldr	s1, [r2, #12]
 8005f2e:	ee36 1a47 	vsub.f32	s2, s12, s14
 8005f32:	ee70 1a60 	vsub.f32	s3, s0, s1
 8005f36:	ed83 1a02 	vstr	s2, [r3, #8]
 8005f3a:	edc3 1a03 	vstr	s3, [r3, #12]
 8005f3e:	3110      	adds	r1, #16
 8005f40:	3210      	adds	r2, #16
 8005f42:	3310      	adds	r3, #16
 8005f44:	3e01      	subs	r6, #1
 8005f46:	d048      	beq.n	8005fda <arm_mat_sub_f32+0x16a>
 8005f48:	ed91 2a01 	vldr	s4, [r1, #4]
 8005f4c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005f50:	ed91 3a00 	vldr	s6, [r1]
 8005f54:	edd2 3a00 	vldr	s7, [r2]
 8005f58:	ee32 4a62 	vsub.f32	s8, s4, s5
 8005f5c:	ee73 4a63 	vsub.f32	s9, s6, s7
 8005f60:	ed91 5a02 	vldr	s10, [r1, #8]
 8005f64:	edd2 5a02 	vldr	s11, [r2, #8]
 8005f68:	edc3 4a00 	vstr	s9, [r3]
 8005f6c:	ed83 4a01 	vstr	s8, [r3, #4]
 8005f70:	edd1 6a03 	vldr	s13, [r1, #12]
 8005f74:	edd2 7a03 	vldr	s15, [r2, #12]
 8005f78:	ee35 6a65 	vsub.f32	s12, s10, s11
 8005f7c:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8005f80:	ed83 6a02 	vstr	s12, [r3, #8]
 8005f84:	ed83 7a03 	vstr	s14, [r3, #12]
 8005f88:	ed91 0a04 	vldr	s0, [r1, #16]
 8005f8c:	edd2 0a04 	vldr	s1, [r2, #16]
 8005f90:	ed91 1a05 	vldr	s2, [r1, #20]
 8005f94:	edd2 1a05 	vldr	s3, [r2, #20]
 8005f98:	ee30 2a60 	vsub.f32	s4, s0, s1
 8005f9c:	ee71 2a61 	vsub.f32	s5, s2, s3
 8005fa0:	ed91 3a06 	vldr	s6, [r1, #24]
 8005fa4:	edd2 3a06 	vldr	s7, [r2, #24]
 8005fa8:	ed83 2a04 	vstr	s4, [r3, #16]
 8005fac:	edc3 2a05 	vstr	s5, [r3, #20]
 8005fb0:	ed91 4a07 	vldr	s8, [r1, #28]
 8005fb4:	edd2 4a07 	vldr	s9, [r2, #28]
 8005fb8:	ee33 5a63 	vsub.f32	s10, s6, s7
 8005fbc:	ee74 5a64 	vsub.f32	s11, s8, s9
 8005fc0:	f101 0510 	add.w	r5, r1, #16
 8005fc4:	f102 0410 	add.w	r4, r2, #16
 8005fc8:	ed83 5a06 	vstr	s10, [r3, #24]
 8005fcc:	edc3 5a07 	vstr	s11, [r3, #28]
 8005fd0:	3120      	adds	r1, #32
 8005fd2:	3220      	adds	r2, #32
 8005fd4:	3320      	adds	r3, #32
 8005fd6:	3e02      	subs	r6, #2
 8005fd8:	d1b6      	bne.n	8005f48 <arm_mat_sub_f32+0xd8>
 8005fda:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8005fde:	4484      	add	ip, r0
 8005fe0:	4480      	add	r8, r0
 8005fe2:	183f      	adds	r7, r7, r0
 8005fe4:	f019 0903 	ands.w	r9, r9, #3
 8005fe8:	d033      	beq.n	8006052 <arm_mat_sub_f32+0x1e2>
 8005fea:	eddc 6a00 	vldr	s13, [ip]
 8005fee:	edd8 7a00 	vldr	s15, [r8]
 8005ff2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005ff6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	464a      	mov	r2, r9
 8005ffe:	4664      	mov	r4, ip
 8006000:	4640      	mov	r0, r8
 8006002:	f009 0101 	and.w	r1, r9, #1
 8006006:	eca3 6a01 	vstmia	r3!, {s12}
 800600a:	b312      	cbz	r2, 8006052 <arm_mat_sub_f32+0x1e2>
 800600c:	b159      	cbz	r1, 8006026 <arm_mat_sub_f32+0x1b6>
 800600e:	3404      	adds	r4, #4
 8006010:	3004      	adds	r0, #4
 8006012:	ed94 7a00 	vldr	s14, [r4]
 8006016:	ed90 0a00 	vldr	s0, [r0]
 800601a:	ee77 0a40 	vsub.f32	s1, s14, s0
 800601e:	3a01      	subs	r2, #1
 8006020:	ece3 0a01 	vstmia	r3!, {s1}
 8006024:	d015      	beq.n	8006052 <arm_mat_sub_f32+0x1e2>
 8006026:	ed94 1a01 	vldr	s2, [r4, #4]
 800602a:	edd0 1a01 	vldr	s3, [r0, #4]
 800602e:	ee31 2a61 	vsub.f32	s4, s2, s3
 8006032:	4619      	mov	r1, r3
 8006034:	eca1 2a01 	vstmia	r1!, {s4}
 8006038:	edd4 2a02 	vldr	s5, [r4, #8]
 800603c:	ed90 3a02 	vldr	s6, [r0, #8]
 8006040:	ee72 3ac3 	vsub.f32	s7, s5, s6
 8006044:	3408      	adds	r4, #8
 8006046:	edc3 3a01 	vstr	s7, [r3, #4]
 800604a:	3008      	adds	r0, #8
 800604c:	1d0b      	adds	r3, r1, #4
 800604e:	3a02      	subs	r2, #2
 8006050:	d1e9      	bne.n	8006026 <arm_mat_sub_f32+0x1b6>
 8006052:	2300      	movs	r3, #0
 8006054:	b258      	sxtb	r0, r3
 8006056:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800605a:	4770      	bx	lr
 800605c:	23fd      	movs	r3, #253	; 0xfd
 800605e:	e7f9      	b.n	8006054 <arm_mat_sub_f32+0x1e4>

08006060 <arm_mat_scale_f32>:
 8006060:	b4f0      	push	{r4, r5, r6, r7}
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	680a      	ldr	r2, [r1, #0]
 8006066:	6846      	ldr	r6, [r0, #4]
 8006068:	684d      	ldr	r5, [r1, #4]
 800606a:	4293      	cmp	r3, r2
 800606c:	f040 80b0 	bne.w	80061d0 <arm_mat_scale_f32+0x170>
 8006070:	8841      	ldrh	r1, [r0, #2]
 8006072:	8807      	ldrh	r7, [r0, #0]
 8006074:	fb07 f701 	mul.w	r7, r7, r1
 8006078:	ea5f 0c97 	movs.w	ip, r7, lsr #2
 800607c:	d079      	beq.n	8006172 <arm_mat_scale_f32+0x112>
 800607e:	edd6 6a01 	vldr	s13, [r6, #4]
 8006082:	ed96 7a02 	vldr	s14, [r6, #8]
 8006086:	edd6 7a03 	vldr	s15, [r6, #12]
 800608a:	ed96 6a00 	vldr	s12, [r6]
 800608e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8006092:	ee60 0a26 	vmul.f32	s1, s0, s13
 8006096:	ee20 1a07 	vmul.f32	s2, s0, s14
 800609a:	ee60 1a27 	vmul.f32	s3, s0, s15
 800609e:	ee26 2a00 	vmul.f32	s4, s12, s0
 80060a2:	4632      	mov	r2, r6
 80060a4:	461c      	mov	r4, r3
 80060a6:	f003 0101 	and.w	r1, r3, #1
 80060aa:	3210      	adds	r2, #16
 80060ac:	ed85 2a00 	vstr	s4, [r5]
 80060b0:	edc5 0a01 	vstr	s1, [r5, #4]
 80060b4:	ed85 1a02 	vstr	s2, [r5, #8]
 80060b8:	edc5 1a03 	vstr	s3, [r5, #12]
 80060bc:	f105 0310 	add.w	r3, r5, #16
 80060c0:	2c00      	cmp	r4, #0
 80060c2:	d052      	beq.n	800616a <arm_mat_scale_f32+0x10a>
 80060c4:	b1e1      	cbz	r1, 8006100 <arm_mat_scale_f32+0xa0>
 80060c6:	4610      	mov	r0, r2
 80060c8:	edd2 2a01 	vldr	s5, [r2, #4]
 80060cc:	ed92 3a02 	vldr	s6, [r2, #8]
 80060d0:	edd2 3a03 	vldr	s7, [r2, #12]
 80060d4:	ed90 4a00 	vldr	s8, [r0]
 80060d8:	ee60 4a22 	vmul.f32	s9, s0, s5
 80060dc:	ee20 5a03 	vmul.f32	s10, s0, s6
 80060e0:	ee60 5a23 	vmul.f32	s11, s0, s7
 80060e4:	ee64 6a00 	vmul.f32	s13, s8, s0
 80060e8:	3210      	adds	r2, #16
 80060ea:	edc3 4a01 	vstr	s9, [r3, #4]
 80060ee:	edc3 6a00 	vstr	s13, [r3]
 80060f2:	ed83 5a02 	vstr	s10, [r3, #8]
 80060f6:	edc3 5a03 	vstr	s11, [r3, #12]
 80060fa:	3310      	adds	r3, #16
 80060fc:	3c01      	subs	r4, #1
 80060fe:	d034      	beq.n	800616a <arm_mat_scale_f32+0x10a>
 8006100:	ed92 6a01 	vldr	s12, [r2, #4]
 8006104:	edd2 0a00 	vldr	s1, [r2]
 8006108:	ed92 7a02 	vldr	s14, [r2, #8]
 800610c:	edd2 7a03 	vldr	s15, [r2, #12]
 8006110:	ee20 1a06 	vmul.f32	s2, s0, s12
 8006114:	ee60 1a07 	vmul.f32	s3, s0, s14
 8006118:	ee20 2a27 	vmul.f32	s4, s0, s15
 800611c:	ee60 2a80 	vmul.f32	s5, s1, s0
 8006120:	ed83 1a01 	vstr	s2, [r3, #4]
 8006124:	edc3 2a00 	vstr	s5, [r3]
 8006128:	edc3 1a02 	vstr	s3, [r3, #8]
 800612c:	ed83 2a03 	vstr	s4, [r3, #12]
 8006130:	ed92 3a04 	vldr	s6, [r2, #16]
 8006134:	edd2 3a05 	vldr	s7, [r2, #20]
 8006138:	ed92 4a06 	vldr	s8, [r2, #24]
 800613c:	edd2 4a07 	vldr	s9, [r2, #28]
 8006140:	ee20 5a23 	vmul.f32	s10, s0, s7
 8006144:	ee60 5a04 	vmul.f32	s11, s0, s8
 8006148:	ee60 6a24 	vmul.f32	s13, s0, s9
 800614c:	ee23 6a00 	vmul.f32	s12, s6, s0
 8006150:	ed83 5a05 	vstr	s10, [r3, #20]
 8006154:	ed83 6a04 	vstr	s12, [r3, #16]
 8006158:	edc3 5a06 	vstr	s11, [r3, #24]
 800615c:	edc3 6a07 	vstr	s13, [r3, #28]
 8006160:	3320      	adds	r3, #32
 8006162:	3c02      	subs	r4, #2
 8006164:	f102 0220 	add.w	r2, r2, #32
 8006168:	d1ca      	bne.n	8006100 <arm_mat_scale_f32+0xa0>
 800616a:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800616e:	18b6      	adds	r6, r6, r2
 8006170:	18ad      	adds	r5, r5, r2
 8006172:	f017 0703 	ands.w	r7, r7, #3
 8006176:	d027      	beq.n	80061c8 <arm_mat_scale_f32+0x168>
 8006178:	edd6 0a00 	vldr	s1, [r6]
 800617c:	3f01      	subs	r7, #1
 800617e:	ee20 7a80 	vmul.f32	s14, s1, s0
 8006182:	462b      	mov	r3, r5
 8006184:	463a      	mov	r2, r7
 8006186:	4630      	mov	r0, r6
 8006188:	f007 0701 	and.w	r7, r7, #1
 800618c:	eca3 7a01 	vstmia	r3!, {s14}
 8006190:	b1d2      	cbz	r2, 80061c8 <arm_mat_scale_f32+0x168>
 8006192:	b147      	cbz	r7, 80061a6 <arm_mat_scale_f32+0x146>
 8006194:	1d30      	adds	r0, r6, #4
 8006196:	edd0 7a00 	vldr	s15, [r0]
 800619a:	ee27 1a80 	vmul.f32	s2, s15, s0
 800619e:	3a01      	subs	r2, #1
 80061a0:	eca3 1a01 	vstmia	r3!, {s2}
 80061a4:	d010      	beq.n	80061c8 <arm_mat_scale_f32+0x168>
 80061a6:	edd0 1a01 	vldr	s3, [r0, #4]
 80061aa:	ee21 2a80 	vmul.f32	s4, s3, s0
 80061ae:	4619      	mov	r1, r3
 80061b0:	eca1 2a01 	vstmia	r1!, {s4}
 80061b4:	edd0 2a02 	vldr	s5, [r0, #8]
 80061b8:	ee22 3a80 	vmul.f32	s6, s5, s0
 80061bc:	3008      	adds	r0, #8
 80061be:	ed83 3a01 	vstr	s6, [r3, #4]
 80061c2:	1d0b      	adds	r3, r1, #4
 80061c4:	3a02      	subs	r2, #2
 80061c6:	d1ee      	bne.n	80061a6 <arm_mat_scale_f32+0x146>
 80061c8:	2300      	movs	r3, #0
 80061ca:	b258      	sxtb	r0, r3
 80061cc:	bcf0      	pop	{r4, r5, r6, r7}
 80061ce:	4770      	bx	lr
 80061d0:	23fd      	movs	r3, #253	; 0xfd
 80061d2:	e7fa      	b.n	80061ca <arm_mat_scale_f32+0x16a>

080061d4 <arm_mat_mult_f32>:
 80061d4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061d8:	b08a      	sub	sp, #40	; 0x28
 80061da:	8844      	ldrh	r4, [r0, #2]
 80061dc:	9101      	str	r1, [sp, #4]
 80061de:	f8dd c004 	ldr.w	ip, [sp, #4]
 80061e2:	8809      	ldrh	r1, [r1, #0]
 80061e4:	6853      	ldr	r3, [r2, #4]
 80061e6:	f8bc c002 	ldrh.w	ip, [ip, #2]
 80061ea:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80061ee:	9307      	str	r3, [sp, #28]
 80061f0:	42a1      	cmp	r1, r4
 80061f2:	8800      	ldrh	r0, [r0, #0]
 80061f4:	f8cd c008 	str.w	ip, [sp, #8]
 80061f8:	f040 8123 	bne.w	8006442 <arm_mat_mult_f32+0x26e>
 80061fc:	8815      	ldrh	r5, [r2, #0]
 80061fe:	4285      	cmp	r5, r0
 8006200:	f040 811f 	bne.w	8006442 <arm_mat_mult_f32+0x26e>
 8006204:	8852      	ldrh	r2, [r2, #2]
 8006206:	4562      	cmp	r2, ip
 8006208:	f040 811b 	bne.w	8006442 <arm_mat_mult_f32+0x26e>
 800620c:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	9505      	str	r5, [sp, #20]
 8006214:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006218:	b2bf      	uxth	r7, r7
 800621a:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800621e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8006222:	013a      	lsls	r2, r7, #4
 8006224:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006228:	eb04 0046 	add.w	r0, r4, r6, lsl #1
 800622c:	f001 0303 	and.w	r3, r1, #3
 8006230:	fb07 0700 	mla	r7, r7, r0, r0
 8006234:	0089      	lsls	r1, r1, #2
 8006236:	f04f 0c00 	mov.w	ip, #0
 800623a:	3210      	adds	r2, #16
 800623c:	ed9f 6a82 	vldr	s12, [pc, #520]	; 8006448 <arm_mat_mult_f32+0x274>
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	9108      	str	r1, [sp, #32]
 8006244:	9704      	str	r7, [sp, #16]
 8006246:	f8cd c018 	str.w	ip, [sp, #24]
 800624a:	9209      	str	r2, [sp, #36]	; 0x24
 800624c:	4643      	mov	r3, r8
 800624e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006252:	9907      	ldr	r1, [sp, #28]
 8006254:	9a06      	ldr	r2, [sp, #24]
 8006256:	44d4      	add	ip, sl
 8006258:	f8cd c00c 	str.w	ip, [sp, #12]
 800625c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006260:	461f      	mov	r7, r3
 8006262:	f04f 0c00 	mov.w	ip, #0
 8006266:	f1b9 0f00 	cmp.w	r9, #0
 800626a:	f000 80e6 	beq.w	800643a <arm_mat_mult_f32+0x266>
 800626e:	edd7 7a00 	vldr	s15, [r7]
 8006272:	ed9a 7a00 	vldr	s14, [sl]
 8006276:	eef0 6a46 	vmov.f32	s13, s12
 800627a:	ee47 6a27 	vmla.f32	s13, s14, s15
 800627e:	19ba      	adds	r2, r7, r6
 8006280:	edd2 0a00 	vldr	s1, [r2]
 8006284:	ed9a 0a01 	vldr	s0, [sl, #4]
 8006288:	eef0 7a66 	vmov.f32	s15, s13
 800628c:	193d      	adds	r5, r7, r4
 800628e:	ee40 7a20 	vmla.f32	s15, s0, s1
 8006292:	edd5 1a00 	vldr	s3, [r5]
 8006296:	ed9a 1a02 	vldr	s2, [sl, #8]
 800629a:	1911      	adds	r1, r2, r4
 800629c:	ee41 7a21 	vmla.f32	s15, s2, s3
 80062a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80062a4:	edd1 2a00 	vldr	s5, [r1]
 80062a8:	ed9a 2a03 	vldr	s4, [sl, #12]
 80062ac:	fa1f f58b 	uxth.w	r5, fp
 80062b0:	1839      	adds	r1, r7, r0
 80062b2:	f00b 0b01 	and.w	fp, fp, #1
 80062b6:	ee42 7a22 	vmla.f32	s15, s4, s5
 80062ba:	f10a 0310 	add.w	r3, sl, #16
 80062be:	1812      	adds	r2, r2, r0
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	d066      	beq.n	8006392 <arm_mat_mult_f32+0x1be>
 80062c4:	f1bb 0f00 	cmp.w	fp, #0
 80062c8:	d022      	beq.n	8006310 <arm_mat_mult_f32+0x13c>
 80062ca:	ed93 3a00 	vldr	s6, [r3]
 80062ce:	edd1 3a00 	vldr	s7, [r1]
 80062d2:	ee43 7a23 	vmla.f32	s15, s6, s7
 80062d6:	ed93 4a01 	vldr	s8, [r3, #4]
 80062da:	edd2 4a00 	vldr	s9, [r2]
 80062de:	eb01 0b04 	add.w	fp, r1, r4
 80062e2:	ee44 7a24 	vmla.f32	s15, s8, s9
 80062e6:	ed93 5a02 	vldr	s10, [r3, #8]
 80062ea:	eddb 5a00 	vldr	s11, [fp]
 80062ee:	eb02 0b04 	add.w	fp, r2, r4
 80062f2:	ee45 7a25 	vmla.f32	s15, s10, s11
 80062f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80062fa:	ed9b 7a00 	vldr	s14, [fp]
 80062fe:	3d01      	subs	r5, #1
 8006300:	b2ad      	uxth	r5, r5
 8006302:	1841      	adds	r1, r0, r1
 8006304:	ee46 7a87 	vmla.f32	s15, s13, s14
 8006308:	3310      	adds	r3, #16
 800630a:	1812      	adds	r2, r2, r0
 800630c:	2d00      	cmp	r5, #0
 800630e:	d040      	beq.n	8006392 <arm_mat_mult_f32+0x1be>
 8006310:	ed93 0a00 	vldr	s0, [r3]
 8006314:	edd1 0a00 	vldr	s1, [r1]
 8006318:	ee40 7a20 	vmla.f32	s15, s0, s1
 800631c:	ed93 1a01 	vldr	s2, [r3, #4]
 8006320:	edd2 1a00 	vldr	s3, [r2]
 8006324:	eb01 0b04 	add.w	fp, r1, r4
 8006328:	ee41 7a21 	vmla.f32	s15, s2, s3
 800632c:	ed93 2a02 	vldr	s4, [r3, #8]
 8006330:	eddb 2a00 	vldr	s5, [fp]
 8006334:	eb02 0b04 	add.w	fp, r2, r4
 8006338:	ee42 7a22 	vmla.f32	s15, s4, s5
 800633c:	ed93 3a03 	vldr	s6, [r3, #12]
 8006340:	eddb 3a00 	vldr	s7, [fp]
 8006344:	1841      	adds	r1, r0, r1
 8006346:	ee43 7a23 	vmla.f32	s15, s6, s7
 800634a:	ed93 4a04 	vldr	s8, [r3, #16]
 800634e:	edd1 4a00 	vldr	s9, [r1]
 8006352:	1812      	adds	r2, r2, r0
 8006354:	ee44 7a24 	vmla.f32	s15, s8, s9
 8006358:	ed93 5a05 	vldr	s10, [r3, #20]
 800635c:	edd2 5a00 	vldr	s11, [r2]
 8006360:	eb01 0b04 	add.w	fp, r1, r4
 8006364:	ee45 7a25 	vmla.f32	s15, s10, s11
 8006368:	edd3 6a06 	vldr	s13, [r3, #24]
 800636c:	ed9b 7a00 	vldr	s14, [fp]
 8006370:	eb02 0b04 	add.w	fp, r2, r4
 8006374:	ee46 7a87 	vmla.f32	s15, s13, s14
 8006378:	ed93 0a07 	vldr	s0, [r3, #28]
 800637c:	eddb 0a00 	vldr	s1, [fp]
 8006380:	3d02      	subs	r5, #2
 8006382:	b2ad      	uxth	r5, r5
 8006384:	1841      	adds	r1, r0, r1
 8006386:	ee40 7a20 	vmla.f32	s15, s0, s1
 800638a:	3320      	adds	r3, #32
 800638c:	1812      	adds	r2, r2, r0
 800638e:	2d00      	cmp	r5, #0
 8006390:	d1be      	bne.n	8006310 <arm_mat_mult_f32+0x13c>
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	18ff      	adds	r7, r7, r3
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	9900      	ldr	r1, [sp, #0]
 800639a:	b351      	cbz	r1, 80063f2 <arm_mat_mult_f32+0x21e>
 800639c:	3901      	subs	r1, #1
 800639e:	edd7 1a00 	vldr	s3, [r7]
 80063a2:	ecb3 1a01 	vldmia	r3!, {s2}
 80063a6:	b28a      	uxth	r2, r1
 80063a8:	ee41 7a21 	vmla.f32	s15, s2, s3
 80063ac:	f001 0101 	and.w	r1, r1, #1
 80063b0:	19bf      	adds	r7, r7, r6
 80063b2:	b1f2      	cbz	r2, 80063f2 <arm_mat_mult_f32+0x21e>
 80063b4:	b149      	cbz	r1, 80063ca <arm_mat_mult_f32+0x1f6>
 80063b6:	ed97 2a00 	vldr	s4, [r7]
 80063ba:	ecf3 2a01 	vldmia	r3!, {s5}
 80063be:	3a01      	subs	r2, #1
 80063c0:	b292      	uxth	r2, r2
 80063c2:	ee42 7a82 	vmla.f32	s15, s5, s4
 80063c6:	19bf      	adds	r7, r7, r6
 80063c8:	b19a      	cbz	r2, 80063f2 <arm_mat_mult_f32+0x21e>
 80063ca:	4619      	mov	r1, r3
 80063cc:	ecb1 3a01 	vldmia	r1!, {s6}
 80063d0:	edd7 3a00 	vldr	s7, [r7]
 80063d4:	19bf      	adds	r7, r7, r6
 80063d6:	ee43 7a23 	vmla.f32	s15, s6, s7
 80063da:	ed93 4a01 	vldr	s8, [r3, #4]
 80063de:	edd7 4a00 	vldr	s9, [r7]
 80063e2:	1e93      	subs	r3, r2, #2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	ee44 7a24 	vmla.f32	s15, s8, s9
 80063ea:	1d0b      	adds	r3, r1, #4
 80063ec:	19bf      	adds	r7, r7, r6
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	d1eb      	bne.n	80063ca <arm_mat_mult_f32+0x1f6>
 80063f2:	ece8 7a01 	vstmia	r8!, {s15}
 80063f6:	9a01      	ldr	r2, [sp, #4]
 80063f8:	9902      	ldr	r1, [sp, #8]
 80063fa:	6853      	ldr	r3, [r2, #4]
 80063fc:	f10c 0c01 	add.w	ip, ip, #1
 8006400:	fa1f fc8c 	uxth.w	ip, ip
 8006404:	458c      	cmp	ip, r1
 8006406:	eb03 078c 	add.w	r7, r3, ip, lsl #2
 800640a:	f47f af2c 	bne.w	8006266 <arm_mat_mult_f32+0x92>
 800640e:	9a05      	ldr	r2, [sp, #20]
 8006410:	9906      	ldr	r1, [sp, #24]
 8006412:	3a01      	subs	r2, #1
 8006414:	b292      	uxth	r2, r2
 8006416:	9205      	str	r2, [sp, #20]
 8006418:	448c      	add	ip, r1
 800641a:	9a05      	ldr	r2, [sp, #20]
 800641c:	9908      	ldr	r1, [sp, #32]
 800641e:	fa1f fc8c 	uxth.w	ip, ip
 8006422:	f8cd c018 	str.w	ip, [sp, #24]
 8006426:	448a      	add	sl, r1
 8006428:	2a00      	cmp	r2, #0
 800642a:	f47f af10 	bne.w	800624e <arm_mat_mult_f32+0x7a>
 800642e:	4610      	mov	r0, r2
 8006430:	b240      	sxtb	r0, r0
 8006432:	b00a      	add	sp, #40	; 0x28
 8006434:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006438:	4770      	bx	lr
 800643a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8006448 <arm_mat_mult_f32+0x274>
 800643e:	4653      	mov	r3, sl
 8006440:	e7aa      	b.n	8006398 <arm_mat_mult_f32+0x1c4>
 8006442:	20fd      	movs	r0, #253	; 0xfd
 8006444:	e7f4      	b.n	8006430 <arm_mat_mult_f32+0x25c>
 8006446:	bf00      	nop
 8006448:	00000000 	.word	0x00000000

0800644c <arm_mat_inverse_f32>:
 800644c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006450:	8807      	ldrh	r7, [r0, #0]
 8006452:	8843      	ldrh	r3, [r0, #2]
 8006454:	684a      	ldr	r2, [r1, #4]
 8006456:	6840      	ldr	r0, [r0, #4]
 8006458:	b08c      	sub	sp, #48	; 0x30
 800645a:	42bb      	cmp	r3, r7
 800645c:	9003      	str	r0, [sp, #12]
 800645e:	9208      	str	r2, [sp, #32]
 8006460:	f040 826a 	bne.w	8006938 <arm_mat_inverse_f32+0x4ec>
 8006464:	8808      	ldrh	r0, [r1, #0]
 8006466:	8849      	ldrh	r1, [r1, #2]
 8006468:	4281      	cmp	r1, r0
 800646a:	f040 8265 	bne.w	8006938 <arm_mat_inverse_f32+0x4ec>
 800646e:	428f      	cmp	r7, r1
 8006470:	f040 8262 	bne.w	8006938 <arm_mat_inverse_f32+0x4ec>
 8006474:	2f00      	cmp	r7, #0
 8006476:	f000 825d 	beq.w	8006934 <arm_mat_inverse_f32+0x4e8>
 800647a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800647e:	1e7a      	subs	r2, r7, #1
 8006480:	46c1      	mov	r9, r8
 8006482:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8006486:	4615      	mov	r5, r2
 8006488:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 800648c:	2601      	movs	r6, #1
 800648e:	2300      	movs	r3, #0
 8006490:	f849 ab04 	str.w	sl, [r9], #4
 8006494:	2d00      	cmp	r5, #0
 8006496:	d037      	beq.n	8006508 <arm_mat_inverse_f32+0xbc>
 8006498:	1e6c      	subs	r4, r5, #1
 800649a:	4620      	mov	r0, r4
 800649c:	f004 0101 	and.w	r1, r4, #1
 80064a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80064a4:	f109 0404 	add.w	r4, r9, #4
 80064a8:	b160      	cbz	r0, 80064c4 <arm_mat_inverse_f32+0x78>
 80064aa:	b121      	cbz	r1, 80064b6 <arm_mat_inverse_f32+0x6a>
 80064ac:	3404      	adds	r4, #4
 80064ae:	3801      	subs	r0, #1
 80064b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80064b4:	d006      	beq.n	80064c4 <arm_mat_inverse_f32+0x78>
 80064b6:	4621      	mov	r1, r4
 80064b8:	f841 3b04 	str.w	r3, [r1], #4
 80064bc:	6063      	str	r3, [r4, #4]
 80064be:	1d0c      	adds	r4, r1, #4
 80064c0:	3802      	subs	r0, #2
 80064c2:	d1f8      	bne.n	80064b6 <arm_mat_inverse_f32+0x6a>
 80064c4:	eb09 080c 	add.w	r8, r9, ip
 80064c8:	b1ae      	cbz	r6, 80064f6 <arm_mat_inverse_f32+0xaa>
 80064ca:	1e71      	subs	r1, r6, #1
 80064cc:	4640      	mov	r0, r8
 80064ce:	460c      	mov	r4, r1
 80064d0:	f840 3b04 	str.w	r3, [r0], #4
 80064d4:	f001 0101 	and.w	r1, r1, #1
 80064d8:	b15c      	cbz	r4, 80064f2 <arm_mat_inverse_f32+0xa6>
 80064da:	b119      	cbz	r1, 80064e4 <arm_mat_inverse_f32+0x98>
 80064dc:	3c01      	subs	r4, #1
 80064de:	f840 3b04 	str.w	r3, [r0], #4
 80064e2:	d006      	beq.n	80064f2 <arm_mat_inverse_f32+0xa6>
 80064e4:	4601      	mov	r1, r0
 80064e6:	f841 3b04 	str.w	r3, [r1], #4
 80064ea:	6043      	str	r3, [r0, #4]
 80064ec:	1d08      	adds	r0, r1, #4
 80064ee:	3c02      	subs	r4, #2
 80064f0:	d1f8      	bne.n	80064e4 <arm_mat_inverse_f32+0x98>
 80064f2:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 80064f6:	46c1      	mov	r9, r8
 80064f8:	3d01      	subs	r5, #1
 80064fa:	3601      	adds	r6, #1
 80064fc:	f1ac 0c04 	sub.w	ip, ip, #4
 8006500:	f849 ab04 	str.w	sl, [r9], #4
 8006504:	2d00      	cmp	r5, #0
 8006506:	d1c7      	bne.n	8006498 <arm_mat_inverse_f32+0x4c>
 8006508:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800650c:	fb07 f607 	mul.w	r6, r7, r7
 8006510:	fb0c f007 	mul.w	r0, ip, r7
 8006514:	eba0 0086 	sub.w	r0, r0, r6, lsl #2
 8006518:	9507      	str	r5, [sp, #28]
 800651a:	9e03      	ldr	r6, [sp, #12]
 800651c:	9205      	str	r2, [sp, #20]
 800651e:	00fb      	lsls	r3, r7, #3
 8006520:	f10c 0504 	add.w	r5, ip, #4
 8006524:	9a07      	ldr	r2, [sp, #28]
 8006526:	9509      	str	r5, [sp, #36]	; 0x24
 8006528:	1d19      	adds	r1, r3, #4
 800652a:	9d08      	ldr	r5, [sp, #32]
 800652c:	900b      	str	r0, [sp, #44]	; 0x2c
 800652e:	1833      	adds	r3, r6, r0
 8006530:	edd6 7a00 	vldr	s15, [r6]
 8006534:	910a      	str	r1, [sp, #40]	; 0x28
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	46b0      	mov	r8, r6
 800653a:	f8cd c008 	str.w	ip, [sp, #8]
 800653e:	46b9      	mov	r9, r7
 8006540:	9201      	str	r2, [sp, #4]
 8006542:	edd8 6a00 	vldr	s13, [r8]
 8006546:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8006840 <arm_mat_inverse_f32+0x3f4>
 800654a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800654e:	1e78      	subs	r0, r7, #1
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	f000 0101 	and.w	r1, r0, #1
 8006558:	f340 8168 	ble.w	800682c <arm_mat_inverse_f32+0x3e0>
 800655c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	bfc8      	it	gt
 8006566:	eeb0 7a66 	vmovgt.f32	s14, s13
 800656a:	2301      	movs	r3, #1
 800656c:	429f      	cmp	r7, r3
 800656e:	eb08 020c 	add.w	r2, r8, ip
 8006572:	d938      	bls.n	80065e6 <arm_mat_inverse_f32+0x19a>
 8006574:	b189      	cbz	r1, 800659a <arm_mat_inverse_f32+0x14e>
 8006576:	edd2 6a00 	vldr	s13, [r2]
 800657a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006582:	dd23      	ble.n	80065cc <arm_mat_inverse_f32+0x180>
 8006584:	eef4 6a47 	vcmp.f32	s13, s14
 8006588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658c:	bfc8      	it	gt
 800658e:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006592:	3301      	adds	r3, #1
 8006594:	429f      	cmp	r7, r3
 8006596:	4462      	add	r2, ip
 8006598:	d925      	bls.n	80065e6 <arm_mat_inverse_f32+0x19a>
 800659a:	ed92 2a00 	vldr	s4, [r2]
 800659e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	4462      	add	r2, ip
 80065a8:	bfd8      	it	le
 80065aa:	eeb1 2a42 	vnegle.f32	s4, s4
 80065ae:	edd2 6a00 	vldr	s13, [r2]
 80065b2:	eeb4 2a47 	vcmp.f32	s4, s14
 80065b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80065be:	bfc8      	it	gt
 80065c0:	eeb0 7a42 	vmovgt.f32	s14, s4
 80065c4:	3301      	adds	r3, #1
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	dcdb      	bgt.n	8006584 <arm_mat_inverse_f32+0x138>
 80065cc:	eef1 6a66 	vneg.f32	s13, s13
 80065d0:	eef4 6a47 	vcmp.f32	s13, s14
 80065d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d8:	bfc8      	it	gt
 80065da:	eeb0 7a66 	vmovgt.f32	s14, s13
 80065de:	3301      	adds	r3, #1
 80065e0:	429f      	cmp	r7, r3
 80065e2:	4462      	add	r2, ip
 80065e4:	d8d9      	bhi.n	800659a <arm_mat_inverse_f32+0x14e>
 80065e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ee:	f000 818f 	beq.w	8006910 <arm_mat_inverse_f32+0x4c4>
 80065f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fa:	bfd4      	ite	le
 80065fc:	eef1 6a67 	vnegle.f32	s13, s15
 8006600:	eef0 6a67 	vmovgt.f32	s13, s15
 8006604:	eeb4 7a66 	vcmp.f32	s14, s13
 8006608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660c:	d013      	beq.n	8006636 <arm_mat_inverse_f32+0x1ea>
 800660e:	9805      	ldr	r0, [sp, #20]
 8006610:	b188      	cbz	r0, 8006636 <arm_mat_inverse_f32+0x1ea>
 8006612:	9904      	ldr	r1, [sp, #16]
 8006614:	ed91 0a00 	vldr	s0, [r1]
 8006618:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	eeb1 6a40 	vneg.f32	s12, s0
 8006624:	bfc8      	it	gt
 8006626:	eeb0 6a40 	vmovgt.f32	s12, s0
 800662a:	eeb4 7a46 	vcmp.f32	s14, s12
 800662e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006632:	f000 8107 	beq.w	8006844 <arm_mat_inverse_f32+0x3f8>
 8006636:	9b07      	ldr	r3, [sp, #28]
 8006638:	2b01      	cmp	r3, #1
 800663a:	f000 8177 	beq.w	800692c <arm_mat_inverse_f32+0x4e0>
 800663e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006646:	f000 8175 	beq.w	8006934 <arm_mat_inverse_f32+0x4e8>
 800664a:	2400      	movs	r4, #0
 800664c:	eb05 000c 	add.w	r0, r5, ip
 8006650:	9407      	str	r4, [sp, #28]
 8006652:	9006      	str	r0, [sp, #24]
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	d025      	beq.n	80066a6 <arm_mat_inverse_f32+0x25a>
 800665a:	edd6 0a00 	vldr	s1, [r6]
 800665e:	ee80 1aa7 	vdiv.f32	s2, s1, s15
 8006662:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8006666:	4633      	mov	r3, r6
 8006668:	460a      	mov	r2, r1
 800666a:	f001 0401 	and.w	r4, r1, #1
 800666e:	eca3 1a01 	vstmia	r3!, {s2}
 8006672:	b1c1      	cbz	r1, 80066a6 <arm_mat_inverse_f32+0x25a>
 8006674:	b13c      	cbz	r4, 8006686 <arm_mat_inverse_f32+0x23a>
 8006676:	edd3 1a00 	vldr	s3, [r3]
 800667a:	ee81 2aa7 	vdiv.f32	s4, s3, s15
 800667e:	1e4a      	subs	r2, r1, #1
 8006680:	eca3 2a01 	vstmia	r3!, {s4}
 8006684:	d00f      	beq.n	80066a6 <arm_mat_inverse_f32+0x25a>
 8006686:	edd3 2a00 	vldr	s5, [r3]
 800668a:	ee82 3aa7 	vdiv.f32	s6, s5, s15
 800668e:	4618      	mov	r0, r3
 8006690:	3a02      	subs	r2, #2
 8006692:	eca0 3a01 	vstmia	r0!, {s6}
 8006696:	edd3 3a01 	vldr	s7, [r3, #4]
 800669a:	ee83 4aa7 	vdiv.f32	s8, s7, s15
 800669e:	4603      	mov	r3, r0
 80066a0:	eca3 4a01 	vstmia	r3!, {s8}
 80066a4:	d1ef      	bne.n	8006686 <arm_mat_inverse_f32+0x23a>
 80066a6:	edd5 4a00 	vldr	s9, [r5]
 80066aa:	ee84 5aa7 	vdiv.f32	s10, s9, s15
 80066ae:	1e79      	subs	r1, r7, #1
 80066b0:	462b      	mov	r3, r5
 80066b2:	460a      	mov	r2, r1
 80066b4:	f001 0401 	and.w	r4, r1, #1
 80066b8:	eca3 5a01 	vstmia	r3!, {s10}
 80066bc:	b1c1      	cbz	r1, 80066f0 <arm_mat_inverse_f32+0x2a4>
 80066be:	b13c      	cbz	r4, 80066d0 <arm_mat_inverse_f32+0x284>
 80066c0:	edd3 5a00 	vldr	s11, [r3]
 80066c4:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80066c8:	1e4a      	subs	r2, r1, #1
 80066ca:	eca3 7a01 	vstmia	r3!, {s14}
 80066ce:	d00f      	beq.n	80066f0 <arm_mat_inverse_f32+0x2a4>
 80066d0:	edd3 6a00 	vldr	s13, [r3]
 80066d4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80066d8:	4618      	mov	r0, r3
 80066da:	3a02      	subs	r2, #2
 80066dc:	eca0 0a01 	vstmia	r0!, {s0}
 80066e0:	ed93 6a01 	vldr	s12, [r3, #4]
 80066e4:	eec6 0a27 	vdiv.f32	s1, s12, s15
 80066e8:	4603      	mov	r3, r0
 80066ea:	ece3 0a01 	vstmia	r3!, {s1}
 80066ee:	d1ef      	bne.n	80066d0 <arm_mat_inverse_f32+0x284>
 80066f0:	9901      	ldr	r1, [sp, #4]
 80066f2:	9c08      	ldr	r4, [sp, #32]
 80066f4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80066f8:	9903      	ldr	r1, [sp, #12]
 80066fa:	2000      	movs	r0, #0
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	4298      	cmp	r0, r3
 8006700:	f000 8090 	beq.w	8006824 <arm_mat_inverse_f32+0x3d8>
 8006704:	edd1 7a00 	vldr	s15, [r1]
 8006708:	f1b9 0f00 	cmp.w	r9, #0
 800670c:	d036      	beq.n	800677c <arm_mat_inverse_f32+0x330>
 800670e:	ed96 1a00 	vldr	s2, [r6]
 8006712:	eef0 1a67 	vmov.f32	s3, s15
 8006716:	ee47 1ac1 	vmls.f32	s3, s15, s2
 800671a:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 800671e:	460b      	mov	r3, r1
 8006720:	4652      	mov	r2, sl
 8006722:	46b3      	mov	fp, r6
 8006724:	f00a 0a01 	and.w	sl, sl, #1
 8006728:	ece3 1a01 	vstmia	r3!, {s3}
 800672c:	b322      	cbz	r2, 8006778 <arm_mat_inverse_f32+0x32c>
 800672e:	f1ba 0f00 	cmp.w	sl, #0
 8006732:	d00b      	beq.n	800674c <arm_mat_inverse_f32+0x300>
 8006734:	edd3 2a00 	vldr	s5, [r3]
 8006738:	ed96 3a01 	vldr	s6, [r6, #4]
 800673c:	ee47 2ac3 	vmls.f32	s5, s15, s6
 8006740:	3a01      	subs	r2, #1
 8006742:	f106 0b04 	add.w	fp, r6, #4
 8006746:	ece3 2a01 	vstmia	r3!, {s5}
 800674a:	d015      	beq.n	8006778 <arm_mat_inverse_f32+0x32c>
 800674c:	edd3 3a00 	vldr	s7, [r3]
 8006750:	ed9b 4a01 	vldr	s8, [fp, #4]
 8006754:	ee47 3ac4 	vmls.f32	s7, s15, s8
 8006758:	469a      	mov	sl, r3
 800675a:	ecea 3a01 	vstmia	sl!, {s7}
 800675e:	ed9b 5a02 	vldr	s10, [fp, #8]
 8006762:	edd3 4a01 	vldr	s9, [r3, #4]
 8006766:	ee47 4ac5 	vmls.f32	s9, s15, s10
 800676a:	4653      	mov	r3, sl
 800676c:	3a02      	subs	r2, #2
 800676e:	ece3 4a01 	vstmia	r3!, {s9}
 8006772:	f10b 0b08 	add.w	fp, fp, #8
 8006776:	d1e9      	bne.n	800674c <arm_mat_inverse_f32+0x300>
 8006778:	9b02      	ldr	r3, [sp, #8]
 800677a:	18c9      	adds	r1, r1, r3
 800677c:	edd4 5a00 	vldr	s11, [r4]
 8006780:	ed95 7a00 	vldr	s14, [r5]
 8006784:	ee47 5ac7 	vmls.f32	s11, s15, s14
 8006788:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 800678c:	4623      	mov	r3, r4
 800678e:	465a      	mov	r2, fp
 8006790:	f00b 0a01 	and.w	sl, fp, #1
 8006794:	ece3 5a01 	vstmia	r3!, {s11}
 8006798:	46ab      	mov	fp, r5
 800679a:	b322      	cbz	r2, 80067e6 <arm_mat_inverse_f32+0x39a>
 800679c:	f1ba 0f00 	cmp.w	sl, #0
 80067a0:	d00b      	beq.n	80067ba <arm_mat_inverse_f32+0x36e>
 80067a2:	ed93 0a00 	vldr	s0, [r3]
 80067a6:	edd5 6a01 	vldr	s13, [r5, #4]
 80067aa:	ee07 0ae6 	vmls.f32	s0, s15, s13
 80067ae:	3a01      	subs	r2, #1
 80067b0:	f105 0b04 	add.w	fp, r5, #4
 80067b4:	eca3 0a01 	vstmia	r3!, {s0}
 80067b8:	d015      	beq.n	80067e6 <arm_mat_inverse_f32+0x39a>
 80067ba:	ed93 6a00 	vldr	s12, [r3]
 80067be:	eddb 0a01 	vldr	s1, [fp, #4]
 80067c2:	ee07 6ae0 	vmls.f32	s12, s15, s1
 80067c6:	469a      	mov	sl, r3
 80067c8:	ecaa 6a01 	vstmia	sl!, {s12}
 80067cc:	eddb 1a02 	vldr	s3, [fp, #8]
 80067d0:	ed93 1a01 	vldr	s2, [r3, #4]
 80067d4:	ee07 1ae1 	vmls.f32	s2, s15, s3
 80067d8:	4653      	mov	r3, sl
 80067da:	3a02      	subs	r2, #2
 80067dc:	eca3 1a01 	vstmia	r3!, {s2}
 80067e0:	f10b 0b08 	add.w	fp, fp, #8
 80067e4:	d1e9      	bne.n	80067ba <arm_mat_inverse_f32+0x36e>
 80067e6:	4464      	add	r4, ip
 80067e8:	3001      	adds	r0, #1
 80067ea:	4287      	cmp	r7, r0
 80067ec:	4441      	add	r1, r8
 80067ee:	d185      	bne.n	80066fc <arm_mat_inverse_f32+0x2b0>
 80067f0:	9d03      	ldr	r5, [sp, #12]
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f6:	1d2a      	adds	r2, r5, #4
 80067f8:	1c58      	adds	r0, r3, #1
 80067fa:	9203      	str	r2, [sp, #12]
 80067fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067fe:	9a04      	ldr	r2, [sp, #16]
 8006800:	9001      	str	r0, [sp, #4]
 8006802:	1876      	adds	r6, r6, r1
 8006804:	18d0      	adds	r0, r2, r3
 8006806:	9905      	ldr	r1, [sp, #20]
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	9004      	str	r0, [sp, #16]
 800680c:	1e4a      	subs	r2, r1, #1
 800680e:	1f18      	subs	r0, r3, #4
 8006810:	f1b9 0901 	subs.w	r9, r9, #1
 8006814:	9d06      	ldr	r5, [sp, #24]
 8006816:	9205      	str	r2, [sp, #20]
 8006818:	9002      	str	r0, [sp, #8]
 800681a:	d079      	beq.n	8006910 <arm_mat_inverse_f32+0x4c4>
 800681c:	46b0      	mov	r8, r6
 800681e:	edd6 7a00 	vldr	s15, [r6]
 8006822:	e68e      	b.n	8006542 <arm_mat_inverse_f32+0xf6>
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	4464      	add	r4, ip
 8006828:	18c9      	adds	r1, r1, r3
 800682a:	e7dd      	b.n	80067e8 <arm_mat_inverse_f32+0x39c>
 800682c:	eef1 6a66 	vneg.f32	s13, s13
 8006830:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006838:	bfc8      	it	gt
 800683a:	eeb0 7a66 	vmovgt.f32	s14, s13
 800683e:	e694      	b.n	800656a <arm_mat_inverse_f32+0x11e>
 8006840:	00000000 	.word	0x00000000
 8006844:	f1b9 0f00 	cmp.w	r9, #0
 8006848:	d02e      	beq.n	80068a8 <arm_mat_inverse_f32+0x45c>
 800684a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	1931      	adds	r1, r6, r4
 8006850:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8006854:	f8d1 a000 	ldr.w	sl, [r1]
 8006858:	460a      	mov	r2, r1
 800685a:	4604      	mov	r4, r0
 800685c:	f843 ab04 	str.w	sl, [r3], #4
 8006860:	f000 0001 	and.w	r0, r0, #1
 8006864:	eca2 0a01 	vstmia	r2!, {s0}
 8006868:	b1f4      	cbz	r4, 80068a8 <arm_mat_inverse_f32+0x45c>
 800686a:	b138      	cbz	r0, 800687c <arm_mat_inverse_f32+0x430>
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	6849      	ldr	r1, [r1, #4]
 8006870:	3c01      	subs	r4, #1
 8006872:	f843 1b04 	str.w	r1, [r3], #4
 8006876:	f842 0b04 	str.w	r0, [r2], #4
 800687a:	d015      	beq.n	80068a8 <arm_mat_inverse_f32+0x45c>
 800687c:	f8d3 a000 	ldr.w	sl, [r3]
 8006880:	f8d2 b000 	ldr.w	fp, [r2]
 8006884:	4618      	mov	r0, r3
 8006886:	4611      	mov	r1, r2
 8006888:	f840 bb04 	str.w	fp, [r0], #4
 800688c:	f841 ab04 	str.w	sl, [r1], #4
 8006890:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006894:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006898:	4603      	mov	r3, r0
 800689a:	460a      	mov	r2, r1
 800689c:	3c02      	subs	r4, #2
 800689e:	f843 ab04 	str.w	sl, [r3], #4
 80068a2:	f842 bb04 	str.w	fp, [r2], #4
 80068a6:	d1e9      	bne.n	800687c <arm_mat_inverse_f32+0x430>
 80068a8:	eb05 020c 	add.w	r2, r5, ip
 80068ac:	1e78      	subs	r0, r7, #1
 80068ae:	6814      	ldr	r4, [r2, #0]
 80068b0:	f8d5 a000 	ldr.w	sl, [r5]
 80068b4:	9206      	str	r2, [sp, #24]
 80068b6:	462b      	mov	r3, r5
 80068b8:	4601      	mov	r1, r0
 80068ba:	f842 ab04 	str.w	sl, [r2], #4
 80068be:	f000 0001 	and.w	r0, r0, #1
 80068c2:	f843 4b04 	str.w	r4, [r3], #4
 80068c6:	b1f1      	cbz	r1, 8006906 <arm_mat_inverse_f32+0x4ba>
 80068c8:	b138      	cbz	r0, 80068da <arm_mat_inverse_f32+0x48e>
 80068ca:	6810      	ldr	r0, [r2, #0]
 80068cc:	681c      	ldr	r4, [r3, #0]
 80068ce:	3901      	subs	r1, #1
 80068d0:	f842 4b04 	str.w	r4, [r2], #4
 80068d4:	f843 0b04 	str.w	r0, [r3], #4
 80068d8:	d015      	beq.n	8006906 <arm_mat_inverse_f32+0x4ba>
 80068da:	f8d2 a000 	ldr.w	sl, [r2]
 80068de:	f8d3 b000 	ldr.w	fp, [r3]
 80068e2:	4614      	mov	r4, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f844 bb04 	str.w	fp, [r4], #4
 80068ea:	f840 ab04 	str.w	sl, [r0], #4
 80068ee:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80068f2:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80068f6:	4622      	mov	r2, r4
 80068f8:	4603      	mov	r3, r0
 80068fa:	3902      	subs	r1, #2
 80068fc:	f842 bb04 	str.w	fp, [r2], #4
 8006900:	f843 ab04 	str.w	sl, [r3], #4
 8006904:	d1e9      	bne.n	80068da <arm_mat_inverse_f32+0x48e>
 8006906:	2201      	movs	r2, #1
 8006908:	edd8 7a00 	vldr	s15, [r8]
 800690c:	9207      	str	r2, [sp, #28]
 800690e:	e6a1      	b.n	8006654 <arm_mat_inverse_f32+0x208>
 8006910:	9907      	ldr	r1, [sp, #28]
 8006912:	2901      	cmp	r1, #1
 8006914:	d004      	beq.n	8006920 <arm_mat_inverse_f32+0x4d4>
 8006916:	eef5 7a40 	vcmp.f32	s15, #0.0
 800691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691e:	d009      	beq.n	8006934 <arm_mat_inverse_f32+0x4e8>
 8006920:	2200      	movs	r2, #0
 8006922:	b250      	sxtb	r0, r2
 8006924:	b00c      	add	sp, #48	; 0x30
 8006926:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800692a:	4770      	bx	lr
 800692c:	eb05 010c 	add.w	r1, r5, ip
 8006930:	9106      	str	r1, [sp, #24]
 8006932:	e68f      	b.n	8006654 <arm_mat_inverse_f32+0x208>
 8006934:	22fb      	movs	r2, #251	; 0xfb
 8006936:	e7f4      	b.n	8006922 <arm_mat_inverse_f32+0x4d6>
 8006938:	22fd      	movs	r2, #253	; 0xfd
 800693a:	e7f2      	b.n	8006922 <arm_mat_inverse_f32+0x4d6>

0800693c <arm_mat_init_f32>:
 800693c:	b410      	push	{r4}
 800693e:	2400      	movs	r4, #0
 8006940:	f361 040f 	bfi	r4, r1, #0, #16
 8006944:	f362 441f 	bfi	r4, r2, #16, #16
 8006948:	6004      	str	r4, [r0, #0]
 800694a:	6043      	str	r3, [r0, #4]
 800694c:	bc10      	pop	{r4}
 800694e:	4770      	bx	lr

08006950 <arm_mat_add_f32>:
 8006950:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006954:	6803      	ldr	r3, [r0, #0]
 8006956:	680c      	ldr	r4, [r1, #0]
 8006958:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800695c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006960:	6857      	ldr	r7, [r2, #4]
 8006962:	42a3      	cmp	r3, r4
 8006964:	f040 80ea 	bne.w	8006b3c <arm_mat_add_f32+0x1ec>
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	4293      	cmp	r3, r2
 800696c:	f040 80e6 	bne.w	8006b3c <arm_mat_add_f32+0x1ec>
 8006970:	8841      	ldrh	r1, [r0, #2]
 8006972:	f8b0 9000 	ldrh.w	r9, [r0]
 8006976:	fb09 f901 	mul.w	r9, r9, r1
 800697a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 800697e:	f000 80a1 	beq.w	8006ac4 <arm_mat_add_f32+0x174>
 8006982:	eddc 6a01 	vldr	s13, [ip, #4]
 8006986:	edd8 7a01 	vldr	s15, [r8, #4]
 800698a:	ed9c 6a00 	vldr	s12, [ip]
 800698e:	ed98 7a00 	vldr	s14, [r8]
 8006992:	ee36 0aa7 	vadd.f32	s0, s13, s15
 8006996:	ee76 0a07 	vadd.f32	s1, s12, s14
 800699a:	ed9c 1a02 	vldr	s2, [ip, #8]
 800699e:	edd8 1a02 	vldr	s3, [r8, #8]
 80069a2:	edc7 0a00 	vstr	s1, [r7]
 80069a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80069aa:	ed9c 2a03 	vldr	s4, [ip, #12]
 80069ae:	edd8 2a03 	vldr	s5, [r8, #12]
 80069b2:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80069b6:	ee32 3a22 	vadd.f32	s6, s4, s5
 80069ba:	ee71 3a21 	vadd.f32	s7, s2, s3
 80069be:	4606      	mov	r6, r0
 80069c0:	edc7 3a02 	vstr	s7, [r7, #8]
 80069c4:	f000 0001 	and.w	r0, r0, #1
 80069c8:	ed87 3a03 	vstr	s6, [r7, #12]
 80069cc:	f10c 0110 	add.w	r1, ip, #16
 80069d0:	f108 0210 	add.w	r2, r8, #16
 80069d4:	f107 0310 	add.w	r3, r7, #16
 80069d8:	2e00      	cmp	r6, #0
 80069da:	d06e      	beq.n	8006aba <arm_mat_add_f32+0x16a>
 80069dc:	b320      	cbz	r0, 8006a28 <arm_mat_add_f32+0xd8>
 80069de:	ed91 4a01 	vldr	s8, [r1, #4]
 80069e2:	edd2 4a01 	vldr	s9, [r2, #4]
 80069e6:	ed91 5a00 	vldr	s10, [r1]
 80069ea:	edd2 5a00 	vldr	s11, [r2]
 80069ee:	ee74 7a24 	vadd.f32	s15, s8, s9
 80069f2:	ee75 6a25 	vadd.f32	s13, s10, s11
 80069f6:	ed91 6a02 	vldr	s12, [r1, #8]
 80069fa:	ed92 7a02 	vldr	s14, [r2, #8]
 80069fe:	edc3 6a00 	vstr	s13, [r3]
 8006a02:	edc3 7a01 	vstr	s15, [r3, #4]
 8006a06:	ed91 0a03 	vldr	s0, [r1, #12]
 8006a0a:	edd2 0a03 	vldr	s1, [r2, #12]
 8006a0e:	ee36 1a07 	vadd.f32	s2, s12, s14
 8006a12:	ee70 1a20 	vadd.f32	s3, s0, s1
 8006a16:	ed83 1a02 	vstr	s2, [r3, #8]
 8006a1a:	edc3 1a03 	vstr	s3, [r3, #12]
 8006a1e:	3110      	adds	r1, #16
 8006a20:	3210      	adds	r2, #16
 8006a22:	3310      	adds	r3, #16
 8006a24:	3e01      	subs	r6, #1
 8006a26:	d048      	beq.n	8006aba <arm_mat_add_f32+0x16a>
 8006a28:	ed91 2a01 	vldr	s4, [r1, #4]
 8006a2c:	edd2 2a01 	vldr	s5, [r2, #4]
 8006a30:	ed91 3a00 	vldr	s6, [r1]
 8006a34:	edd2 3a00 	vldr	s7, [r2]
 8006a38:	ee32 4a22 	vadd.f32	s8, s4, s5
 8006a3c:	ee73 4a23 	vadd.f32	s9, s6, s7
 8006a40:	ed91 5a02 	vldr	s10, [r1, #8]
 8006a44:	edd2 5a02 	vldr	s11, [r2, #8]
 8006a48:	edc3 4a00 	vstr	s9, [r3]
 8006a4c:	ed83 4a01 	vstr	s8, [r3, #4]
 8006a50:	edd1 6a03 	vldr	s13, [r1, #12]
 8006a54:	edd2 7a03 	vldr	s15, [r2, #12]
 8006a58:	ee35 6a25 	vadd.f32	s12, s10, s11
 8006a5c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006a60:	ed83 6a02 	vstr	s12, [r3, #8]
 8006a64:	ed83 7a03 	vstr	s14, [r3, #12]
 8006a68:	ed91 0a04 	vldr	s0, [r1, #16]
 8006a6c:	edd2 0a04 	vldr	s1, [r2, #16]
 8006a70:	ed91 1a05 	vldr	s2, [r1, #20]
 8006a74:	edd2 1a05 	vldr	s3, [r2, #20]
 8006a78:	ee30 2a20 	vadd.f32	s4, s0, s1
 8006a7c:	ee71 2a21 	vadd.f32	s5, s2, s3
 8006a80:	ed91 3a06 	vldr	s6, [r1, #24]
 8006a84:	edd2 3a06 	vldr	s7, [r2, #24]
 8006a88:	ed83 2a04 	vstr	s4, [r3, #16]
 8006a8c:	edc3 2a05 	vstr	s5, [r3, #20]
 8006a90:	ed91 4a07 	vldr	s8, [r1, #28]
 8006a94:	edd2 4a07 	vldr	s9, [r2, #28]
 8006a98:	ee33 5a23 	vadd.f32	s10, s6, s7
 8006a9c:	ee74 5a24 	vadd.f32	s11, s8, s9
 8006aa0:	f101 0510 	add.w	r5, r1, #16
 8006aa4:	f102 0410 	add.w	r4, r2, #16
 8006aa8:	ed83 5a06 	vstr	s10, [r3, #24]
 8006aac:	edc3 5a07 	vstr	s11, [r3, #28]
 8006ab0:	3120      	adds	r1, #32
 8006ab2:	3220      	adds	r2, #32
 8006ab4:	3320      	adds	r3, #32
 8006ab6:	3e02      	subs	r6, #2
 8006ab8:	d1b6      	bne.n	8006a28 <arm_mat_add_f32+0xd8>
 8006aba:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8006abe:	4484      	add	ip, r0
 8006ac0:	4480      	add	r8, r0
 8006ac2:	183f      	adds	r7, r7, r0
 8006ac4:	f019 0903 	ands.w	r9, r9, #3
 8006ac8:	d033      	beq.n	8006b32 <arm_mat_add_f32+0x1e2>
 8006aca:	eddc 6a00 	vldr	s13, [ip]
 8006ace:	edd8 7a00 	vldr	s15, [r8]
 8006ad2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006ad6:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8006ada:	463b      	mov	r3, r7
 8006adc:	464a      	mov	r2, r9
 8006ade:	4664      	mov	r4, ip
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f009 0101 	and.w	r1, r9, #1
 8006ae6:	eca3 6a01 	vstmia	r3!, {s12}
 8006aea:	b312      	cbz	r2, 8006b32 <arm_mat_add_f32+0x1e2>
 8006aec:	b159      	cbz	r1, 8006b06 <arm_mat_add_f32+0x1b6>
 8006aee:	3404      	adds	r4, #4
 8006af0:	3004      	adds	r0, #4
 8006af2:	ed94 7a00 	vldr	s14, [r4]
 8006af6:	ed90 0a00 	vldr	s0, [r0]
 8006afa:	ee77 0a00 	vadd.f32	s1, s14, s0
 8006afe:	3a01      	subs	r2, #1
 8006b00:	ece3 0a01 	vstmia	r3!, {s1}
 8006b04:	d015      	beq.n	8006b32 <arm_mat_add_f32+0x1e2>
 8006b06:	ed94 1a01 	vldr	s2, [r4, #4]
 8006b0a:	edd0 1a01 	vldr	s3, [r0, #4]
 8006b0e:	ee31 2a21 	vadd.f32	s4, s2, s3
 8006b12:	4619      	mov	r1, r3
 8006b14:	eca1 2a01 	vstmia	r1!, {s4}
 8006b18:	edd4 2a02 	vldr	s5, [r4, #8]
 8006b1c:	ed90 3a02 	vldr	s6, [r0, #8]
 8006b20:	ee72 3a83 	vadd.f32	s7, s5, s6
 8006b24:	3408      	adds	r4, #8
 8006b26:	edc3 3a01 	vstr	s7, [r3, #4]
 8006b2a:	3008      	adds	r0, #8
 8006b2c:	1d0b      	adds	r3, r1, #4
 8006b2e:	3a02      	subs	r2, #2
 8006b30:	d1e9      	bne.n	8006b06 <arm_mat_add_f32+0x1b6>
 8006b32:	2300      	movs	r3, #0
 8006b34:	b258      	sxtb	r0, r3
 8006b36:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006b3a:	4770      	bx	lr
 8006b3c:	23fd      	movs	r3, #253	; 0xfd
 8006b3e:	e7f9      	b.n	8006b34 <arm_mat_add_f32+0x1e4>

08006b40 <__errno>:
 8006b40:	4b01      	ldr	r3, [pc, #4]	; (8006b48 <__errno+0x8>)
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	2000000c 	.word	0x2000000c

08006b4c <__libc_init_array>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	4e0d      	ldr	r6, [pc, #52]	; (8006b84 <__libc_init_array+0x38>)
 8006b50:	4c0d      	ldr	r4, [pc, #52]	; (8006b88 <__libc_init_array+0x3c>)
 8006b52:	1ba4      	subs	r4, r4, r6
 8006b54:	10a4      	asrs	r4, r4, #2
 8006b56:	2500      	movs	r5, #0
 8006b58:	42a5      	cmp	r5, r4
 8006b5a:	d109      	bne.n	8006b70 <__libc_init_array+0x24>
 8006b5c:	4e0b      	ldr	r6, [pc, #44]	; (8006b8c <__libc_init_array+0x40>)
 8006b5e:	4c0c      	ldr	r4, [pc, #48]	; (8006b90 <__libc_init_array+0x44>)
 8006b60:	f000 ff04 	bl	800796c <_init>
 8006b64:	1ba4      	subs	r4, r4, r6
 8006b66:	10a4      	asrs	r4, r4, #2
 8006b68:	2500      	movs	r5, #0
 8006b6a:	42a5      	cmp	r5, r4
 8006b6c:	d105      	bne.n	8006b7a <__libc_init_array+0x2e>
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}
 8006b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b74:	4798      	blx	r3
 8006b76:	3501      	adds	r5, #1
 8006b78:	e7ee      	b.n	8006b58 <__libc_init_array+0xc>
 8006b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b7e:	4798      	blx	r3
 8006b80:	3501      	adds	r5, #1
 8006b82:	e7f2      	b.n	8006b6a <__libc_init_array+0x1e>
 8006b84:	08007a54 	.word	0x08007a54
 8006b88:	08007a54 	.word	0x08007a54
 8006b8c:	08007a54 	.word	0x08007a54
 8006b90:	08007a58 	.word	0x08007a58

08006b94 <memset>:
 8006b94:	4402      	add	r2, r0
 8006b96:	4603      	mov	r3, r0
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d100      	bne.n	8006b9e <memset+0xa>
 8006b9c:	4770      	bx	lr
 8006b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba2:	e7f9      	b.n	8006b98 <memset+0x4>

08006ba4 <iprintf>:
 8006ba4:	b40f      	push	{r0, r1, r2, r3}
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <iprintf+0x2c>)
 8006ba8:	b513      	push	{r0, r1, r4, lr}
 8006baa:	681c      	ldr	r4, [r3, #0]
 8006bac:	b124      	cbz	r4, 8006bb8 <iprintf+0x14>
 8006bae:	69a3      	ldr	r3, [r4, #24]
 8006bb0:	b913      	cbnz	r3, 8006bb8 <iprintf+0x14>
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f84e 	bl	8006c54 <__sinit>
 8006bb8:	ab05      	add	r3, sp, #20
 8006bba:	9a04      	ldr	r2, [sp, #16]
 8006bbc:	68a1      	ldr	r1, [r4, #8]
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f955 	bl	8006e70 <_vfiprintf_r>
 8006bc6:	b002      	add	sp, #8
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	b004      	add	sp, #16
 8006bce:	4770      	bx	lr
 8006bd0:	2000000c 	.word	0x2000000c

08006bd4 <std>:
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	4604      	mov	r4, r0
 8006bda:	e9c0 3300 	strd	r3, r3, [r0]
 8006bde:	6083      	str	r3, [r0, #8]
 8006be0:	8181      	strh	r1, [r0, #12]
 8006be2:	6643      	str	r3, [r0, #100]	; 0x64
 8006be4:	81c2      	strh	r2, [r0, #14]
 8006be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bea:	6183      	str	r3, [r0, #24]
 8006bec:	4619      	mov	r1, r3
 8006bee:	2208      	movs	r2, #8
 8006bf0:	305c      	adds	r0, #92	; 0x5c
 8006bf2:	f7ff ffcf 	bl	8006b94 <memset>
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <std+0x38>)
 8006bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <std+0x3c>)
 8006bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <std+0x40>)
 8006c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x44>)
 8006c04:	6224      	str	r4, [r4, #32]
 8006c06:	6323      	str	r3, [r4, #48]	; 0x30
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	bf00      	nop
 8006c0c:	080073cd 	.word	0x080073cd
 8006c10:	080073ef 	.word	0x080073ef
 8006c14:	08007427 	.word	0x08007427
 8006c18:	0800744b 	.word	0x0800744b

08006c1c <_cleanup_r>:
 8006c1c:	4901      	ldr	r1, [pc, #4]	; (8006c24 <_cleanup_r+0x8>)
 8006c1e:	f000 b885 	b.w	8006d2c <_fwalk_reent>
 8006c22:	bf00      	nop
 8006c24:	08007725 	.word	0x08007725

08006c28 <__sfmoreglue>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	1e4a      	subs	r2, r1, #1
 8006c2c:	2568      	movs	r5, #104	; 0x68
 8006c2e:	4355      	muls	r5, r2
 8006c30:	460e      	mov	r6, r1
 8006c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c36:	f000 f897 	bl	8006d68 <_malloc_r>
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	b140      	cbz	r0, 8006c50 <__sfmoreglue+0x28>
 8006c3e:	2100      	movs	r1, #0
 8006c40:	e9c0 1600 	strd	r1, r6, [r0]
 8006c44:	300c      	adds	r0, #12
 8006c46:	60a0      	str	r0, [r4, #8]
 8006c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c4c:	f7ff ffa2 	bl	8006b94 <memset>
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd70      	pop	{r4, r5, r6, pc}

08006c54 <__sinit>:
 8006c54:	6983      	ldr	r3, [r0, #24]
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	bb33      	cbnz	r3, 8006caa <__sinit+0x56>
 8006c5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006c60:	6503      	str	r3, [r0, #80]	; 0x50
 8006c62:	4b12      	ldr	r3, [pc, #72]	; (8006cac <__sinit+0x58>)
 8006c64:	4a12      	ldr	r2, [pc, #72]	; (8006cb0 <__sinit+0x5c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6282      	str	r2, [r0, #40]	; 0x28
 8006c6a:	4298      	cmp	r0, r3
 8006c6c:	bf04      	itt	eq
 8006c6e:	2301      	moveq	r3, #1
 8006c70:	6183      	streq	r3, [r0, #24]
 8006c72:	f000 f81f 	bl	8006cb4 <__sfp>
 8006c76:	6060      	str	r0, [r4, #4]
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 f81b 	bl	8006cb4 <__sfp>
 8006c7e:	60a0      	str	r0, [r4, #8]
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f817 	bl	8006cb4 <__sfp>
 8006c86:	2200      	movs	r2, #0
 8006c88:	60e0      	str	r0, [r4, #12]
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	6860      	ldr	r0, [r4, #4]
 8006c8e:	f7ff ffa1 	bl	8006bd4 <std>
 8006c92:	2201      	movs	r2, #1
 8006c94:	2109      	movs	r1, #9
 8006c96:	68a0      	ldr	r0, [r4, #8]
 8006c98:	f7ff ff9c 	bl	8006bd4 <std>
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	2112      	movs	r1, #18
 8006ca0:	68e0      	ldr	r0, [r4, #12]
 8006ca2:	f7ff ff97 	bl	8006bd4 <std>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	61a3      	str	r3, [r4, #24]
 8006caa:	bd10      	pop	{r4, pc}
 8006cac:	080079b4 	.word	0x080079b4
 8006cb0:	08006c1d 	.word	0x08006c1d

08006cb4 <__sfp>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <__sfp+0x70>)
 8006cb8:	681e      	ldr	r6, [r3, #0]
 8006cba:	69b3      	ldr	r3, [r6, #24]
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	b913      	cbnz	r3, 8006cc6 <__sfp+0x12>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7ff ffc7 	bl	8006c54 <__sinit>
 8006cc6:	3648      	adds	r6, #72	; 0x48
 8006cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	d503      	bpl.n	8006cd8 <__sfp+0x24>
 8006cd0:	6833      	ldr	r3, [r6, #0]
 8006cd2:	b133      	cbz	r3, 8006ce2 <__sfp+0x2e>
 8006cd4:	6836      	ldr	r6, [r6, #0]
 8006cd6:	e7f7      	b.n	8006cc8 <__sfp+0x14>
 8006cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cdc:	b16d      	cbz	r5, 8006cfa <__sfp+0x46>
 8006cde:	3468      	adds	r4, #104	; 0x68
 8006ce0:	e7f4      	b.n	8006ccc <__sfp+0x18>
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	f7ff ff9f 	bl	8006c28 <__sfmoreglue>
 8006cea:	6030      	str	r0, [r6, #0]
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d1f1      	bne.n	8006cd4 <__sfp+0x20>
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <__sfp+0x74>)
 8006cfc:	6665      	str	r5, [r4, #100]	; 0x64
 8006cfe:	e9c4 5500 	strd	r5, r5, [r4]
 8006d02:	60a5      	str	r5, [r4, #8]
 8006d04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006d08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d14:	f7ff ff3e 	bl	8006b94 <memset>
 8006d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d20:	e7e9      	b.n	8006cf6 <__sfp+0x42>
 8006d22:	bf00      	nop
 8006d24:	080079b4 	.word	0x080079b4
 8006d28:	ffff0001 	.word	0xffff0001

08006d2c <_fwalk_reent>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	4680      	mov	r8, r0
 8006d32:	4689      	mov	r9, r1
 8006d34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d38:	2600      	movs	r6, #0
 8006d3a:	b914      	cbnz	r4, 8006d42 <_fwalk_reent+0x16>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006d46:	3f01      	subs	r7, #1
 8006d48:	d501      	bpl.n	8006d4e <_fwalk_reent+0x22>
 8006d4a:	6824      	ldr	r4, [r4, #0]
 8006d4c:	e7f5      	b.n	8006d3a <_fwalk_reent+0xe>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d907      	bls.n	8006d64 <_fwalk_reent+0x38>
 8006d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	d003      	beq.n	8006d64 <_fwalk_reent+0x38>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4640      	mov	r0, r8
 8006d60:	47c8      	blx	r9
 8006d62:	4306      	orrs	r6, r0
 8006d64:	3568      	adds	r5, #104	; 0x68
 8006d66:	e7ee      	b.n	8006d46 <_fwalk_reent+0x1a>

08006d68 <_malloc_r>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	1ccd      	adds	r5, r1, #3
 8006d6c:	f025 0503 	bic.w	r5, r5, #3
 8006d70:	3508      	adds	r5, #8
 8006d72:	2d0c      	cmp	r5, #12
 8006d74:	bf38      	it	cc
 8006d76:	250c      	movcc	r5, #12
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	db01      	blt.n	8006d82 <_malloc_r+0x1a>
 8006d7e:	42a9      	cmp	r1, r5
 8006d80:	d903      	bls.n	8006d8a <_malloc_r+0x22>
 8006d82:	230c      	movs	r3, #12
 8006d84:	6033      	str	r3, [r6, #0]
 8006d86:	2000      	movs	r0, #0
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
 8006d8a:	f000 fd6b 	bl	8007864 <__malloc_lock>
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <_malloc_r+0xac>)
 8006d90:	6814      	ldr	r4, [r2, #0]
 8006d92:	4621      	mov	r1, r4
 8006d94:	b991      	cbnz	r1, 8006dbc <_malloc_r+0x54>
 8006d96:	4c20      	ldr	r4, [pc, #128]	; (8006e18 <_malloc_r+0xb0>)
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	b91b      	cbnz	r3, 8006da4 <_malloc_r+0x3c>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 fb05 	bl	80073ac <_sbrk_r>
 8006da2:	6020      	str	r0, [r4, #0]
 8006da4:	4629      	mov	r1, r5
 8006da6:	4630      	mov	r0, r6
 8006da8:	f000 fb00 	bl	80073ac <_sbrk_r>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d124      	bne.n	8006dfa <_malloc_r+0x92>
 8006db0:	230c      	movs	r3, #12
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	4630      	mov	r0, r6
 8006db6:	f000 fd56 	bl	8007866 <__malloc_unlock>
 8006dba:	e7e4      	b.n	8006d86 <_malloc_r+0x1e>
 8006dbc:	680b      	ldr	r3, [r1, #0]
 8006dbe:	1b5b      	subs	r3, r3, r5
 8006dc0:	d418      	bmi.n	8006df4 <_malloc_r+0x8c>
 8006dc2:	2b0b      	cmp	r3, #11
 8006dc4:	d90f      	bls.n	8006de6 <_malloc_r+0x7e>
 8006dc6:	600b      	str	r3, [r1, #0]
 8006dc8:	50cd      	str	r5, [r1, r3]
 8006dca:	18cc      	adds	r4, r1, r3
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 fd4a 	bl	8007866 <__malloc_unlock>
 8006dd2:	f104 000b 	add.w	r0, r4, #11
 8006dd6:	1d23      	adds	r3, r4, #4
 8006dd8:	f020 0007 	bic.w	r0, r0, #7
 8006ddc:	1ac3      	subs	r3, r0, r3
 8006dde:	d0d3      	beq.n	8006d88 <_malloc_r+0x20>
 8006de0:	425a      	negs	r2, r3
 8006de2:	50e2      	str	r2, [r4, r3]
 8006de4:	e7d0      	b.n	8006d88 <_malloc_r+0x20>
 8006de6:	428c      	cmp	r4, r1
 8006de8:	684b      	ldr	r3, [r1, #4]
 8006dea:	bf16      	itet	ne
 8006dec:	6063      	strne	r3, [r4, #4]
 8006dee:	6013      	streq	r3, [r2, #0]
 8006df0:	460c      	movne	r4, r1
 8006df2:	e7eb      	b.n	8006dcc <_malloc_r+0x64>
 8006df4:	460c      	mov	r4, r1
 8006df6:	6849      	ldr	r1, [r1, #4]
 8006df8:	e7cc      	b.n	8006d94 <_malloc_r+0x2c>
 8006dfa:	1cc4      	adds	r4, r0, #3
 8006dfc:	f024 0403 	bic.w	r4, r4, #3
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d005      	beq.n	8006e10 <_malloc_r+0xa8>
 8006e04:	1a21      	subs	r1, r4, r0
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 fad0 	bl	80073ac <_sbrk_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d0cf      	beq.n	8006db0 <_malloc_r+0x48>
 8006e10:	6025      	str	r5, [r4, #0]
 8006e12:	e7db      	b.n	8006dcc <_malloc_r+0x64>
 8006e14:	20000094 	.word	0x20000094
 8006e18:	20000098 	.word	0x20000098

08006e1c <__sfputc_r>:
 8006e1c:	6893      	ldr	r3, [r2, #8]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	b410      	push	{r4}
 8006e24:	6093      	str	r3, [r2, #8]
 8006e26:	da08      	bge.n	8006e3a <__sfputc_r+0x1e>
 8006e28:	6994      	ldr	r4, [r2, #24]
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	db01      	blt.n	8006e32 <__sfputc_r+0x16>
 8006e2e:	290a      	cmp	r1, #10
 8006e30:	d103      	bne.n	8006e3a <__sfputc_r+0x1e>
 8006e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e36:	f000 bb0d 	b.w	8007454 <__swbuf_r>
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	1c58      	adds	r0, r3, #1
 8006e3e:	6010      	str	r0, [r2, #0]
 8006e40:	7019      	strb	r1, [r3, #0]
 8006e42:	4608      	mov	r0, r1
 8006e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <__sfputs_r>:
 8006e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	4614      	mov	r4, r2
 8006e52:	18d5      	adds	r5, r2, r3
 8006e54:	42ac      	cmp	r4, r5
 8006e56:	d101      	bne.n	8006e5c <__sfputs_r+0x12>
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e007      	b.n	8006e6c <__sfputs_r+0x22>
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff ffda 	bl	8006e1c <__sfputc_r>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d1f3      	bne.n	8006e54 <__sfputs_r+0xa>
 8006e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e70 <_vfiprintf_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	b09d      	sub	sp, #116	; 0x74
 8006e78:	4617      	mov	r7, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	b118      	cbz	r0, 8006e88 <_vfiprintf_r+0x18>
 8006e80:	6983      	ldr	r3, [r0, #24]
 8006e82:	b90b      	cbnz	r3, 8006e88 <_vfiprintf_r+0x18>
 8006e84:	f7ff fee6 	bl	8006c54 <__sinit>
 8006e88:	4b7c      	ldr	r3, [pc, #496]	; (800707c <_vfiprintf_r+0x20c>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d158      	bne.n	8006f40 <_vfiprintf_r+0xd0>
 8006e8e:	6874      	ldr	r4, [r6, #4]
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	0718      	lsls	r0, r3, #28
 8006e94:	d55e      	bpl.n	8006f54 <_vfiprintf_r+0xe4>
 8006e96:	6923      	ldr	r3, [r4, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05b      	beq.n	8006f54 <_vfiprintf_r+0xe4>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea6:	2330      	movs	r3, #48	; 0x30
 8006ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eac:	9503      	str	r5, [sp, #12]
 8006eae:	f04f 0b01 	mov.w	fp, #1
 8006eb2:	46b8      	mov	r8, r7
 8006eb4:	4645      	mov	r5, r8
 8006eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006eba:	b10b      	cbz	r3, 8006ec0 <_vfiprintf_r+0x50>
 8006ebc:	2b25      	cmp	r3, #37	; 0x25
 8006ebe:	d154      	bne.n	8006f6a <_vfiprintf_r+0xfa>
 8006ec0:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ec4:	d00b      	beq.n	8006ede <_vfiprintf_r+0x6e>
 8006ec6:	4653      	mov	r3, sl
 8006ec8:	463a      	mov	r2, r7
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff ffbc 	bl	8006e4a <__sfputs_r>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f000 80c2 	beq.w	800705c <_vfiprintf_r+0x1ec>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	4453      	add	r3, sl
 8006edc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ede:	f898 3000 	ldrb.w	r3, [r8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 80ba 	beq.w	800705c <_vfiprintf_r+0x1ec>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef2:	9304      	str	r3, [sp, #16]
 8006ef4:	9307      	str	r3, [sp, #28]
 8006ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006efa:	931a      	str	r3, [sp, #104]	; 0x68
 8006efc:	46a8      	mov	r8, r5
 8006efe:	2205      	movs	r2, #5
 8006f00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006f04:	485e      	ldr	r0, [pc, #376]	; (8007080 <_vfiprintf_r+0x210>)
 8006f06:	f7f9 f983 	bl	8000210 <memchr>
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	bb78      	cbnz	r0, 8006f6e <_vfiprintf_r+0xfe>
 8006f0e:	06d9      	lsls	r1, r3, #27
 8006f10:	bf44      	itt	mi
 8006f12:	2220      	movmi	r2, #32
 8006f14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f18:	071a      	lsls	r2, r3, #28
 8006f1a:	bf44      	itt	mi
 8006f1c:	222b      	movmi	r2, #43	; 0x2b
 8006f1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f22:	782a      	ldrb	r2, [r5, #0]
 8006f24:	2a2a      	cmp	r2, #42	; 0x2a
 8006f26:	d02a      	beq.n	8006f7e <_vfiprintf_r+0x10e>
 8006f28:	9a07      	ldr	r2, [sp, #28]
 8006f2a:	46a8      	mov	r8, r5
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	250a      	movs	r5, #10
 8006f30:	4641      	mov	r1, r8
 8006f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f36:	3b30      	subs	r3, #48	; 0x30
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d969      	bls.n	8007010 <_vfiprintf_r+0x1a0>
 8006f3c:	b360      	cbz	r0, 8006f98 <_vfiprintf_r+0x128>
 8006f3e:	e024      	b.n	8006f8a <_vfiprintf_r+0x11a>
 8006f40:	4b50      	ldr	r3, [pc, #320]	; (8007084 <_vfiprintf_r+0x214>)
 8006f42:	429c      	cmp	r4, r3
 8006f44:	d101      	bne.n	8006f4a <_vfiprintf_r+0xda>
 8006f46:	68b4      	ldr	r4, [r6, #8]
 8006f48:	e7a2      	b.n	8006e90 <_vfiprintf_r+0x20>
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	; (8007088 <_vfiprintf_r+0x218>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	bf08      	it	eq
 8006f50:	68f4      	ldreq	r4, [r6, #12]
 8006f52:	e79d      	b.n	8006e90 <_vfiprintf_r+0x20>
 8006f54:	4621      	mov	r1, r4
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 fae0 	bl	800751c <__swsetup_r>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d09d      	beq.n	8006e9c <_vfiprintf_r+0x2c>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f64:	b01d      	add	sp, #116	; 0x74
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6a:	46a8      	mov	r8, r5
 8006f6c:	e7a2      	b.n	8006eb4 <_vfiprintf_r+0x44>
 8006f6e:	4a44      	ldr	r2, [pc, #272]	; (8007080 <_vfiprintf_r+0x210>)
 8006f70:	1a80      	subs	r0, r0, r2
 8006f72:	fa0b f000 	lsl.w	r0, fp, r0
 8006f76:	4318      	orrs	r0, r3
 8006f78:	9004      	str	r0, [sp, #16]
 8006f7a:	4645      	mov	r5, r8
 8006f7c:	e7be      	b.n	8006efc <_vfiprintf_r+0x8c>
 8006f7e:	9a03      	ldr	r2, [sp, #12]
 8006f80:	1d11      	adds	r1, r2, #4
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	9103      	str	r1, [sp, #12]
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	db01      	blt.n	8006f8e <_vfiprintf_r+0x11e>
 8006f8a:	9207      	str	r2, [sp, #28]
 8006f8c:	e004      	b.n	8006f98 <_vfiprintf_r+0x128>
 8006f8e:	4252      	negs	r2, r2
 8006f90:	f043 0302 	orr.w	r3, r3, #2
 8006f94:	9207      	str	r2, [sp, #28]
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	f898 3000 	ldrb.w	r3, [r8]
 8006f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f9e:	d10e      	bne.n	8006fbe <_vfiprintf_r+0x14e>
 8006fa0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa6:	d138      	bne.n	800701a <_vfiprintf_r+0x1aa>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	9203      	str	r2, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bfb8      	it	lt
 8006fb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fb8:	f108 0802 	add.w	r8, r8, #2
 8006fbc:	9305      	str	r3, [sp, #20]
 8006fbe:	4d33      	ldr	r5, [pc, #204]	; (800708c <_vfiprintf_r+0x21c>)
 8006fc0:	f898 1000 	ldrb.w	r1, [r8]
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7f9 f922 	bl	8000210 <memchr>
 8006fcc:	b140      	cbz	r0, 8006fe0 <_vfiprintf_r+0x170>
 8006fce:	2340      	movs	r3, #64	; 0x40
 8006fd0:	1b40      	subs	r0, r0, r5
 8006fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	4303      	orrs	r3, r0
 8006fda:	f108 0801 	add.w	r8, r8, #1
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	f898 1000 	ldrb.w	r1, [r8]
 8006fe4:	482a      	ldr	r0, [pc, #168]	; (8007090 <_vfiprintf_r+0x220>)
 8006fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fea:	2206      	movs	r2, #6
 8006fec:	f108 0701 	add.w	r7, r8, #1
 8006ff0:	f7f9 f90e 	bl	8000210 <memchr>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d037      	beq.n	8007068 <_vfiprintf_r+0x1f8>
 8006ff8:	4b26      	ldr	r3, [pc, #152]	; (8007094 <_vfiprintf_r+0x224>)
 8006ffa:	bb1b      	cbnz	r3, 8007044 <_vfiprintf_r+0x1d4>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	3307      	adds	r3, #7
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	3308      	adds	r3, #8
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700a:	444b      	add	r3, r9
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	e750      	b.n	8006eb2 <_vfiprintf_r+0x42>
 8007010:	fb05 3202 	mla	r2, r5, r2, r3
 8007014:	2001      	movs	r0, #1
 8007016:	4688      	mov	r8, r1
 8007018:	e78a      	b.n	8006f30 <_vfiprintf_r+0xc0>
 800701a:	2300      	movs	r3, #0
 800701c:	f108 0801 	add.w	r8, r8, #1
 8007020:	9305      	str	r3, [sp, #20]
 8007022:	4619      	mov	r1, r3
 8007024:	250a      	movs	r5, #10
 8007026:	4640      	mov	r0, r8
 8007028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800702c:	3a30      	subs	r2, #48	; 0x30
 800702e:	2a09      	cmp	r2, #9
 8007030:	d903      	bls.n	800703a <_vfiprintf_r+0x1ca>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0c3      	beq.n	8006fbe <_vfiprintf_r+0x14e>
 8007036:	9105      	str	r1, [sp, #20]
 8007038:	e7c1      	b.n	8006fbe <_vfiprintf_r+0x14e>
 800703a:	fb05 2101 	mla	r1, r5, r1, r2
 800703e:	2301      	movs	r3, #1
 8007040:	4680      	mov	r8, r0
 8007042:	e7f0      	b.n	8007026 <_vfiprintf_r+0x1b6>
 8007044:	ab03      	add	r3, sp, #12
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4622      	mov	r2, r4
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <_vfiprintf_r+0x228>)
 800704c:	a904      	add	r1, sp, #16
 800704e:	4630      	mov	r0, r6
 8007050:	f3af 8000 	nop.w
 8007054:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007058:	4681      	mov	r9, r0
 800705a:	d1d5      	bne.n	8007008 <_vfiprintf_r+0x198>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	065b      	lsls	r3, r3, #25
 8007060:	f53f af7e 	bmi.w	8006f60 <_vfiprintf_r+0xf0>
 8007064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007066:	e77d      	b.n	8006f64 <_vfiprintf_r+0xf4>
 8007068:	ab03      	add	r3, sp, #12
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4622      	mov	r2, r4
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <_vfiprintf_r+0x228>)
 8007070:	a904      	add	r1, sp, #16
 8007072:	4630      	mov	r0, r6
 8007074:	f000 f888 	bl	8007188 <_printf_i>
 8007078:	e7ec      	b.n	8007054 <_vfiprintf_r+0x1e4>
 800707a:	bf00      	nop
 800707c:	080079d8 	.word	0x080079d8
 8007080:	08007a18 	.word	0x08007a18
 8007084:	080079f8 	.word	0x080079f8
 8007088:	080079b8 	.word	0x080079b8
 800708c:	08007a1e 	.word	0x08007a1e
 8007090:	08007a22 	.word	0x08007a22
 8007094:	00000000 	.word	0x00000000
 8007098:	08006e4b 	.word	0x08006e4b

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4691      	mov	r9, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfb8      	it	lt
 80070b0:	4613      	movlt	r3, r2
 80070b2:	f8c9 3000 	str.w	r3, [r9]
 80070b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070ba:	4606      	mov	r6, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	b112      	cbz	r2, 80070c6 <_printf_common+0x2a>
 80070c0:	3301      	adds	r3, #1
 80070c2:	f8c9 3000 	str.w	r3, [r9]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	0699      	lsls	r1, r3, #26
 80070ca:	bf42      	ittt	mi
 80070cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070d0:	3302      	addmi	r3, #2
 80070d2:	f8c9 3000 	strmi.w	r3, [r9]
 80070d6:	6825      	ldr	r5, [r4, #0]
 80070d8:	f015 0506 	ands.w	r5, r5, #6
 80070dc:	d107      	bne.n	80070ee <_printf_common+0x52>
 80070de:	f104 0a19 	add.w	sl, r4, #25
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	f8d9 2000 	ldr.w	r2, [r9]
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	42ab      	cmp	r3, r5
 80070ec:	dc28      	bgt.n	8007140 <_printf_common+0xa4>
 80070ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	3300      	adds	r3, #0
 80070f6:	bf18      	it	ne
 80070f8:	2301      	movne	r3, #1
 80070fa:	0692      	lsls	r2, r2, #26
 80070fc:	d42d      	bmi.n	800715a <_printf_common+0xbe>
 80070fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007102:	4639      	mov	r1, r7
 8007104:	4630      	mov	r0, r6
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d020      	beq.n	800714e <_printf_common+0xb2>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	68e5      	ldr	r5, [r4, #12]
 8007110:	f8d9 2000 	ldr.w	r2, [r9]
 8007114:	f003 0306 	and.w	r3, r3, #6
 8007118:	2b04      	cmp	r3, #4
 800711a:	bf08      	it	eq
 800711c:	1aad      	subeq	r5, r5, r2
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	bf0c      	ite	eq
 8007124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007128:	2500      	movne	r5, #0
 800712a:	4293      	cmp	r3, r2
 800712c:	bfc4      	itt	gt
 800712e:	1a9b      	subgt	r3, r3, r2
 8007130:	18ed      	addgt	r5, r5, r3
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	341a      	adds	r4, #26
 8007138:	454d      	cmp	r5, r9
 800713a:	d11a      	bne.n	8007172 <_printf_common+0xd6>
 800713c:	2000      	movs	r0, #0
 800713e:	e008      	b.n	8007152 <_printf_common+0xb6>
 8007140:	2301      	movs	r3, #1
 8007142:	4652      	mov	r2, sl
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	47c0      	blx	r8
 800714a:	3001      	adds	r0, #1
 800714c:	d103      	bne.n	8007156 <_printf_common+0xba>
 800714e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	3501      	adds	r5, #1
 8007158:	e7c3      	b.n	80070e2 <_printf_common+0x46>
 800715a:	18e1      	adds	r1, r4, r3
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	2030      	movs	r0, #48	; 0x30
 8007160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007164:	4422      	add	r2, r4
 8007166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800716a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800716e:	3302      	adds	r3, #2
 8007170:	e7c5      	b.n	80070fe <_printf_common+0x62>
 8007172:	2301      	movs	r3, #1
 8007174:	4622      	mov	r2, r4
 8007176:	4639      	mov	r1, r7
 8007178:	4630      	mov	r0, r6
 800717a:	47c0      	blx	r8
 800717c:	3001      	adds	r0, #1
 800717e:	d0e6      	beq.n	800714e <_printf_common+0xb2>
 8007180:	f109 0901 	add.w	r9, r9, #1
 8007184:	e7d8      	b.n	8007138 <_printf_common+0x9c>
	...

08007188 <_printf_i>:
 8007188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800718c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007190:	460c      	mov	r4, r1
 8007192:	7e09      	ldrb	r1, [r1, #24]
 8007194:	b085      	sub	sp, #20
 8007196:	296e      	cmp	r1, #110	; 0x6e
 8007198:	4617      	mov	r7, r2
 800719a:	4606      	mov	r6, r0
 800719c:	4698      	mov	r8, r3
 800719e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a0:	f000 80b3 	beq.w	800730a <_printf_i+0x182>
 80071a4:	d822      	bhi.n	80071ec <_printf_i+0x64>
 80071a6:	2963      	cmp	r1, #99	; 0x63
 80071a8:	d036      	beq.n	8007218 <_printf_i+0x90>
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x3a>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	f000 80b9 	beq.w	8007324 <_printf_i+0x19c>
 80071b2:	2958      	cmp	r1, #88	; 0x58
 80071b4:	f000 8083 	beq.w	80072be <_printf_i+0x136>
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071c0:	e032      	b.n	8007228 <_printf_i+0xa0>
 80071c2:	2964      	cmp	r1, #100	; 0x64
 80071c4:	d001      	beq.n	80071ca <_printf_i+0x42>
 80071c6:	2969      	cmp	r1, #105	; 0x69
 80071c8:	d1f6      	bne.n	80071b8 <_printf_i+0x30>
 80071ca:	6820      	ldr	r0, [r4, #0]
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	0605      	lsls	r5, r0, #24
 80071d0:	f103 0104 	add.w	r1, r3, #4
 80071d4:	d52a      	bpl.n	800722c <_printf_i+0xa4>
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6011      	str	r1, [r2, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da03      	bge.n	80071e6 <_printf_i+0x5e>
 80071de:	222d      	movs	r2, #45	; 0x2d
 80071e0:	425b      	negs	r3, r3
 80071e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071e6:	486f      	ldr	r0, [pc, #444]	; (80073a4 <_printf_i+0x21c>)
 80071e8:	220a      	movs	r2, #10
 80071ea:	e039      	b.n	8007260 <_printf_i+0xd8>
 80071ec:	2973      	cmp	r1, #115	; 0x73
 80071ee:	f000 809d 	beq.w	800732c <_printf_i+0x1a4>
 80071f2:	d808      	bhi.n	8007206 <_printf_i+0x7e>
 80071f4:	296f      	cmp	r1, #111	; 0x6f
 80071f6:	d020      	beq.n	800723a <_printf_i+0xb2>
 80071f8:	2970      	cmp	r1, #112	; 0x70
 80071fa:	d1dd      	bne.n	80071b8 <_printf_i+0x30>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f043 0320 	orr.w	r3, r3, #32
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	e003      	b.n	800720e <_printf_i+0x86>
 8007206:	2975      	cmp	r1, #117	; 0x75
 8007208:	d017      	beq.n	800723a <_printf_i+0xb2>
 800720a:	2978      	cmp	r1, #120	; 0x78
 800720c:	d1d4      	bne.n	80071b8 <_printf_i+0x30>
 800720e:	2378      	movs	r3, #120	; 0x78
 8007210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007214:	4864      	ldr	r0, [pc, #400]	; (80073a8 <_printf_i+0x220>)
 8007216:	e055      	b.n	80072c4 <_printf_i+0x13c>
 8007218:	6813      	ldr	r3, [r2, #0]
 800721a:	1d19      	adds	r1, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6011      	str	r1, [r2, #0]
 8007220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007228:	2301      	movs	r3, #1
 800722a:	e08c      	b.n	8007346 <_printf_i+0x1be>
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6011      	str	r1, [r2, #0]
 8007230:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007234:	bf18      	it	ne
 8007236:	b21b      	sxthne	r3, r3
 8007238:	e7cf      	b.n	80071da <_printf_i+0x52>
 800723a:	6813      	ldr	r3, [r2, #0]
 800723c:	6825      	ldr	r5, [r4, #0]
 800723e:	1d18      	adds	r0, r3, #4
 8007240:	6010      	str	r0, [r2, #0]
 8007242:	0628      	lsls	r0, r5, #24
 8007244:	d501      	bpl.n	800724a <_printf_i+0xc2>
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	e002      	b.n	8007250 <_printf_i+0xc8>
 800724a:	0668      	lsls	r0, r5, #25
 800724c:	d5fb      	bpl.n	8007246 <_printf_i+0xbe>
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	4854      	ldr	r0, [pc, #336]	; (80073a4 <_printf_i+0x21c>)
 8007252:	296f      	cmp	r1, #111	; 0x6f
 8007254:	bf14      	ite	ne
 8007256:	220a      	movne	r2, #10
 8007258:	2208      	moveq	r2, #8
 800725a:	2100      	movs	r1, #0
 800725c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007260:	6865      	ldr	r5, [r4, #4]
 8007262:	60a5      	str	r5, [r4, #8]
 8007264:	2d00      	cmp	r5, #0
 8007266:	f2c0 8095 	blt.w	8007394 <_printf_i+0x20c>
 800726a:	6821      	ldr	r1, [r4, #0]
 800726c:	f021 0104 	bic.w	r1, r1, #4
 8007270:	6021      	str	r1, [r4, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d13d      	bne.n	80072f2 <_printf_i+0x16a>
 8007276:	2d00      	cmp	r5, #0
 8007278:	f040 808e 	bne.w	8007398 <_printf_i+0x210>
 800727c:	4665      	mov	r5, ip
 800727e:	2a08      	cmp	r2, #8
 8007280:	d10b      	bne.n	800729a <_printf_i+0x112>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	07db      	lsls	r3, r3, #31
 8007286:	d508      	bpl.n	800729a <_printf_i+0x112>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6862      	ldr	r2, [r4, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	bfde      	ittt	le
 8007290:	2330      	movle	r3, #48	; 0x30
 8007292:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007296:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800729a:	ebac 0305 	sub.w	r3, ip, r5
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	f8cd 8000 	str.w	r8, [sp]
 80072a4:	463b      	mov	r3, r7
 80072a6:	aa03      	add	r2, sp, #12
 80072a8:	4621      	mov	r1, r4
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff fef6 	bl	800709c <_printf_common>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d14d      	bne.n	8007350 <_printf_i+0x1c8>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b8:	b005      	add	sp, #20
 80072ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072be:	4839      	ldr	r0, [pc, #228]	; (80073a4 <_printf_i+0x21c>)
 80072c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072c4:	6813      	ldr	r3, [r2, #0]
 80072c6:	6821      	ldr	r1, [r4, #0]
 80072c8:	1d1d      	adds	r5, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6015      	str	r5, [r2, #0]
 80072ce:	060a      	lsls	r2, r1, #24
 80072d0:	d50b      	bpl.n	80072ea <_printf_i+0x162>
 80072d2:	07ca      	lsls	r2, r1, #31
 80072d4:	bf44      	itt	mi
 80072d6:	f041 0120 	orrmi.w	r1, r1, #32
 80072da:	6021      	strmi	r1, [r4, #0]
 80072dc:	b91b      	cbnz	r3, 80072e6 <_printf_i+0x15e>
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	f022 0220 	bic.w	r2, r2, #32
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	2210      	movs	r2, #16
 80072e8:	e7b7      	b.n	800725a <_printf_i+0xd2>
 80072ea:	064d      	lsls	r5, r1, #25
 80072ec:	bf48      	it	mi
 80072ee:	b29b      	uxthmi	r3, r3
 80072f0:	e7ef      	b.n	80072d2 <_printf_i+0x14a>
 80072f2:	4665      	mov	r5, ip
 80072f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80072f8:	fb02 3311 	mls	r3, r2, r1, r3
 80072fc:	5cc3      	ldrb	r3, [r0, r3]
 80072fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007302:	460b      	mov	r3, r1
 8007304:	2900      	cmp	r1, #0
 8007306:	d1f5      	bne.n	80072f4 <_printf_i+0x16c>
 8007308:	e7b9      	b.n	800727e <_printf_i+0xf6>
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	6825      	ldr	r5, [r4, #0]
 800730e:	6961      	ldr	r1, [r4, #20]
 8007310:	1d18      	adds	r0, r3, #4
 8007312:	6010      	str	r0, [r2, #0]
 8007314:	0628      	lsls	r0, r5, #24
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	d501      	bpl.n	800731e <_printf_i+0x196>
 800731a:	6019      	str	r1, [r3, #0]
 800731c:	e002      	b.n	8007324 <_printf_i+0x19c>
 800731e:	066a      	lsls	r2, r5, #25
 8007320:	d5fb      	bpl.n	800731a <_printf_i+0x192>
 8007322:	8019      	strh	r1, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	4665      	mov	r5, ip
 800732a:	e7b9      	b.n	80072a0 <_printf_i+0x118>
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	1d19      	adds	r1, r3, #4
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	681d      	ldr	r5, [r3, #0]
 8007334:	6862      	ldr	r2, [r4, #4]
 8007336:	2100      	movs	r1, #0
 8007338:	4628      	mov	r0, r5
 800733a:	f7f8 ff69 	bl	8000210 <memchr>
 800733e:	b108      	cbz	r0, 8007344 <_printf_i+0x1bc>
 8007340:	1b40      	subs	r0, r0, r5
 8007342:	6060      	str	r0, [r4, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2300      	movs	r3, #0
 800734a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734e:	e7a7      	b.n	80072a0 <_printf_i+0x118>
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	462a      	mov	r2, r5
 8007354:	4639      	mov	r1, r7
 8007356:	4630      	mov	r0, r6
 8007358:	47c0      	blx	r8
 800735a:	3001      	adds	r0, #1
 800735c:	d0aa      	beq.n	80072b4 <_printf_i+0x12c>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	079b      	lsls	r3, r3, #30
 8007362:	d413      	bmi.n	800738c <_printf_i+0x204>
 8007364:	68e0      	ldr	r0, [r4, #12]
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	4298      	cmp	r0, r3
 800736a:	bfb8      	it	lt
 800736c:	4618      	movlt	r0, r3
 800736e:	e7a3      	b.n	80072b8 <_printf_i+0x130>
 8007370:	2301      	movs	r3, #1
 8007372:	464a      	mov	r2, r9
 8007374:	4639      	mov	r1, r7
 8007376:	4630      	mov	r0, r6
 8007378:	47c0      	blx	r8
 800737a:	3001      	adds	r0, #1
 800737c:	d09a      	beq.n	80072b4 <_printf_i+0x12c>
 800737e:	3501      	adds	r5, #1
 8007380:	68e3      	ldr	r3, [r4, #12]
 8007382:	9a03      	ldr	r2, [sp, #12]
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	42ab      	cmp	r3, r5
 8007388:	dcf2      	bgt.n	8007370 <_printf_i+0x1e8>
 800738a:	e7eb      	b.n	8007364 <_printf_i+0x1dc>
 800738c:	2500      	movs	r5, #0
 800738e:	f104 0919 	add.w	r9, r4, #25
 8007392:	e7f5      	b.n	8007380 <_printf_i+0x1f8>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1ac      	bne.n	80072f2 <_printf_i+0x16a>
 8007398:	7803      	ldrb	r3, [r0, #0]
 800739a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800739e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a2:	e76c      	b.n	800727e <_printf_i+0xf6>
 80073a4:	08007a29 	.word	0x08007a29
 80073a8:	08007a3a 	.word	0x08007a3a

080073ac <_sbrk_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4c06      	ldr	r4, [pc, #24]	; (80073c8 <_sbrk_r+0x1c>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4605      	mov	r5, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	f7fc f99a 	bl	80036f0 <_sbrk>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_sbrk_r+0x1a>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_sbrk_r+0x1a>
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	2000033c 	.word	0x2000033c

080073cc <__sread>:
 80073cc:	b510      	push	{r4, lr}
 80073ce:	460c      	mov	r4, r1
 80073d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d4:	f000 fa96 	bl	8007904 <_read_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	bfab      	itete	ge
 80073dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073de:	89a3      	ldrhlt	r3, [r4, #12]
 80073e0:	181b      	addge	r3, r3, r0
 80073e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073e6:	bfac      	ite	ge
 80073e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ea:	81a3      	strhlt	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__swrite>:
 80073ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f2:	461f      	mov	r7, r3
 80073f4:	898b      	ldrh	r3, [r1, #12]
 80073f6:	05db      	lsls	r3, r3, #23
 80073f8:	4605      	mov	r5, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	4616      	mov	r6, r2
 80073fe:	d505      	bpl.n	800740c <__swrite+0x1e>
 8007400:	2302      	movs	r3, #2
 8007402:	2200      	movs	r2, #0
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	f000 f9b6 	bl	8007778 <_lseek_r>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	4632      	mov	r2, r6
 800741a:	463b      	mov	r3, r7
 800741c:	4628      	mov	r0, r5
 800741e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	f000 b869 	b.w	80074f8 <_write_r>

08007426 <__sseek>:
 8007426:	b510      	push	{r4, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 f9a3 	bl	8007778 <_lseek_r>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	bf15      	itete	ne
 8007438:	6560      	strne	r0, [r4, #84]	; 0x54
 800743a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800743e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007442:	81a3      	strheq	r3, [r4, #12]
 8007444:	bf18      	it	ne
 8007446:	81a3      	strhne	r3, [r4, #12]
 8007448:	bd10      	pop	{r4, pc}

0800744a <__sclose>:
 800744a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744e:	f000 b8d3 	b.w	80075f8 <_close_r>
	...

08007454 <__swbuf_r>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	460e      	mov	r6, r1
 8007458:	4614      	mov	r4, r2
 800745a:	4605      	mov	r5, r0
 800745c:	b118      	cbz	r0, 8007466 <__swbuf_r+0x12>
 800745e:	6983      	ldr	r3, [r0, #24]
 8007460:	b90b      	cbnz	r3, 8007466 <__swbuf_r+0x12>
 8007462:	f7ff fbf7 	bl	8006c54 <__sinit>
 8007466:	4b21      	ldr	r3, [pc, #132]	; (80074ec <__swbuf_r+0x98>)
 8007468:	429c      	cmp	r4, r3
 800746a:	d12a      	bne.n	80074c2 <__swbuf_r+0x6e>
 800746c:	686c      	ldr	r4, [r5, #4]
 800746e:	69a3      	ldr	r3, [r4, #24]
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	071a      	lsls	r2, r3, #28
 8007476:	d52e      	bpl.n	80074d6 <__swbuf_r+0x82>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	b363      	cbz	r3, 80074d6 <__swbuf_r+0x82>
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	1ac0      	subs	r0, r0, r3
 8007482:	6963      	ldr	r3, [r4, #20]
 8007484:	b2f6      	uxtb	r6, r6
 8007486:	4283      	cmp	r3, r0
 8007488:	4637      	mov	r7, r6
 800748a:	dc04      	bgt.n	8007496 <__swbuf_r+0x42>
 800748c:	4621      	mov	r1, r4
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f948 	bl	8007724 <_fflush_r>
 8007494:	bb28      	cbnz	r0, 80074e2 <__swbuf_r+0x8e>
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	3b01      	subs	r3, #1
 800749a:	60a3      	str	r3, [r4, #8]
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	6022      	str	r2, [r4, #0]
 80074a2:	701e      	strb	r6, [r3, #0]
 80074a4:	6963      	ldr	r3, [r4, #20]
 80074a6:	3001      	adds	r0, #1
 80074a8:	4283      	cmp	r3, r0
 80074aa:	d004      	beq.n	80074b6 <__swbuf_r+0x62>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	07db      	lsls	r3, r3, #31
 80074b0:	d519      	bpl.n	80074e6 <__swbuf_r+0x92>
 80074b2:	2e0a      	cmp	r6, #10
 80074b4:	d117      	bne.n	80074e6 <__swbuf_r+0x92>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f933 	bl	8007724 <_fflush_r>
 80074be:	b190      	cbz	r0, 80074e6 <__swbuf_r+0x92>
 80074c0:	e00f      	b.n	80074e2 <__swbuf_r+0x8e>
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <__swbuf_r+0x9c>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	d101      	bne.n	80074cc <__swbuf_r+0x78>
 80074c8:	68ac      	ldr	r4, [r5, #8]
 80074ca:	e7d0      	b.n	800746e <__swbuf_r+0x1a>
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <__swbuf_r+0xa0>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	bf08      	it	eq
 80074d2:	68ec      	ldreq	r4, [r5, #12]
 80074d4:	e7cb      	b.n	800746e <__swbuf_r+0x1a>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	f000 f81f 	bl	800751c <__swsetup_r>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d0cc      	beq.n	800747c <__swbuf_r+0x28>
 80074e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074e6:	4638      	mov	r0, r7
 80074e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	080079d8 	.word	0x080079d8
 80074f0:	080079f8 	.word	0x080079f8
 80074f4:	080079b8 	.word	0x080079b8

080074f8 <_write_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4c07      	ldr	r4, [pc, #28]	; (8007518 <_write_r+0x20>)
 80074fc:	4605      	mov	r5, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	6022      	str	r2, [r4, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fc f8a1 	bl	800364e <_write>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_write_r+0x1e>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	b103      	cbz	r3, 8007516 <_write_r+0x1e>
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	2000033c 	.word	0x2000033c

0800751c <__swsetup_r>:
 800751c:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <__swsetup_r+0xcc>)
 800751e:	b570      	push	{r4, r5, r6, lr}
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	4606      	mov	r6, r0
 8007524:	460c      	mov	r4, r1
 8007526:	b125      	cbz	r5, 8007532 <__swsetup_r+0x16>
 8007528:	69ab      	ldr	r3, [r5, #24]
 800752a:	b913      	cbnz	r3, 8007532 <__swsetup_r+0x16>
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff fb91 	bl	8006c54 <__sinit>
 8007532:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <__swsetup_r+0xd0>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d10f      	bne.n	8007558 <__swsetup_r+0x3c>
 8007538:	686c      	ldr	r4, [r5, #4]
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	b29a      	uxth	r2, r3
 8007540:	0715      	lsls	r5, r2, #28
 8007542:	d42c      	bmi.n	800759e <__swsetup_r+0x82>
 8007544:	06d0      	lsls	r0, r2, #27
 8007546:	d411      	bmi.n	800756c <__swsetup_r+0x50>
 8007548:	2209      	movs	r2, #9
 800754a:	6032      	str	r2, [r6, #0]
 800754c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007556:	e03e      	b.n	80075d6 <__swsetup_r+0xba>
 8007558:	4b25      	ldr	r3, [pc, #148]	; (80075f0 <__swsetup_r+0xd4>)
 800755a:	429c      	cmp	r4, r3
 800755c:	d101      	bne.n	8007562 <__swsetup_r+0x46>
 800755e:	68ac      	ldr	r4, [r5, #8]
 8007560:	e7eb      	b.n	800753a <__swsetup_r+0x1e>
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <__swsetup_r+0xd8>)
 8007564:	429c      	cmp	r4, r3
 8007566:	bf08      	it	eq
 8007568:	68ec      	ldreq	r4, [r5, #12]
 800756a:	e7e6      	b.n	800753a <__swsetup_r+0x1e>
 800756c:	0751      	lsls	r1, r2, #29
 800756e:	d512      	bpl.n	8007596 <__swsetup_r+0x7a>
 8007570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007572:	b141      	cbz	r1, 8007586 <__swsetup_r+0x6a>
 8007574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007578:	4299      	cmp	r1, r3
 800757a:	d002      	beq.n	8007582 <__swsetup_r+0x66>
 800757c:	4630      	mov	r0, r6
 800757e:	f000 f973 	bl	8007868 <_free_r>
 8007582:	2300      	movs	r3, #0
 8007584:	6363      	str	r3, [r4, #52]	; 0x34
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800758c:	81a3      	strh	r3, [r4, #12]
 800758e:	2300      	movs	r3, #0
 8007590:	6063      	str	r3, [r4, #4]
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f043 0308 	orr.w	r3, r3, #8
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	b94b      	cbnz	r3, 80075b6 <__swsetup_r+0x9a>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ac:	d003      	beq.n	80075b6 <__swsetup_r+0x9a>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4630      	mov	r0, r6
 80075b2:	f000 f917 	bl	80077e4 <__smakebuf_r>
 80075b6:	89a2      	ldrh	r2, [r4, #12]
 80075b8:	f012 0301 	ands.w	r3, r2, #1
 80075bc:	d00c      	beq.n	80075d8 <__swsetup_r+0xbc>
 80075be:	2300      	movs	r3, #0
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	6963      	ldr	r3, [r4, #20]
 80075c4:	425b      	negs	r3, r3
 80075c6:	61a3      	str	r3, [r4, #24]
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	b953      	cbnz	r3, 80075e2 <__swsetup_r+0xc6>
 80075cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80075d4:	d1ba      	bne.n	800754c <__swsetup_r+0x30>
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	0792      	lsls	r2, r2, #30
 80075da:	bf58      	it	pl
 80075dc:	6963      	ldrpl	r3, [r4, #20]
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	e7f2      	b.n	80075c8 <__swsetup_r+0xac>
 80075e2:	2000      	movs	r0, #0
 80075e4:	e7f7      	b.n	80075d6 <__swsetup_r+0xba>
 80075e6:	bf00      	nop
 80075e8:	2000000c 	.word	0x2000000c
 80075ec:	080079d8 	.word	0x080079d8
 80075f0:	080079f8 	.word	0x080079f8
 80075f4:	080079b8 	.word	0x080079b8

080075f8 <_close_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4c06      	ldr	r4, [pc, #24]	; (8007614 <_close_r+0x1c>)
 80075fc:	2300      	movs	r3, #0
 80075fe:	4605      	mov	r5, r0
 8007600:	4608      	mov	r0, r1
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	f7fc f83f 	bl	8003686 <_close>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_close_r+0x1a>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	b103      	cbz	r3, 8007612 <_close_r+0x1a>
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	2000033c 	.word	0x2000033c

08007618 <__sflush_r>:
 8007618:	898a      	ldrh	r2, [r1, #12]
 800761a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761e:	4605      	mov	r5, r0
 8007620:	0710      	lsls	r0, r2, #28
 8007622:	460c      	mov	r4, r1
 8007624:	d458      	bmi.n	80076d8 <__sflush_r+0xc0>
 8007626:	684b      	ldr	r3, [r1, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	dc05      	bgt.n	8007638 <__sflush_r+0x20>
 800762c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	dc02      	bgt.n	8007638 <__sflush_r+0x20>
 8007632:	2000      	movs	r0, #0
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763a:	2e00      	cmp	r6, #0
 800763c:	d0f9      	beq.n	8007632 <__sflush_r+0x1a>
 800763e:	2300      	movs	r3, #0
 8007640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007644:	682f      	ldr	r7, [r5, #0]
 8007646:	6a21      	ldr	r1, [r4, #32]
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	d032      	beq.n	80076b2 <__sflush_r+0x9a>
 800764c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	075a      	lsls	r2, r3, #29
 8007652:	d505      	bpl.n	8007660 <__sflush_r+0x48>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	1ac0      	subs	r0, r0, r3
 8007658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800765a:	b10b      	cbz	r3, 8007660 <__sflush_r+0x48>
 800765c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800765e:	1ac0      	subs	r0, r0, r3
 8007660:	2300      	movs	r3, #0
 8007662:	4602      	mov	r2, r0
 8007664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007666:	6a21      	ldr	r1, [r4, #32]
 8007668:	4628      	mov	r0, r5
 800766a:	47b0      	blx	r6
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	d106      	bne.n	8007680 <__sflush_r+0x68>
 8007672:	6829      	ldr	r1, [r5, #0]
 8007674:	291d      	cmp	r1, #29
 8007676:	d848      	bhi.n	800770a <__sflush_r+0xf2>
 8007678:	4a29      	ldr	r2, [pc, #164]	; (8007720 <__sflush_r+0x108>)
 800767a:	40ca      	lsrs	r2, r1
 800767c:	07d6      	lsls	r6, r2, #31
 800767e:	d544      	bpl.n	800770a <__sflush_r+0xf2>
 8007680:	2200      	movs	r2, #0
 8007682:	6062      	str	r2, [r4, #4]
 8007684:	04d9      	lsls	r1, r3, #19
 8007686:	6922      	ldr	r2, [r4, #16]
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	d504      	bpl.n	8007696 <__sflush_r+0x7e>
 800768c:	1c42      	adds	r2, r0, #1
 800768e:	d101      	bne.n	8007694 <__sflush_r+0x7c>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b903      	cbnz	r3, 8007696 <__sflush_r+0x7e>
 8007694:	6560      	str	r0, [r4, #84]	; 0x54
 8007696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007698:	602f      	str	r7, [r5, #0]
 800769a:	2900      	cmp	r1, #0
 800769c:	d0c9      	beq.n	8007632 <__sflush_r+0x1a>
 800769e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d002      	beq.n	80076ac <__sflush_r+0x94>
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f8de 	bl	8007868 <_free_r>
 80076ac:	2000      	movs	r0, #0
 80076ae:	6360      	str	r0, [r4, #52]	; 0x34
 80076b0:	e7c0      	b.n	8007634 <__sflush_r+0x1c>
 80076b2:	2301      	movs	r3, #1
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b0      	blx	r6
 80076b8:	1c41      	adds	r1, r0, #1
 80076ba:	d1c8      	bne.n	800764e <__sflush_r+0x36>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0c5      	beq.n	800764e <__sflush_r+0x36>
 80076c2:	2b1d      	cmp	r3, #29
 80076c4:	d001      	beq.n	80076ca <__sflush_r+0xb2>
 80076c6:	2b16      	cmp	r3, #22
 80076c8:	d101      	bne.n	80076ce <__sflush_r+0xb6>
 80076ca:	602f      	str	r7, [r5, #0]
 80076cc:	e7b1      	b.n	8007632 <__sflush_r+0x1a>
 80076ce:	89a3      	ldrh	r3, [r4, #12]
 80076d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	e7ad      	b.n	8007634 <__sflush_r+0x1c>
 80076d8:	690f      	ldr	r7, [r1, #16]
 80076da:	2f00      	cmp	r7, #0
 80076dc:	d0a9      	beq.n	8007632 <__sflush_r+0x1a>
 80076de:	0793      	lsls	r3, r2, #30
 80076e0:	680e      	ldr	r6, [r1, #0]
 80076e2:	bf08      	it	eq
 80076e4:	694b      	ldreq	r3, [r1, #20]
 80076e6:	600f      	str	r7, [r1, #0]
 80076e8:	bf18      	it	ne
 80076ea:	2300      	movne	r3, #0
 80076ec:	eba6 0807 	sub.w	r8, r6, r7
 80076f0:	608b      	str	r3, [r1, #8]
 80076f2:	f1b8 0f00 	cmp.w	r8, #0
 80076f6:	dd9c      	ble.n	8007632 <__sflush_r+0x1a>
 80076f8:	4643      	mov	r3, r8
 80076fa:	463a      	mov	r2, r7
 80076fc:	6a21      	ldr	r1, [r4, #32]
 80076fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007700:	4628      	mov	r0, r5
 8007702:	47b0      	blx	r6
 8007704:	2800      	cmp	r0, #0
 8007706:	dc06      	bgt.n	8007716 <__sflush_r+0xfe>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007714:	e78e      	b.n	8007634 <__sflush_r+0x1c>
 8007716:	4407      	add	r7, r0
 8007718:	eba8 0800 	sub.w	r8, r8, r0
 800771c:	e7e9      	b.n	80076f2 <__sflush_r+0xda>
 800771e:	bf00      	nop
 8007720:	20400001 	.word	0x20400001

08007724 <_fflush_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	690b      	ldr	r3, [r1, #16]
 8007728:	4605      	mov	r5, r0
 800772a:	460c      	mov	r4, r1
 800772c:	b1db      	cbz	r3, 8007766 <_fflush_r+0x42>
 800772e:	b118      	cbz	r0, 8007738 <_fflush_r+0x14>
 8007730:	6983      	ldr	r3, [r0, #24]
 8007732:	b90b      	cbnz	r3, 8007738 <_fflush_r+0x14>
 8007734:	f7ff fa8e 	bl	8006c54 <__sinit>
 8007738:	4b0c      	ldr	r3, [pc, #48]	; (800776c <_fflush_r+0x48>)
 800773a:	429c      	cmp	r4, r3
 800773c:	d109      	bne.n	8007752 <_fflush_r+0x2e>
 800773e:	686c      	ldr	r4, [r5, #4]
 8007740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007744:	b17b      	cbz	r3, 8007766 <_fflush_r+0x42>
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774e:	f7ff bf63 	b.w	8007618 <__sflush_r>
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <_fflush_r+0x4c>)
 8007754:	429c      	cmp	r4, r3
 8007756:	d101      	bne.n	800775c <_fflush_r+0x38>
 8007758:	68ac      	ldr	r4, [r5, #8]
 800775a:	e7f1      	b.n	8007740 <_fflush_r+0x1c>
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <_fflush_r+0x50>)
 800775e:	429c      	cmp	r4, r3
 8007760:	bf08      	it	eq
 8007762:	68ec      	ldreq	r4, [r5, #12]
 8007764:	e7ec      	b.n	8007740 <_fflush_r+0x1c>
 8007766:	2000      	movs	r0, #0
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	bf00      	nop
 800776c:	080079d8 	.word	0x080079d8
 8007770:	080079f8 	.word	0x080079f8
 8007774:	080079b8 	.word	0x080079b8

08007778 <_lseek_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4c07      	ldr	r4, [pc, #28]	; (8007798 <_lseek_r+0x20>)
 800777c:	4605      	mov	r5, r0
 800777e:	4608      	mov	r0, r1
 8007780:	4611      	mov	r1, r2
 8007782:	2200      	movs	r2, #0
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	f7fb ffa4 	bl	80036d4 <_lseek>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_lseek_r+0x1e>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	b103      	cbz	r3, 8007796 <_lseek_r+0x1e>
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	2000033c 	.word	0x2000033c

0800779c <__swhatbuf_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	460e      	mov	r6, r1
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	2900      	cmp	r1, #0
 80077a6:	b096      	sub	sp, #88	; 0x58
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	da07      	bge.n	80077be <__swhatbuf_r+0x22>
 80077ae:	2300      	movs	r3, #0
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	89b3      	ldrh	r3, [r6, #12]
 80077b4:	061a      	lsls	r2, r3, #24
 80077b6:	d410      	bmi.n	80077da <__swhatbuf_r+0x3e>
 80077b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077bc:	e00e      	b.n	80077dc <__swhatbuf_r+0x40>
 80077be:	466a      	mov	r2, sp
 80077c0:	f000 f8b2 	bl	8007928 <_fstat_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	dbf2      	blt.n	80077ae <__swhatbuf_r+0x12>
 80077c8:	9a01      	ldr	r2, [sp, #4]
 80077ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077d2:	425a      	negs	r2, r3
 80077d4:	415a      	adcs	r2, r3
 80077d6:	602a      	str	r2, [r5, #0]
 80077d8:	e7ee      	b.n	80077b8 <__swhatbuf_r+0x1c>
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	2000      	movs	r0, #0
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	b016      	add	sp, #88	; 0x58
 80077e2:	bd70      	pop	{r4, r5, r6, pc}

080077e4 <__smakebuf_r>:
 80077e4:	898b      	ldrh	r3, [r1, #12]
 80077e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e8:	079d      	lsls	r5, r3, #30
 80077ea:	4606      	mov	r6, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	d507      	bpl.n	8007800 <__smakebuf_r+0x1c>
 80077f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	6123      	str	r3, [r4, #16]
 80077f8:	2301      	movs	r3, #1
 80077fa:	6163      	str	r3, [r4, #20]
 80077fc:	b002      	add	sp, #8
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	ab01      	add	r3, sp, #4
 8007802:	466a      	mov	r2, sp
 8007804:	f7ff ffca 	bl	800779c <__swhatbuf_r>
 8007808:	9900      	ldr	r1, [sp, #0]
 800780a:	4605      	mov	r5, r0
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff faab 	bl	8006d68 <_malloc_r>
 8007812:	b948      	cbnz	r0, 8007828 <__smakebuf_r+0x44>
 8007814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d4ef      	bmi.n	80077fc <__smakebuf_r+0x18>
 800781c:	f023 0303 	bic.w	r3, r3, #3
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e7e3      	b.n	80077f0 <__smakebuf_r+0xc>
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <__smakebuf_r+0x7c>)
 800782a:	62b3      	str	r3, [r6, #40]	; 0x28
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	6163      	str	r3, [r4, #20]
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	6120      	str	r0, [r4, #16]
 800783e:	b15b      	cbz	r3, 8007858 <__smakebuf_r+0x74>
 8007840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007844:	4630      	mov	r0, r6
 8007846:	f000 f881 	bl	800794c <_isatty_r>
 800784a:	b128      	cbz	r0, 8007858 <__smakebuf_r+0x74>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f023 0303 	bic.w	r3, r3, #3
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	431d      	orrs	r5, r3
 800785c:	81a5      	strh	r5, [r4, #12]
 800785e:	e7cd      	b.n	80077fc <__smakebuf_r+0x18>
 8007860:	08006c1d 	.word	0x08006c1d

08007864 <__malloc_lock>:
 8007864:	4770      	bx	lr

08007866 <__malloc_unlock>:
 8007866:	4770      	bx	lr

08007868 <_free_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4605      	mov	r5, r0
 800786c:	2900      	cmp	r1, #0
 800786e:	d045      	beq.n	80078fc <_free_r+0x94>
 8007870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007874:	1f0c      	subs	r4, r1, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfb8      	it	lt
 800787a:	18e4      	addlt	r4, r4, r3
 800787c:	f7ff fff2 	bl	8007864 <__malloc_lock>
 8007880:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <_free_r+0x98>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	4610      	mov	r0, r2
 8007886:	b933      	cbnz	r3, 8007896 <_free_r+0x2e>
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6014      	str	r4, [r2, #0]
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007892:	f7ff bfe8 	b.w	8007866 <__malloc_unlock>
 8007896:	42a3      	cmp	r3, r4
 8007898:	d90c      	bls.n	80078b4 <_free_r+0x4c>
 800789a:	6821      	ldr	r1, [r4, #0]
 800789c:	1862      	adds	r2, r4, r1
 800789e:	4293      	cmp	r3, r2
 80078a0:	bf04      	itt	eq
 80078a2:	681a      	ldreq	r2, [r3, #0]
 80078a4:	685b      	ldreq	r3, [r3, #4]
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	bf04      	itt	eq
 80078aa:	1852      	addeq	r2, r2, r1
 80078ac:	6022      	streq	r2, [r4, #0]
 80078ae:	6004      	str	r4, [r0, #0]
 80078b0:	e7ec      	b.n	800788c <_free_r+0x24>
 80078b2:	4613      	mov	r3, r2
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	b10a      	cbz	r2, 80078bc <_free_r+0x54>
 80078b8:	42a2      	cmp	r2, r4
 80078ba:	d9fa      	bls.n	80078b2 <_free_r+0x4a>
 80078bc:	6819      	ldr	r1, [r3, #0]
 80078be:	1858      	adds	r0, r3, r1
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d10b      	bne.n	80078dc <_free_r+0x74>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	4401      	add	r1, r0
 80078c8:	1858      	adds	r0, r3, r1
 80078ca:	4282      	cmp	r2, r0
 80078cc:	6019      	str	r1, [r3, #0]
 80078ce:	d1dd      	bne.n	800788c <_free_r+0x24>
 80078d0:	6810      	ldr	r0, [r2, #0]
 80078d2:	6852      	ldr	r2, [r2, #4]
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	4401      	add	r1, r0
 80078d8:	6019      	str	r1, [r3, #0]
 80078da:	e7d7      	b.n	800788c <_free_r+0x24>
 80078dc:	d902      	bls.n	80078e4 <_free_r+0x7c>
 80078de:	230c      	movs	r3, #12
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	e7d3      	b.n	800788c <_free_r+0x24>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	1821      	adds	r1, r4, r0
 80078e8:	428a      	cmp	r2, r1
 80078ea:	bf04      	itt	eq
 80078ec:	6811      	ldreq	r1, [r2, #0]
 80078ee:	6852      	ldreq	r2, [r2, #4]
 80078f0:	6062      	str	r2, [r4, #4]
 80078f2:	bf04      	itt	eq
 80078f4:	1809      	addeq	r1, r1, r0
 80078f6:	6021      	streq	r1, [r4, #0]
 80078f8:	605c      	str	r4, [r3, #4]
 80078fa:	e7c7      	b.n	800788c <_free_r+0x24>
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	20000094 	.word	0x20000094

08007904 <_read_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4c07      	ldr	r4, [pc, #28]	; (8007924 <_read_r+0x20>)
 8007908:	4605      	mov	r5, r0
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	2200      	movs	r2, #0
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	f7fb fe7e 	bl	8003614 <_read>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_read_r+0x1e>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	b103      	cbz	r3, 8007922 <_read_r+0x1e>
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	2000033c 	.word	0x2000033c

08007928 <_fstat_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4c07      	ldr	r4, [pc, #28]	; (8007948 <_fstat_r+0x20>)
 800792c:	2300      	movs	r3, #0
 800792e:	4605      	mov	r5, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	f7fb feb2 	bl	800369e <_fstat>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	d102      	bne.n	8007944 <_fstat_r+0x1c>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	b103      	cbz	r3, 8007944 <_fstat_r+0x1c>
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	bd38      	pop	{r3, r4, r5, pc}
 8007946:	bf00      	nop
 8007948:	2000033c 	.word	0x2000033c

0800794c <_isatty_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4c06      	ldr	r4, [pc, #24]	; (8007968 <_isatty_r+0x1c>)
 8007950:	2300      	movs	r3, #0
 8007952:	4605      	mov	r5, r0
 8007954:	4608      	mov	r0, r1
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	f7fb feb1 	bl	80036be <_isatty>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_isatty_r+0x1a>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	b103      	cbz	r3, 8007966 <_isatty_r+0x1a>
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000033c 	.word	0x2000033c

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
