
KF-Estimator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007178  08007178  00017178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007278  08007278  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007280  08007280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080072fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080072fc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010de1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002377  00000000  00000000  00030e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237bc  00000000  00000000  00034e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b902  00000000  00000000  00058604  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d31e6  00000000  00000000  00063f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001370ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004814  00000000  00000000  00137168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007160 	.word	0x08007160

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007160 	.word	0x08007160

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MPU9250_Initialize>:
#include <MPU9250.h>

MPU9250_Result_t MPU9250_Initialize(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[8] = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef res;

    /* MPU9250_WHO_AM_I ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_WHO_AM_I|0x80;
 8000f3a:	23f5      	movs	r3, #245	; 0xf5
 8000f3c:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	891b      	ldrh	r3, [r3, #8]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f002 fd09 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	f107 010c 	add.w	r1, r7, #12
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2302      	movs	r3, #2
 8000f62:	f003 fa8f 	bl	8004484 <HAL_SPI_TransmitReceive>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6858      	ldr	r0, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	891b      	ldrh	r3, [r3, #8]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f002 fcf3 	bl	8003960 <HAL_GPIO_WritePin>

    //WHO_AM_I Check
    if (cmdbuf[1] != 0x71) {
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	2b71      	cmp	r3, #113	; 0x71
 8000f7e:	d001      	beq.n	8000f84 <MPU9250_Initialize+0x5c>
        return MPU9250_RESULT_FAIL;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e284      	b.n	800148e <MPU9250_Initialize+0x566>
    }
    //Ex
    if (res != HAL_OK) {
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MPU9250_Initialize+0x66>
        return MPU9250_RESULT_FAIL;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e27f      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Reset ----------------------------------------------------------*/

    cmdbuf[0] = MPU9250_PWR_MGMT_1;
 8000f8e:	236b      	movs	r3, #107	; 0x6b
 8000f90:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6858      	ldr	r0, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	891b      	ldrh	r3, [r3, #8]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f002 fcdd 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f003 fa63 	bl	8004484 <HAL_SPI_TransmitReceive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6858      	ldr	r0, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f002 fcc7 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MPU9250_Initialize+0xb4>
        return MPU9250_RESULT_FAIL;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e258      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f002 f9f9 	bl	80033d4 <HAL_Delay>

    /* MPU9250_I2C_Bypass_mode_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_INT_PIN_CFG;
 8000fe2:	2337      	movs	r3, #55	; 0x37
 8000fe4:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x12;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6858      	ldr	r0, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	891b      	ldrh	r3, [r3, #8]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 fcb3 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f107 010c 	add.w	r1, r7, #12
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	f003 fa39 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6858      	ldr	r0, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	891b      	ldrh	r3, [r3, #8]
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	f002 fc9d 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MPU9250_Initialize+0x108>
        return MPU9250_RESULT_FAIL;
 800102c:	2301      	movs	r3, #1
 800102e:	e22e      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    /* MPU9250_I2C_Master_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_USER_CTRL;
 8001030:	236a      	movs	r3, #106	; 0x6a
 8001032:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x30;
 8001034:	2330      	movs	r3, #48	; 0x30
 8001036:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	891b      	ldrh	r3, [r3, #8]
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	f002 fc8c 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	f003 fa12 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6858      	ldr	r0, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	891b      	ldrh	r3, [r3, #8]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	f002 fc76 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MPU9250_Initialize+0x156>
        return MPU9250_RESULT_FAIL;
 800107a:	2301      	movs	r3, #1
 800107c:	e207      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Set_I2C_clock_400kbps ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_MST_CTRL;
 800107e:	2324      	movs	r3, #36	; 0x24
 8001080:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0D;
 8001082:	230d      	movs	r3, #13
 8001084:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	891b      	ldrh	r3, [r3, #8]
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f002 fc65 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	f003 f9eb 	bl	8004484 <HAL_SPI_TransmitReceive>
 80010ae:	4603      	mov	r3, r0
 80010b0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6858      	ldr	r0, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	891b      	ldrh	r3, [r3, #8]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	f002 fc4f 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MPU9250_Initialize+0x1a4>
        return MPU9250_RESULT_FAIL;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e1e0      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    /* AK8963_Reset ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 80010cc:	2325      	movs	r3, #37	; 0x25
 80010ce:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 80010d0:	230c      	movs	r3, #12
 80010d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6858      	ldr	r0, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	891b      	ldrh	r3, [r3, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	f002 fc3e 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	f107 010c 	add.w	r1, r7, #12
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	f003 f9c4 	bl	8004484 <HAL_SPI_TransmitReceive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6858      	ldr	r0, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f002 fc28 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MPU9250_Initialize+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001116:	2301      	movs	r3, #1
 8001118:	e1b9      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800111a:	2326      	movs	r3, #38	; 0x26
 800111c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL2;
 800111e:	230b      	movs	r3, #11
 8001120:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f002 fc17 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	f107 010c 	add.w	r1, r7, #12
 800113e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2302      	movs	r3, #2
 8001146:	f003 f99d 	bl	8004484 <HAL_SPI_TransmitReceive>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6858      	ldr	r0, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	891b      	ldrh	r3, [r3, #8]
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	f002 fc01 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MPU9250_Initialize+0x240>
        return MPU9250_RESULT_FAIL;
 8001164:	2301      	movs	r3, #1
 8001166:	e192      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 8001168:	2363      	movs	r3, #99	; 0x63
 800116a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 800116c:	2301      	movs	r3, #1
 800116e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6858      	ldr	r0, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	891b      	ldrh	r3, [r3, #8]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f002 fbf0 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	f107 010c 	add.w	r1, r7, #12
 800118c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	f003 f976 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6858      	ldr	r0, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	f002 fbda 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MPU9250_Initialize+0x28e>
        return MPU9250_RESULT_FAIL;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e16b      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80011b6:	2327      	movs	r3, #39	; 0x27
 80011b8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80011ba:	2381      	movs	r3, #129	; 0x81
 80011bc:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	891b      	ldrh	r3, [r3, #8]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f002 fbc9 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,8,0xFFFF);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2308      	movs	r3, #8
 80011e2:	f003 f94f 	bl	8004484 <HAL_SPI_TransmitReceive>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6858      	ldr	r0, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	891b      	ldrh	r3, [r3, #8]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	f002 fbb3 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MPU9250_Initialize+0x2dc>
        return MPU9250_RESULT_FAIL;
 8001200:	2301      	movs	r3, #1
 8001202:	e144      	b.n	800148e <MPU9250_Initialize+0x566>
    }
    HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f002 f8e5 	bl	80033d4 <HAL_Delay>

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800120a:	2325      	movs	r3, #37	; 0x25
 800120c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 800120e:	230c      	movs	r3, #12
 8001210:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6858      	ldr	r0, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	f002 fb9f 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f107 020c 	add.w	r2, r7, #12
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	f003 f925 	bl	8004484 <HAL_SPI_TransmitReceive>
 800123a:	4603      	mov	r3, r0
 800123c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6858      	ldr	r0, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	891b      	ldrh	r3, [r3, #8]
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	f002 fb89 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MPU9250_Initialize+0x330>
        return MPU9250_RESULT_FAIL;
 8001254:	2301      	movs	r3, #1
 8001256:	e11a      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001258:	2326      	movs	r3, #38	; 0x26
 800125a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 800125c:	230a      	movs	r3, #10
 800125e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6858      	ldr	r0, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	891b      	ldrh	r3, [r3, #8]
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	f002 fb78 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	f107 010c 	add.w	r1, r7, #12
 800127c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2302      	movs	r3, #2
 8001284:	f003 f8fe 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6858      	ldr	r0, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	891b      	ldrh	r3, [r3, #8]
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	f002 fb62 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MPU9250_Initialize+0x37e>
        return MPU9250_RESULT_FAIL;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0f3      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80012a6:	2363      	movs	r3, #99	; 0x63
 80012a8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 80012aa:	2316      	movs	r3, #22
 80012ac:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6858      	ldr	r0, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	891b      	ldrh	r3, [r3, #8]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f002 fb51 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	f107 010c 	add.w	r1, r7, #12
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2302      	movs	r3, #2
 80012d2:	f003 f8d7 	bl	8004484 <HAL_SPI_TransmitReceive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6858      	ldr	r0, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	891b      	ldrh	r3, [r3, #8]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f002 fb3b 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MPU9250_Initialize+0x3cc>
        return MPU9250_RESULT_FAIL;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0cc      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80012f4:	2327      	movs	r3, #39	; 0x27
 80012f6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80012f8:	2381      	movs	r3, #129	; 0x81
 80012fa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	891b      	ldrh	r3, [r3, #8]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f002 fb2a 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	f003 f8b0 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001324:	4603      	mov	r3, r0
 8001326:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6858      	ldr	r0, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	891b      	ldrh	r3, [r3, #8]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f002 fb14 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MPU9250_Initialize+0x41a>
        return MPU9250_RESULT_FAIL;
 800133e:	2301      	movs	r3, #1
 8001340:	e0a5      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f002 f846 	bl	80033d4 <HAL_Delay>

    /* AK8963_WHO_AM_I ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001348:	2325      	movs	r3, #37	; 0x25
 800134a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 800134c:	238c      	movs	r3, #140	; 0x8c
 800134e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6858      	ldr	r0, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	891b      	ldrh	r3, [r3, #8]
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	f002 fb00 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2302      	movs	r3, #2
 8001374:	f003 f886 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001378:	4603      	mov	r3, r0
 800137a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6858      	ldr	r0, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	891b      	ldrh	r3, [r3, #8]
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	f002 faea 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MPU9250_Initialize+0x46e>
        return MPU9250_RESULT_FAIL;
 8001392:	2301      	movs	r3, #1
 8001394:	e07b      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001396:	2326      	movs	r3, #38	; 0x26
 8001398:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_WIA;
 800139a:	2300      	movs	r3, #0
 800139c:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	f002 fad9 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f107 010c 	add.w	r1, r7, #12
 80013ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2302      	movs	r3, #2
 80013c2:	f003 f85f 	bl	8004484 <HAL_SPI_TransmitReceive>
 80013c6:	4603      	mov	r3, r0
 80013c8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6858      	ldr	r0, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	891b      	ldrh	r3, [r3, #8]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	f002 fac3 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MPU9250_Initialize+0x4bc>
        return MPU9250_RESULT_FAIL;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e054      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80013e4:	2327      	movs	r3, #39	; 0x27
 80013e6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80013e8:	2381      	movs	r3, #129	; 0x81
 80013ea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6858      	ldr	r0, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	891b      	ldrh	r3, [r3, #8]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f002 fab2 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	f107 010c 	add.w	r1, r7, #12
 8001408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	f003 f838 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6858      	ldr	r0, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	f002 fa9c 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MPU9250_Initialize+0x50a>
        return MPU9250_RESULT_FAIL;
 800142e:	2301      	movs	r3, #1
 8001430:	e02d      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f001 ffce 	bl	80033d4 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 8001438:	23c9      	movs	r3, #201	; 0xc9
 800143a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6858      	ldr	r0, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	f002 fa8a 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	f107 010c 	add.w	r1, r7, #12
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2302      	movs	r3, #2
 8001460:	f003 f810 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6858      	ldr	r0, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	891b      	ldrh	r3, [r3, #8]
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fa74 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MPU9250_Initialize+0x55a>
        return MPU9250_RESULT_FAIL;
 800147e:	2301      	movs	r3, #1
 8001480:	e005      	b.n	800148e <MPU9250_Initialize+0x566>
    }
    //WHO_AM_I Check
    if (cmdbuf[1] != 0x48) {
 8001482:	7b7b      	ldrb	r3, [r7, #13]
 8001484:	2b48      	cmp	r3, #72	; 0x48
 8001486:	d001      	beq.n	800148c <MPU9250_Initialize+0x564>
        return MPU9250_RESULT_FAIL;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <MPU9250_Initialize+0x566>
    }

    return MPU9250_RESULT_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <MPU9250_Config>:

MPU9250_Result_t MPU9250_Config(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af02      	add	r7, sp, #8
 800149e:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[4] = {0};
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef res;

    /* MPU9250_Set_Accel_Scale ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_CONFIG->ACCEL_SCALE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a9b      	ldrb	r3, [r3, #10]
 80014a8:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == ACCEL_SCALE_2G){//2G
 80014aa:	7b3b      	ldrb	r3, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d104      	bne.n	80014ba <MPU9250_Config+0x22>
        MPU9250_CONFIG->ARES = 2.0/MPU9250_ACC_SENS_FACTOR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e016      	b.n	80014e8 <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_4G){//4G
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d104      	bne.n	80014ca <MPU9250_Config+0x32>
        MPU9250_CONFIG->ARES = 4.0/MPU9250_ACC_SENS_FACTOR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	e00e      	b.n	80014e8 <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_8G){//8G
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d104      	bne.n	80014da <MPU9250_Config+0x42>
        MPU9250_CONFIG->ARES = 8.0/MPU9250_ACC_SENS_FACTOR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	e006      	b.n	80014e8 <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_16G){//16G
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	2b18      	cmp	r3, #24
 80014de:	d103      	bne.n	80014e8 <MPU9250_Config+0x50>
        MPU9250_CONFIG->ARES = 16.0/MPU9250_ACC_SENS_FACTOR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80014e6:	60da      	str	r2, [r3, #12]
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG|0x80;
 80014e8:	239c      	movs	r3, #156	; 0x9c
 80014ea:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	891b      	ldrh	r3, [r3, #8]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f002 fa32 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2302      	movs	r3, #2
 8001510:	f002 ffb8 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001514:	4603      	mov	r3, r0
 8001516:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6858      	ldr	r0, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	891b      	ldrh	r3, [r3, #8]
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	f002 fa1c 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001528:	7cfb      	ldrb	r3, [r7, #19]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MPU9250_Config+0x9a>
        return MPU9250_RESULT_FAIL;
 800152e:	2301      	movs	r3, #1
 8001530:	e2b3      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG;
 8001532:	231c      	movs	r3, #28
 8001534:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 8001536:	7b7a      	ldrb	r2, [r7, #13]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7a9b      	ldrb	r3, [r3, #10]
 800153c:	4313      	orrs	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6858      	ldr	r0, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	891b      	ldrh	r3, [r3, #8]
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	f002 fa07 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	f107 010c 	add.w	r1, r7, #12
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2302      	movs	r3, #2
 8001566:	f002 ff8d 	bl	8004484 <HAL_SPI_TransmitReceive>
 800156a:	4603      	mov	r3, r0
 800156c:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6858      	ldr	r0, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	891b      	ldrh	r3, [r3, #8]
 8001576:	2201      	movs	r2, #1
 8001578:	4619      	mov	r1, r3
 800157a:	f002 f9f1 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800157e:	7cfb      	ldrb	r3, [r7, #19]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MPU9250_Config+0xf0>
        return MPU9250_RESULT_FAIL;
 8001584:	2301      	movs	r3, #1
 8001586:	e288      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    /* MPU9250_GYRO_CONFIG ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_CONFIG->GYRO_SCALE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7adb      	ldrb	r3, [r3, #11]
 800158c:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == GYRO_SCALE_250dps){//250dps
 800158e:	7b3b      	ldrb	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <MPU9250_Config+0x104>
        MPU9250_CONFIG->GRES = 2.0/MPU9250_GYRO_SENS_FACTOR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4aa8      	ldr	r2, [pc, #672]	; (8001838 <MPU9250_Config+0x3a0>)
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	e013      	b.n	80015c4 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_500dps){//500dps
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d103      	bne.n	80015aa <MPU9250_Config+0x112>
        MPU9250_CONFIG->GRES = 4.0/MPU9250_GYRO_SENS_FACTOR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4aa5      	ldr	r2, [pc, #660]	; (800183c <MPU9250_Config+0x3a4>)
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	e00c      	b.n	80015c4 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_1000dps){//1000dps
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d103      	bne.n	80015b8 <MPU9250_Config+0x120>
        MPU9250_CONFIG->GRES = 8.0/MPU9250_GYRO_SENS_FACTOR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4aa3      	ldr	r2, [pc, #652]	; (8001840 <MPU9250_Config+0x3a8>)
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	e005      	b.n	80015c4 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_2000dps){//2000dps
 80015b8:	7b3b      	ldrb	r3, [r7, #12]
 80015ba:	2b18      	cmp	r3, #24
 80015bc:	d102      	bne.n	80015c4 <MPU9250_Config+0x12c>
        MPU9250_CONFIG->GRES = 16.0/MPU9250_GYRO_SENS_FACTOR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4aa0      	ldr	r2, [pc, #640]	; (8001844 <MPU9250_Config+0x3ac>)
 80015c2:	611a      	str	r2, [r3, #16]
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG|0x80;
 80015c4:	239b      	movs	r3, #155	; 0x9b
 80015c6:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6858      	ldr	r0, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	891b      	ldrh	r3, [r3, #8]
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	f002 f9c4 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f107 020c 	add.w	r2, r7, #12
 80015e0:	f107 010c 	add.w	r1, r7, #12
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	f002 ff4a 	bl	8004484 <HAL_SPI_TransmitReceive>
 80015f0:	4603      	mov	r3, r0
 80015f2:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6858      	ldr	r0, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	891b      	ldrh	r3, [r3, #8]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	f002 f9ae 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MPU9250_Config+0x176>
        return MPU9250_RESULT_FAIL;
 800160a:	2301      	movs	r3, #1
 800160c:	e245      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG;
 800160e:	231b      	movs	r3, #27
 8001610:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 8001612:	7b7a      	ldrb	r2, [r7, #13]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7a9b      	ldrb	r3, [r3, #10]
 8001618:	4313      	orrs	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6858      	ldr	r0, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	891b      	ldrh	r3, [r3, #8]
 8001626:	2200      	movs	r2, #0
 8001628:	4619      	mov	r1, r3
 800162a:	f002 f999 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2302      	movs	r3, #2
 8001642:	f002 ff1f 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001646:	4603      	mov	r3, r0
 8001648:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6858      	ldr	r0, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	891b      	ldrh	r3, [r3, #8]
 8001652:	2201      	movs	r2, #1
 8001654:	4619      	mov	r1, r3
 8001656:	f002 f983 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800165a:	7cfb      	ldrb	r3, [r7, #19]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MPU9250_Config+0x1cc>
        return MPU9250_RESULT_FAIL;
 8001660:	2301      	movs	r3, #1
 8001662:	e21a      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/
    /* AK8963_Set_Fuse_access_mode ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001664:	2325      	movs	r3, #37	; 0x25
 8001666:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001668:	230c      	movs	r3, #12
 800166a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6858      	ldr	r0, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	891b      	ldrh	r3, [r3, #8]
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	f002 f972 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2302      	movs	r3, #2
 8001690:	f002 fef8 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001694:	4603      	mov	r3, r0
 8001696:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6858      	ldr	r0, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	891b      	ldrh	r3, [r3, #8]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4619      	mov	r1, r3
 80016a4:	f002 f95c 	bl	8003960 <HAL_GPIO_WritePin>
    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 80016a8:	2326      	movs	r3, #38	; 0x26
 80016aa:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 80016ac:	230a      	movs	r3, #10
 80016ae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6858      	ldr	r0, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	891b      	ldrh	r3, [r3, #8]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f002 f950 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	f107 010c 	add.w	r1, r7, #12
 80016cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	f002 fed6 	bl	8004484 <HAL_SPI_TransmitReceive>
 80016d8:	4603      	mov	r3, r0
 80016da:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6858      	ldr	r0, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	891b      	ldrh	r3, [r3, #8]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f002 f93a 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MPU9250_Config+0x25e>
        return MPU9250_RESULT_FAIL;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1d1      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80016f6:	2363      	movs	r3, #99	; 0x63
 80016f8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0F;
 80016fa:	230f      	movs	r3, #15
 80016fc:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6858      	ldr	r0, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	891b      	ldrh	r3, [r3, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	f002 f929 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	f107 010c 	add.w	r1, r7, #12
 800171a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2302      	movs	r3, #2
 8001722:	f002 feaf 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001726:	4603      	mov	r3, r0
 8001728:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6858      	ldr	r0, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	891b      	ldrh	r3, [r3, #8]
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	f002 f913 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MPU9250_Config+0x2ac>
        return MPU9250_RESULT_FAIL;
 8001740:	2301      	movs	r3, #1
 8001742:	e1aa      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001744:	2327      	movs	r3, #39	; 0x27
 8001746:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 8001748:	2381      	movs	r3, #129	; 0x81
 800174a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6858      	ldr	r0, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	891b      	ldrh	r3, [r3, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	f002 f902 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	f107 020c 	add.w	r2, r7, #12
 8001764:	f107 010c 	add.w	r1, r7, #12
 8001768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2302      	movs	r3, #2
 8001770:	f002 fe88 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001774:	4603      	mov	r3, r0
 8001776:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6858      	ldr	r0, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	891b      	ldrh	r3, [r3, #8]
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f002 f8ec 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001788:	7cfb      	ldrb	r3, [r7, #19]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MPU9250_Config+0x2fa>
        return MPU9250_RESULT_FAIL;
 800178e:	2301      	movs	r3, #1
 8001790:	e183      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 8001792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001796:	f001 fe1d 	bl	80033d4 <HAL_Delay>

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800179a:	2325      	movs	r3, #37	; 0x25
 800179c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 800179e:	238c      	movs	r3, #140	; 0x8c
 80017a0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6858      	ldr	r0, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	891b      	ldrh	r3, [r3, #8]
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	f002 f8d7 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f107 020c 	add.w	r2, r7, #12
 80017ba:	f107 010c 	add.w	r1, r7, #12
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	f002 fe5d 	bl	8004484 <HAL_SPI_TransmitReceive>
 80017ca:	4603      	mov	r3, r0
 80017cc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6858      	ldr	r0, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	891b      	ldrh	r3, [r3, #8]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f002 f8c1 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80017de:	7cfb      	ldrb	r3, [r7, #19]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MPU9250_Config+0x350>
        return MPU9250_RESULT_FAIL;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e158      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 80017e8:	2326      	movs	r3, #38	; 0x26
 80017ea:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ASAX;
 80017ec:	2310      	movs	r3, #16
 80017ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6858      	ldr	r0, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	891b      	ldrh	r3, [r3, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	f002 f8b0 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f107 020c 	add.w	r2, r7, #12
 8001808:	f107 010c 	add.w	r1, r7, #12
 800180c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2302      	movs	r3, #2
 8001814:	f002 fe36 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001818:	4603      	mov	r3, r0
 800181a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6858      	ldr	r0, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	891b      	ldrh	r3, [r3, #8]
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	f002 f89a 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <MPU9250_Config+0x3b0>
        return MPU9250_RESULT_FAIL;
 8001832:	2301      	movs	r3, #1
 8001834:	e131      	b.n	8001a9a <MPU9250_Config+0x602>
 8001836:	bf00      	nop
 8001838:	3bfa232d 	.word	0x3bfa232d
 800183c:	3c7a232d 	.word	0x3c7a232d
 8001840:	3cfa232d 	.word	0x3cfa232d
 8001844:	3d7a232d 	.word	0x3d7a232d
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001848:	2327      	movs	r3, #39	; 0x27
 800184a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x83;
 800184c:	2383      	movs	r3, #131	; 0x83
 800184e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6858      	ldr	r0, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	891b      	ldrh	r3, [r3, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	f002 f880 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	f107 010c 	add.w	r1, r7, #12
 800186c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2302      	movs	r3, #2
 8001874:	f002 fe06 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001878:	4603      	mov	r3, r0
 800187a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	2201      	movs	r2, #1
 8001886:	4619      	mov	r1, r3
 8001888:	f002 f86a 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800188c:	7cfb      	ldrb	r3, [r7, #19]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MPU9250_Config+0x3fe>
        return MPU9250_RESULT_FAIL;
 8001892:	2301      	movs	r3, #1
 8001894:	e101      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 8001896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189a:	f001 fd9b 	bl	80033d4 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 800189e:	23c9      	movs	r3, #201	; 0xc9
 80018a0:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6858      	ldr	r0, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	891b      	ldrh	r3, [r3, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	f002 f857 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,4,0xFFFF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	f107 010c 	add.w	r1, r7, #12
 80018be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2304      	movs	r3, #4
 80018c6:	f002 fddd 	bl	8004484 <HAL_SPI_TransmitReceive>
 80018ca:	4603      	mov	r3, r0
 80018cc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6858      	ldr	r0, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	891b      	ldrh	r3, [r3, #8]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	f002 f841 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MPU9250_Config+0x450>
        return MPU9250_RESULT_FAIL;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0d8      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    for(int i=0;i<3;i++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e032      	b.n	8001954 <MPU9250_Config+0x4bc>
        MPU9250_CONFIG->MAG_SENSITIVITY[i] = (((cmdbuf[i+1] -128)*0.5)/128)+1;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	f107 0218 	add.w	r2, r7, #24
 80018f6:	4413      	add	r3, r2
 80018f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80018fc:	3b80      	subs	r3, #128	; 0x80
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe28 	bl	8000554 <__aeabi_i2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <MPU9250_Config+0x60c>)
 800190a:	f7fe fe8d 	bl	8000628 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	4618      	mov	r0, r3
 8001914:	4621      	mov	r1, r4
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <MPU9250_Config+0x610>)
 800191c:	f7fe ffae 	bl	800087c <__aeabi_ddiv>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	4618      	mov	r0, r3
 8001926:	4621      	mov	r1, r4
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b5f      	ldr	r3, [pc, #380]	; (8001aac <MPU9250_Config+0x614>)
 800192e:	f7fe fcc5 	bl	80002bc <__adddf3>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	f7ff f925 	bl	8000b88 <__aeabi_d2f>
 800193e:	4601      	mov	r1, r0
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3304      	adds	r3, #4
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	6019      	str	r1, [r3, #0]
    for(int i=0;i<3;i++){
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b02      	cmp	r3, #2
 8001958:	ddc9      	ble.n	80018ee <MPU9250_Config+0x456>
    }

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800195a:	2325      	movs	r3, #37	; 0x25
 800195c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 800195e:	230c      	movs	r3, #12
 8001960:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6858      	ldr	r0, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	891b      	ldrh	r3, [r3, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	f001 fff7 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f107 020c 	add.w	r2, r7, #12
 800197a:	f107 010c 	add.w	r1, r7, #12
 800197e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	f002 fd7d 	bl	8004484 <HAL_SPI_TransmitReceive>
 800198a:	4603      	mov	r3, r0
 800198c:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6858      	ldr	r0, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	891b      	ldrh	r3, [r3, #8]
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	f001 ffe1 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800199e:	7cfb      	ldrb	r3, [r7, #19]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MPU9250_Config+0x510>
        return MPU9250_RESULT_FAIL;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e078      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 80019a8:	2326      	movs	r3, #38	; 0x26
 80019aa:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 80019ac:	230a      	movs	r3, #10
 80019ae:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6858      	ldr	r0, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	891b      	ldrh	r3, [r3, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f001 ffd0 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	f107 020c 	add.w	r2, r7, #12
 80019c8:	f107 010c 	add.w	r1, r7, #12
 80019cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2302      	movs	r3, #2
 80019d4:	f002 fd56 	bl	8004484 <HAL_SPI_TransmitReceive>
 80019d8:	4603      	mov	r3, r0
 80019da:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6858      	ldr	r0, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	891b      	ldrh	r3, [r3, #8]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4619      	mov	r1, r3
 80019e8:	f001 ffba 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80019ec:	7cfb      	ldrb	r3, [r7, #19]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MPU9250_Config+0x55e>
        return MPU9250_RESULT_FAIL;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e051      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80019f6:	2363      	movs	r3, #99	; 0x63
 80019f8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 80019fa:	2316      	movs	r3, #22
 80019fc:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6858      	ldr	r0, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	891b      	ldrh	r3, [r3, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f001 ffa9 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f107 010c 	add.w	r1, r7, #12
 8001a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	f002 fd2f 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001a26:	4603      	mov	r3, r0
 8001a28:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6858      	ldr	r0, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	891b      	ldrh	r3, [r3, #8]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4619      	mov	r1, r3
 8001a36:	f001 ff93 	bl	8003960 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MPU9250_Config+0x5ac>
        return MPU9250_RESULT_FAIL;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e02a      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001a44:	2327      	movs	r3, #39	; 0x27
 8001a46:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 8001a48:	2381      	movs	r3, #129	; 0x81
 8001a4a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6858      	ldr	r0, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	891b      	ldrh	r3, [r3, #8]
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	f001 ff82 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	f107 010c 	add.w	r1, r7, #12
 8001a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f002 fd08 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001a74:	4603      	mov	r3, r0
 8001a76:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6858      	ldr	r0, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	891b      	ldrh	r3, [r3, #8]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4619      	mov	r1, r3
 8001a84:	f001 ff6c 	bl	8003960 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001a88:	2064      	movs	r0, #100	; 0x64
 8001a8a:	f001 fca3 	bl	80033d4 <HAL_Delay>

    //Ex
    if (res != HAL_OK) {
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MPU9250_Config+0x600>
        return MPU9250_RESULT_FAIL;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <MPU9250_Config+0x602>
    }

    return MPU9250_RESULT_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	3fe00000 	.word	0x3fe00000
 8001aa8:	40600000 	.word	0x40600000
 8001aac:	3ff00000 	.word	0x3ff00000

08001ab0 <MPU9250_Update6DOF>:

MPU9250_Result_t MPU9250_Update6DOF(MPU9250_CONFIG_t *MPU9250_CONFIG,MPU9250_DATA_t *MPU9250_DATA){
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b08d      	sub	sp, #52	; 0x34
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    uint8_t cmdbuf[15] = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	f8c3 200b 	str.w	r2, [r3, #11]
    HAL_StatusTypeDef res;

    /* MPU9250_Get_Accel_Gyro_and_Temp ---------------------------------------------------------*/

    uint8_t cmd_base = MPU9250_ACCEL_XOUT_H|0x80;
 8001aca:	23bb      	movs	r3, #187	; 0xbb
 8001acc:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < 15; ++i) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ad4:	e010      	b.n	8001af8 <MPU9250_Update6DOF+0x48>
        cmdbuf[i] = cmd_base + i;
 8001ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ada:	7ff9      	ldrb	r1, [r7, #31]
 8001adc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ae0:	440a      	add	r2, r1
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ae8:	440b      	add	r3, r1
 8001aea:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 15; ++i) {
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	3301      	adds	r3, #1
 8001af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afc:	2b0e      	cmp	r3, #14
 8001afe:	d9ea      	bls.n	8001ad6 <MPU9250_Update6DOF+0x26>
    }

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6858      	ldr	r0, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	891b      	ldrh	r3, [r3, #8]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f001 ff28 	bl	8003960 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,15,0xFFFF);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	f107 010c 	add.w	r1, r7, #12
 8001b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	230f      	movs	r3, #15
 8001b24:	f002 fcae 	bl	8004484 <HAL_SPI_TransmitReceive>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6858      	ldr	r0, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	891b      	ldrh	r3, [r3, #8]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4619      	mov	r1, r3
 8001b38:	f001 ff12 	bl	8003960 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001b3c:	7fbb      	ldrb	r3, [r7, #30]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MPU9250_Update6DOF+0x96>
        return MPU9250_RESULT_FAIL;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0ae      	b.n	8001ca4 <MPU9250_Update6DOF+0x1f4>
    }

    for(int i=0;i<3;i++){
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	e07a      	b.n	8001c42 <MPU9250_Update6DOF+0x192>
        MPU9250_DATA->accel_raw[i] = (uint16_t)cmdbuf[2*i+1] << 8 | cmdbuf[2*i+2];
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	3301      	adds	r3, #1
 8001b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b56:	4413      	add	r3, r2
 8001b58:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	b299      	uxth	r1, r3
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	460a      	mov	r2, r1
 8001b84:	809a      	strh	r2, [r3, #4]
        MPU9250_DATA->gyro_raw[i] = (uint16_t)cmdbuf[2*i+9] << 8 | cmdbuf[2*i+10];
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	3309      	adds	r3, #9
 8001b8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b90:	4413      	add	r3, r2
 8001b92:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21a      	sxth	r2, r3
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	3305      	adds	r3, #5
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	3210      	adds	r2, #16
 8001bb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MPU9250_DATA->accel[i] = ((int16_t)MPU9250_DATA->accel_raw[i] * MPU9250_CONFIG->ARES) - MPU9250_CONFIG->ACCEL_OFFSET[i];
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	3308      	adds	r3, #8
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
        MPU9250_DATA->gyro[i] = ((int16_t)MPU9250_DATA->gyro_raw[i] * MPU9250_CONFIG->GRES) - MPU9250_CONFIG->GYRO_OFFSET[i];
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	3210      	adds	r2, #16
 8001c00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	330a      	adds	r3, #10
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	3304      	adds	r3, #4
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3304      	adds	r3, #4
 8001c38:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<3;i++){
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	dd81      	ble.n	8001b4c <MPU9250_Update6DOF+0x9c>
    }
    MPU9250_DATA->temperature_raw = ((uint16_t)cmdbuf[7] << 8) | cmdbuf[8];
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	7d3b      	ldrb	r3, [r7, #20]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    MPU9250_DATA->temperature = (MPU9250_DATA->temperature_raw/333.87) + 21.0;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc75 	bl	8000554 <__aeabi_i2d>
 8001c6a:	a312      	add	r3, pc, #72	; (adr r3, 8001cb4 <MPU9250_Update6DOF+0x204>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fe04 	bl	800087c <__aeabi_ddiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MPU9250_Update6DOF+0x200>)
 8001c82:	f7fe fb1b 	bl	80002bc <__adddf3>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f7fe ff7b 	bl	8000b88 <__aeabi_d2f>
 8001c92:	4602      	mov	r2, r0
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

    if (res != HAL_OK) {
 8001c98:	7fbb      	ldrb	r3, [r7, #30]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MPU9250_Update6DOF+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <MPU9250_Update6DOF+0x1f4>
    }

    return MPU9250_RESULT_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	372c      	adds	r7, #44	; 0x2c
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	f3af 8000 	nop.w
 8001cb0:	40350000 	.word	0x40350000
 8001cb4:	851eb852 	.word	0x851eb852
 8001cb8:	4074ddeb 	.word	0x4074ddeb

08001cbc <MPU9250_Calibrate>:
    }

    return MPU9250_RESULT_OK;
}

MPU9250_Result_t MPU9250_Calibrate(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09a      	sub	sp, #104	; 0x68
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    MPU9250_DATA_t MPU9250_TEMP;
    float ax_sum=0,ay_sum=0,az_sum=0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    float gx_sum=0,gy_sum=0,gz_sum=0;
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50

    /* MPU9250_Accel_Gyro_Calibration---------------------------------------------------------*/
    for (uint8_t i = 0; i < 3; ++i) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001cee:	e018      	b.n	8001d22 <MPU9250_Calibrate+0x66>
        MPU9250_TEMP.accel_raw[i] = 0;
 8001cf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f823 2c5c 	strh.w	r2, [r3, #-92]
        MPU9250_TEMP.accel[i] = 0;
 8001d04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b60      	subs	r3, #96	; 0x60
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i) {
 8001d18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d9e2      	bls.n	8001cf0 <MPU9250_Calibrate+0x34>
    }

    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001d30:	e03e      	b.n	8001db0 <MPU9250_Calibrate+0xf4>
        MPU9250_Update6DOF(MPU9250_CONFIG,&MPU9250_TEMP);
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	4619      	mov	r1, r3
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff feb9 	bl	8001ab0 <MPU9250_Update6DOF>
        ax_sum += MPU9250_TEMP.accel[0];
 8001d3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d42:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        ay_sum += MPU9250_TEMP.accel[1];
 8001d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d52:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        az_sum += MPU9250_TEMP.accel[2] - 1;
 8001d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d6a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        gx_sum += MPU9250_TEMP.gyro[0];
 8001d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d82:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        gy_sum += MPU9250_TEMP.gyro[1];
 8001d86:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d8a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        gz_sum += MPU9250_TEMP.gyro[2];
 8001d96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d9a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001da6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001db0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db8:	d3bb      	bcc.n	8001d32 <MPU9250_Calibrate+0x76>
    }
    MPU9250_CONFIG->ACCEL_OFFSET[0] = ax_sum/CALIBRATE_TIMES;
 8001dba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001dbe:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	edc3 7a08 	vstr	s15, [r3, #32]
    MPU9250_CONFIG->ACCEL_OFFSET[1] = ay_sum/CALIBRATE_TIMES;
 8001dcc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001dd0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    MPU9250_CONFIG->ACCEL_OFFSET[2] = az_sum/CALIBRATE_TIMES;
 8001dde:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001de2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    MPU9250_CONFIG->GYRO_OFFSET[0] = gx_sum/CALIBRATE_TIMES;
 8001df0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001df4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    MPU9250_CONFIG->GYRO_OFFSET[1] = gy_sum/CALIBRATE_TIMES;
 8001e02:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e06:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    MPU9250_CONFIG->GYRO_OFFSET[2] = gz_sum/CALIBRATE_TIMES;
 8001e14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e18:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001e30 <MPU9250_Calibrate+0x174>
 8001e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    return MPU9250_RESULT_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3768      	adds	r7, #104	; 0x68
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	447a0000 	.word	0x447a0000

08001e34 <attitudeInit>:
#include <math.h>
#include "attitude.h"

#define betaDef         0.1 // 2 * proportional gain

void attitudeInit(AttitudeState *s) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    // gyroscope drift estimated to be 1 deg/s
    s->beta = sqrt(3.0/4) * 3.14159265358979 * (1.0/180.0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <attitudeInit+0x40>)
 8001e40:	601a      	str	r2, [r3, #0]
    s->q0 = 1.0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e48:	60da      	str	r2, [r3, #12]
    s->q1 = s->q2 = s->q3 = 0.0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	615a      	str	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]
    s->step = 0.0000175;  // step for gradient descent found through testing
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <attitudeInit+0x44>)
 8001e66:	605a      	str	r2, [r3, #4]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	3c77a4e2 	.word	0x3c77a4e2
 8001e78:	3792ccf7 	.word	0x3792ccf7
 8001e7c:	00000000 	.word	0x00000000

08001e80 <computeAngles>:

void computeAngles(AttitudeState *s)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    float q0 = s->q0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    float q1 = s->q1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
    float q2 = s->q2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
    float q3 = s->q3;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	623b      	str	r3, [r7, #32]
    float q2q2 = q2 * q2;
 8001ea0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ea4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a07 	vstr	s15, [r7, #28]
    float t0 = -2.0 * (q2q2 + q3 * q3) + 1.0;
 8001eb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	ee17 0a90 	vmov	r0, s15
 8001ec8:	f7fe fb56 	bl	8000578 <__aeabi_f2d>
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001ed4:	f7fe fba8 	bl	8000628 <__aeabi_dmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	4618      	mov	r0, r3
 8001ede:	4621      	mov	r1, r4
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <computeAngles+0x218>)
 8001ee6:	f7fe f9e9 	bl	80002bc <__adddf3>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	f7fe fe49 	bl	8000b88 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	61bb      	str	r3, [r7, #24]
    float t1 = 2.0 * (q1 * q2 + q0 * q3);
 8001efa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001efe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f06:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f1a:	edc7 7a05 	vstr	s15, [r7, #20]
    float t2 = -2.0 * (q1 * q3 - q0 * q2);
 8001f1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f22:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	edc7 7a04 	vstr	s15, [r7, #16]
    float t3 = 2.0 * (q2 * q3 + q0 * q1);
 8001f46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f52:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f66:	edc7 7a03 	vstr	s15, [r7, #12]
    float t4 = -2.0 * (q1 * q1 + q2q2) + 1.0;
 8001f6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	ee17 0a90 	vmov	r0, s15
 8001f82:	f7fe faf9 	bl	8000578 <__aeabi_f2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001f8e:	f7fe fb4b 	bl	8000628 <__aeabi_dmul>
 8001f92:	4603      	mov	r3, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	4618      	mov	r0, r3
 8001f98:	4621      	mov	r1, r4
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <computeAngles+0x218>)
 8001fa0:	f7fe f98c 	bl	80002bc <__adddf3>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	4621      	mov	r1, r4
 8001fac:	f7fe fdec 	bl	8000b88 <__aeabi_d2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60bb      	str	r3, [r7, #8]

    t2 = t2 > 1.0 ? 1.0 : t2;
 8001fb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	dd02      	ble.n	8001fcc <computeAngles+0x14c>
 8001fc6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fca:	e000      	b.n	8001fce <computeAngles+0x14e>
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	613b      	str	r3, [r7, #16]
    t2 = t2 < -1.0 ? -1.0 : t2;
 8001fd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	d501      	bpl.n	8001fe6 <computeAngles+0x166>
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <computeAngles+0x21c>)
 8001fe4:	e000      	b.n	8001fe8 <computeAngles+0x168>
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	613b      	str	r3, [r7, #16]

    s->pitch = asin(t2) * 57.29578;
 8001fea:	6938      	ldr	r0, [r7, #16]
 8001fec:	f7fe fac4 	bl	8000578 <__aeabi_f2d>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	ec44 3b10 	vmov	d0, r3, r4
 8001ff8:	f004 fb04 	bl	8006604 <asin>
 8001ffc:	ec51 0b10 	vmov	r0, r1, d0
 8002000:	a323      	add	r3, pc, #140	; (adr r3, 8002090 <computeAngles+0x210>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb0f 	bl	8000628 <__aeabi_dmul>
 800200a:	4603      	mov	r3, r0
 800200c:	460c      	mov	r4, r1
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    s->roll = atan2(t3, t4) * 57.29578;
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7fe faaf 	bl	8000578 <__aeabi_f2d>
 800201a:	4604      	mov	r4, r0
 800201c:	460d      	mov	r5, r1
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f7fe faaa 	bl	8000578 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	ec43 2b11 	vmov	d1, r2, r3
 800202c:	ec45 4b10 	vmov	d0, r4, r5
 8002030:	f004 fb40 	bl	80066b4 <atan2>
 8002034:	ec51 0b10 	vmov	r0, r1, d0
 8002038:	a315      	add	r3, pc, #84	; (adr r3, 8002090 <computeAngles+0x210>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4603      	mov	r3, r0
 8002044:	460c      	mov	r4, r1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	e9c2 3408 	strd	r3, r4, [r2, #32]
    s->yaw = atan2(t1, t0) * 57.29578;
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7fe fa93 	bl	8000578 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	69b8      	ldr	r0, [r7, #24]
 8002058:	f7fe fa8e 	bl	8000578 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	ec43 2b11 	vmov	d1, r2, r3
 8002064:	ec45 4b10 	vmov	d0, r4, r5
 8002068:	f004 fb24 	bl	80066b4 <atan2>
 800206c:	ec51 0b10 	vmov	r0, r1, d0
 8002070:	a307      	add	r3, pc, #28	; (adr r3, 8002090 <computeAngles+0x210>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fad7 	bl	8000628 <__aeabi_dmul>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 8002084:	bf00      	nop
 8002086:	3730      	adds	r7, #48	; 0x30
 8002088:	46bd      	mov	sp, r7
 800208a:	bdb0      	pop	{r4, r5, r7, pc}
 800208c:	f3af 8000 	nop.w
 8002090:	1e7967cb 	.word	0x1e7967cb
 8002094:	404ca5dc 	.word	0x404ca5dc
 8002098:	3ff00000 	.word	0x3ff00000
 800209c:	bf800000 	.word	0xbf800000

080020a0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x) {
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 80020aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	613b      	str	r3, [r7, #16]
    long i = *(long*)&y;
 80020be:	f107 0310 	add.w	r3, r7, #16
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i>>1);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	105a      	asrs	r2, r3, #1
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <invSqrt+0x9c>)
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 80020d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80020f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fc:	edc7 7a04 	vstr	s15, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 8002100:	ed97 7a04 	vldr	s14, [r7, #16]
 8002104:	edd7 7a05 	vldr	s15, [r7, #20]
 8002108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002114:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800211c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002124:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	ee07 3a90 	vmov	s15, r3
}
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	5f3759df 	.word	0x5f3759df

08002140 <normalizeGravity>:

void normalizeGravity(AttitudeState *s, float* acc) {
 8002140:	b480      	push	{r7}
 8002142:	b095      	sub	sp, #84	; 0x54
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    float q0, q1, q2, q3;
    float q0q0, q1q1, q2q2, q3q3;
    float q0q1, q0q2, q0q3;
    float q1q2, q1q3;
    float q2q3;
    q0 = s->q0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	64fb      	str	r3, [r7, #76]	; 0x4c
    q1 = s->q1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
    q2 = s->q2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	647b      	str	r3, [r7, #68]	; 0x44
    q3 = s->q3;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
    q0q0 = q0*q0;
 8002162:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002166:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800216a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q1q1 = q1*q1;
 8002172:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002176:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800217a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q2q2 = q2*q2;
 8002182:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002186:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q3q3 = q3*q3;
 8002192:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002196:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    q0q1 = q0*q1;
 80021a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    q0q2 = q0*q2;
 80021b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    q0q3 = q0*q3;
 80021c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    q1q2 = q1*q2;
 80021d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a08 	vstr	s15, [r7, #32]
    q1q3 = q1*q3;
 80021e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	edc7 7a07 	vstr	s15, [r7, #28]
    q2q3 = q2*q3;
 80021f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80021f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc7 7a06 	vstr	s15, [r7, #24]

    // rotate acceleration vector by quaternion orientation
    // essentially rotating sensor frame into inertial frame
    float r_acc[3];
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	ed93 7a00 	vldr	s14, [r3]
 8002208:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800220c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002210:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002214:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	3308      	adds	r3, #8
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800222c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	3304      	adds	r3, #4
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	edd3 6a00 	vldr	s13, [r3]
 8002246:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800224a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 800224e:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002252:	edd7 7a08 	vldr	s15, [r7, #32]
 8002256:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226a:	edd7 7a07 	vldr	s15, [r7, #28]
 800226e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3308      	adds	r3, #8
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	edd3 6a00 	vldr	s13, [r3]
 8002288:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002290:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	edd3 6a00 	vldr	s13, [r3]
 800229a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 80022a6:	edc7 7a03 	vstr	s15, [r7, #12]
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 80022aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80022ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	3304      	adds	r3, #4
 80022c0:	edd3 6a00 	vldr	s13, [r3]
 80022c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3308      	adds	r3, #8
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 80022e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 80022fa:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	edd3 6a00 	vldr	s13, [r3]
 8002306:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800230a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	3304      	adds	r3, #4
 8002316:	edd3 6a00 	vldr	s13, [r3]
 800231a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800231e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002322:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 8002326:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800232a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	3308      	adds	r3, #8
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 800233a:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	edd3 6a00 	vldr	s13, [r3]
 8002346:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800234a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234e:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 8002352:	edc7 7a04 	vstr	s15, [r7, #16]
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002356:	edd7 7a07 	vldr	s15, [r7, #28]
 800235a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	edd7 7a06 	vldr	s15, [r7, #24]
 800236c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3304      	adds	r3, #4
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	3308      	adds	r3, #8
 8002384:	edd3 6a00 	vldr	s13, [r3]
 8002388:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800238c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002390:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 8002394:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002398:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3308      	adds	r3, #8
 80023ae:	edd3 6a00 	vldr	s13, [r3]
 80023b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	3304      	adds	r3, #4
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3308      	adds	r3, #8
 80023da:	edd3 6a00 	vldr	s13, [r3]
 80023de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3308      	adds	r3, #8
 80023ee:	edd3 6a00 	vldr	s13, [r3]
 80023f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 80023fe:	edc7 7a05 	vstr	s15, [r7, #20]
    acc[0] = r_acc[0];
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]
    acc[1] = r_acc[1];
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	3304      	adds	r3, #4
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	601a      	str	r2, [r3, #0]
    acc[2] = r_acc[2] - 1; // subtract out gravity component from acc
 8002410:	edd7 7a05 	vldr	s15, [r7, #20]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3308      	adds	r3, #8
 8002418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800241c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002420:	edc3 7a00 	vstr	s15, [r3]
}
 8002424:	bf00      	nop
 8002426:	3754      	adds	r7, #84	; 0x54
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <madgwickUpdate>:

void madgwickUpdate(AttitudeState *s, float* acc, float* gyro, uint8_t sz) {
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b0aa      	sub	sp, #168	; 0xa8
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	70fb      	strb	r3, [r7, #3]
    float w_x, w_y, w_z, a_x, a_y, a_z;
    float invNorm;
    float deltat = s->step;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float beta = s->beta;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float qDot_omega_1, qDot_omega_2, qDot_omega_3, qDot_omega_4;  // quaternion derivative from gyroscopes elements
    float f_1, f_2, f_3;                                        // objective function elements
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;   // objective function Jacobian elements
    float qHatDot_1, qHatDot_2, qHatDot_3, qHatDot_4;   // estimated direction of the gyroscope error
    // Auxiliary variables to avoid repeated calculations
    w_x = gyro[0];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    w_y = gyro[1];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    w_z = gyro[2];
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    a_x = acc[0];
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    a_y = acc[1];
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    a_z = acc[2];
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q_1 = s->q0;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    q_2 = s->q1;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    q_3 = s->q2;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	67fb      	str	r3, [r7, #124]	; 0x7c
    q_4 = s->q3;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	67bb      	str	r3, [r7, #120]	; 0x78
    float halfq_1 = 0.5 * q_1;
 800249a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800249e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float halfq_2 = 0.5 * q_2;
 80024aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80024ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float halfq_3 = 0.5 * q_3;
 80024ba:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80024be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float halfq_4 = 0.5 * q_4;
 80024ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80024ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float twoq_1 = 2.0 * q_1;
 80024da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80024de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024e2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float twoq_2 = 2.0 * q_2;
 80024e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80024ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float twoq_3 = 2.0 * q_3;
 80024f2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80024f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // Normalize the accelerometer measurement
    invNorm = invSqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 80024fe:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002502:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800250e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800251e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	f7ff fdb7 	bl	80020a0 <invSqrt>
 8002532:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    a_x *= invNorm;
 8002536:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800253a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    a_y *= invNorm;
 8002546:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800254a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    a_z *= invNorm;
 8002556:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800255a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    // Compute the objective function and Jacobian
    f_1 = twoq_2 * q_4 - twoq_1 * q_3 - a_x;
 8002566:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800256a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800256e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002572:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002576:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800257a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002582:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    f_2 = twoq_1 * q_2 + twoq_3 * q_4 - a_y;
 800258e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002592:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800259a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800259e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025aa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    f_3 = 1.0 - twoq_2 * q_2 - twoq_3 * q_3 - a_z;
 80025b6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80025ba:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	ee17 0a90 	vmov	r0, s15
 80025c6:	f7fd ffd7 	bl	8000578 <__aeabi_f2d>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	461a      	mov	r2, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	49f0      	ldr	r1, [pc, #960]	; (8002998 <madgwickUpdate+0x568>)
 80025d8:	f7fd fe6e 	bl	80002b8 <__aeabi_dsub>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	4625      	mov	r5, r4
 80025e2:	461c      	mov	r4, r3
 80025e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80025e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80025ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f0:	ee17 0a90 	vmov	r0, s15
 80025f4:	f7fd ffc0 	bl	8000578 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4620      	mov	r0, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	f7fd fe5a 	bl	80002b8 <__aeabi_dsub>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4625      	mov	r5, r4
 800260a:	461c      	mov	r4, r3
 800260c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002610:	f7fd ffb2 	bl	8000578 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4620      	mov	r0, r4
 800261a:	4629      	mov	r1, r5
 800261c:	f7fd fe4c 	bl	80002b8 <__aeabi_dsub>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	4618      	mov	r0, r3
 8002626:	4621      	mov	r1, r4
 8002628:	f7fe faae 	bl	8000b88 <__aeabi_d2f>
 800262c:	4603      	mov	r3, r0
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_11or24 = twoq_3;  // J_11 negated in matrix multiplication
 8002630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
    J_12or23 = 2.0 * q_4;
 8002634:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_13or22 = twoq_1;  // J_12 negated in matrix multiplication
 8002640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
    J_14or21 = twoq_2;
 8002644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
    J_32 = 2.0 * J_14or21;  // negated in matrix multiplication
 8002648:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800264c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002650:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    J_33 = 2.0 * J_11or24;  // negated in matrix multiplication
 8002654:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002658:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800265c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // Compute the gradient (matrix multiplication)
    qHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8002660:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002664:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002670:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8002680:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002684:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002690:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 80026b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80026b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80026b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026bc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80026c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026cc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 80026e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80026e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ec:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80026f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80026f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Normalize the gradient
    invNorm = invSqrt(qHatDot_1 * qHatDot_1 + qHatDot_2 * qHatDot_2 + qHatDot_3 * qHatDot_3 + qHatDot_4 * qHatDot_4);
 8002700:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002704:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002720:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f7ff fcae 	bl	80020a0 <invSqrt>
 8002744:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    qHatDot_1 *= invNorm;
 8002748:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800274c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 *= invNorm;
 8002758:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800275c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 *= invNorm;
 8002768:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800276c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 *= invNorm;
 8002778:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800277c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002784:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute the quaternion derivative measured by gyroscopes
    qDot_omega_1 = -halfq_2 * w_x - halfq_3 * w_y - halfq_4 * w_z;
 8002788:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800278c:	eeb1 7a67 	vneg.f32	s14, s15
 8002790:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800279c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80027ac:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80027b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b8:	edc7 7a08 	vstr	s15, [r7, #32]
    qDot_omega_2 = halfq_1 * w_x + halfq_3 * w_z - halfq_4 * w_y;
 80027bc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80027c0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80027cc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80027d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80027dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e8:	edc7 7a07 	vstr	s15, [r7, #28]
    qDot_omega_3 = halfq_1 * w_y - halfq_2 * w_z + halfq_4 * w_x;
 80027ec:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80027f0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80027fc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002808:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800280c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	edc7 7a06 	vstr	s15, [r7, #24]
    qDot_omega_4 = halfq_1 * w_z + halfq_2 * w_y - halfq_3 * w_x;
 800281c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002820:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800282c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002838:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800283c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002848:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute then integrate the estimated quaternion derivative
    q_1 += (qDot_omega_1 - (beta * qHatDot_1)) * deltat;
 800284c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002850:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002858:	ed97 7a08 	vldr	s14, [r7, #32]
 800285c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002860:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 += (qDot_omega_2 - (beta * qHatDot_2)) * deltat;
 8002874:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002878:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800287c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002880:	ed97 7a07 	vldr	s14, [r7, #28]
 8002884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002888:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800288c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002890:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 += (qDot_omega_3 - (beta * qHatDot_3)) * deltat;
 800289c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80028a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80028ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 += (qDot_omega_4 - (beta * qHatDot_4)) * deltat;
 80028c4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80028c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80028d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80028dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalize quaternion
    invNorm = invSqrt(q_1 * q_1 + q_2 * q_2 + q_3 * q_3 + q_4 * q_4);
 80028ec:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80028f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80028f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f8:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80028fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800290c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002918:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800291c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	eeb0 0a67 	vmov.f32	s0, s15
 800292c:	f7ff fbb8 	bl	80020a0 <invSqrt>
 8002930:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    q_1 *= invNorm;
 8002934:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002938:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002940:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 *= invNorm;
 8002944:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002948:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800294c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002950:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 *= invNorm;
 8002954:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002958:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 *= invNorm;
 8002964:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002968:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800296c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002970:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Save new quaternion to state
    s->q0 = q_1;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800297a:	60da      	str	r2, [r3, #12]
    s->q1 = q_2;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002982:	611a      	str	r2, [r3, #16]
    s->q2 = q_3;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002988:	615a      	str	r2, [r3, #20]
    s->q3 = q_4;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800298e:	619a      	str	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	37a8      	adds	r7, #168	; 0xa8
 8002994:	46bd      	mov	sp, r7
 8002996:	bdb0      	pop	{r4, r5, r7, pc}
 8002998:	3ff00000 	.word	0x3ff00000

0800299c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t computeAttitude = 0;
volatile uint16_t num_computations = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    computeAttitude = 1;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
    ++num_computations;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029b6:	801a      	strh	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20000090 	.word	0x20000090
 80029c8:	20000092 	.word	0x20000092

080029cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0b4      	sub	sp, #208	; 0xd0
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d2:	f000 fc8d 	bl	80032f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d6:	f000 f8bf 	bl	8002b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029da:	f000 f9c1 	bl	8002d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029de:	f000 f995 	bl	8002d0c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80029e2:	f000 f927 	bl	8002c34 <MX_SPI2_Init>
  MX_TIM6_Init();
 80029e6:	f000 f95b 	bl	8002ca0 <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU9250_DATA_t mpu_data;
  MPU9250_CONFIG_t mpu_config;
  mpu_config.hspi = &hspi2;
 80029ea:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <main+0x16c>)
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
  mpu_config.GPIOx = MPU_CS_GPIO_Port;
 80029ee:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <main+0x170>)
 80029f0:	64bb      	str	r3, [r7, #72]	; 0x48
  mpu_config.GPIO_PIN = MPU_CS_Pin;
 80029f2:	2308      	movs	r3, #8
 80029f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  mpu_config.ACCEL_SCALE = ACCEL_SCALE_4G;
 80029f8:	2308      	movs	r3, #8
 80029fa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  mpu_config.GYRO_SCALE = GYRO_SCALE_500dps;
 80029fe:	2308      	movs	r3, #8
 8002a00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  for (uint8_t i = 0; i < 3; ++i) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8002a0a:	e025      	b.n	8002a58 <main+0x8c>
      mpu_config.ACCEL_OFFSET[i] = 0;
 8002a0c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002a10:	3308      	adds	r3, #8
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b8c      	subs	r3, #140	; 0x8c
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
      mpu_config.GYRO_OFFSET[i] = 0;
 8002a22:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002a26:	330a      	adds	r3, #10
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b88      	subs	r3, #136	; 0x88
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
      mpu_config.MAG_OFFSET[i] = 0;
 8002a38:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002a3c:	330e      	adds	r3, #14
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002a44:	4413      	add	r3, r2
 8002a46:	3b8c      	subs	r3, #140	; 0x8c
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 3; ++i) {
 8002a4e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002a52:	3301      	adds	r3, #1
 8002a54:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8002a58:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d9d5      	bls.n	8002a0c <main+0x40>
  }
  MPU9250_Initialize(&mpu_config);
 8002a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fa5f 	bl	8000f28 <MPU9250_Initialize>
  MPU9250_Config(&mpu_config);
 8002a6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fd12 	bl	8001498 <MPU9250_Config>
  MPU9250_Calibrate(&mpu_config);
 8002a74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f91f 	bl	8001cbc <MPU9250_Calibrate>

  // Initialize attitude variables
  AttitudeState s;
  attitudeInit(&s);
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f9d7 	bl	8001e34 <attitudeInit>
  // start timer for quaternion computations
  HAL_TIM_Base_Start_IT(&htim6);
 8002a86:	482e      	ldr	r0, [pc, #184]	; (8002b40 <main+0x174>)
 8002a88:	f001 ff75 	bl	8004976 <HAL_TIM_Base_Start_IT>
  while (1)
  {
      if (computeAttitude) {
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <main+0x178>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0fa      	beq.n	8002a8c <main+0xc0>
          MPU9250_Update6DOF(&mpu_config, &mpu_data);
 8002a96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f805 	bl	8001ab0 <MPU9250_Update6DOF>
          madgwickUpdate(&s, mpu_data.accel, mpu_data.gyro, 3);
 8002aa6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002aaa:	f103 0214 	add.w	r2, r3, #20
 8002aae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f7ff fcbb 	bl	8002430 <madgwickUpdate>
          computeAngles(&s);
 8002aba:	463b      	mov	r3, r7
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f9df 	bl	8001e80 <computeAngles>
          if (num_computations >= 100) {
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <main+0x17c>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b63      	cmp	r3, #99	; 0x63
 8002aca:	d930      	bls.n	8002b2e <main+0x162>
//              printf("%i ", (int32_t) (s.pitch));
//              printf("%i\r\n", (int32_t) (s.yaw));
//              printf("x: %i ", (int32_t) (mpu_data.accel[0]*1000));
//                printf("y: %i ", (int32_t) (mpu_data.accel[1]*1000));
//                printf("z: %i\r\n", (int32_t) (mpu_data.accel[2]*1000));
              normalizeGravity(&s, mpu_data.accel);
 8002acc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fb33 	bl	8002140 <normalizeGravity>
              printf("%i ", (int32_t) (mpu_data.accel[0]*10000));
 8002ada:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002ade:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b4c <main+0x180>
 8002ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aea:	ee17 1a90 	vmov	r1, s15
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <main+0x184>)
 8002af0:	f002 fea4 	bl	800583c <iprintf>
              printf("%i ", (int32_t) (mpu_data.accel[1]*10000));
 8002af4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002af8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b4c <main+0x180>
 8002afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b04:	ee17 1a90 	vmov	r1, s15
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <main+0x184>)
 8002b0a:	f002 fe97 	bl	800583c <iprintf>
              printf("%i\r\n", (int32_t) (mpu_data.accel[2]*10000));
 8002b0e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b12:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b4c <main+0x180>
 8002b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1e:	ee17 1a90 	vmov	r1, s15
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <main+0x188>)
 8002b24:	f002 fe8a 	bl	800583c <iprintf>
//                printf("gyro x: %i, ", (int32_t) (mpu_data.gyro[0]*1000));
//                printf("gyro y: %i, ", (int32_t) (mpu_data.gyro[1]*1000));
//                printf("gyro z: %i \n\r", (int32_t) (mpu_data.gyro[2]*1000));
              num_computations = 0;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <main+0x17c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
          } // prints at 1 Hz
          computeAttitude = 0;
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <main+0x178>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
      if (computeAttitude) {
 8002b34:	e7aa      	b.n	8002a8c <main+0xc0>
 8002b36:	bf00      	nop
 8002b38:	200000a0 	.word	0x200000a0
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	200000f8 	.word	0x200000f8
 8002b44:	20000090 	.word	0x20000090
 8002b48:	20000092 	.word	0x20000092
 8002b4c:	461c4000 	.word	0x461c4000
 8002b50:	08007178 	.word	0x08007178
 8002b54:	0800717c 	.word	0x0800717c

08002b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b094      	sub	sp, #80	; 0x50
 8002b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	2234      	movs	r2, #52	; 0x34
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fe60 	bl	800582c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <SystemClock_Config+0xd4>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <SystemClock_Config+0xd4>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <SystemClock_Config+0xd4>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <SystemClock_Config+0xd8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ba4:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <SystemClock_Config+0xd8>)
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <SystemClock_Config+0xd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f98f 	bl	8003f08 <HAL_RCC_OscConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002bf0:	f000 f94a 	bl	8002e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	2104      	movs	r1, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 febe 	bl	8003994 <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002c1e:	f000 f933 	bl	8002e88 <Error_Handler>
  }
}
 8002c22:	bf00      	nop
 8002c24:	3750      	adds	r7, #80	; 0x50
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000

08002c34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <MX_SPI2_Init+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c54:	2202      	movs	r2, #2
 8002c56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c68:	2228      	movs	r2, #40	; 0x28
 8002c6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c80:	220a      	movs	r2, #10
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <MX_SPI2_Init+0x64>)
 8002c86:	f001 fb99 	bl	80043bc <HAL_SPI_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c90:	f000 f8fa 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200000a0 	.word	0x200000a0
 8002c9c:	40003800 	.word	0x40003800

08002ca0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cb0:	4a15      	ldr	r2, [pc, #84]	; (8002d08 <MX_TIM6_Init+0x68>)
 8002cb2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 639;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cb6:	f240 227f 	movw	r2, #639	; 0x27f
 8002cba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cc4:	2263      	movs	r2, #99	; 0x63
 8002cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cce:	480d      	ldr	r0, [pc, #52]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cd0:	f001 fe26 	bl	8004920 <HAL_TIM_Base_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002cda:	f000 f8d5 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <MX_TIM6_Init+0x64>)
 8002cec:	f002 f838 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002cf6:	f000 f8c7 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200000f8 	.word	0x200000f8
 8002d08:	40001000 	.word	0x40001000

08002d0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_USART2_UART_Init+0x50>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART2_UART_Init+0x4c>)
 8002d44:	f002 f89c 	bl	8004e80 <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d4e:	f000 f89b 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000138 	.word	0x20000138
 8002d5c:	40004400 	.word	0x40004400

08002d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <MX_GPIO_Init+0xf4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	2108      	movs	r1, #8
 8002dea:	481b      	ldr	r0, [pc, #108]	; (8002e58 <MX_GPIO_Init+0xf8>)
 8002dec:	f000 fdb8 	bl	8003960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2120      	movs	r1, #32
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <MX_GPIO_Init+0xfc>)
 8002df6:	f000 fdb3 	bl	8003960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e00:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_GPIO_Init+0x100>)
 8002e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_GPIO_Init+0xf8>)
 8002e10:	f000 fc14 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_CS_Pin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8002e14:	2308      	movs	r3, #8
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e20:	2302      	movs	r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480b      	ldr	r0, [pc, #44]	; (8002e58 <MX_GPIO_Init+0xf8>)
 8002e2c:	f000 fc06 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e30:	2320      	movs	r3, #32
 8002e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_GPIO_Init+0xfc>)
 8002e48:	f000 fbf8 	bl	800363c <HAL_GPIO_Init>

}
 8002e4c:	bf00      	nop
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	10210000 	.word	0x10210000

08002e64 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002e6c:	1d39      	adds	r1, r7, #4
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	2201      	movs	r2, #1
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <__io_putchar+0x20>)
 8002e76:	f002 f850 	bl	8004f1a <HAL_UART_Transmit>
  return ch;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000138 	.word	0x20000138

08002e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	2007      	movs	r0, #7
 8002ed8:	f000 fb6e 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <HAL_SPI_MspInit+0xe0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d15a      	bne.n	8002fc0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_SPI_MspInit+0xe4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002f6e:	2307      	movs	r3, #7
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <HAL_SPI_MspInit+0xe8>)
 8002f7a:	f000 fb5f 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f8e:	2305      	movs	r3, #5
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <HAL_SPI_MspInit+0xe8>)
 8002f9a:	f000 fb4f 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fb0:	2305      	movs	r3, #5
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <HAL_SPI_MspInit+0xec>)
 8002fbc:	f000 fb3e 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40003800 	.word	0x40003800
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020800 	.word	0x40020800
 8002fd4:	40020400 	.word	0x40020400

08002fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_TIM_Base_MspInit+0x48>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d115      	bne.n	8003016 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_TIM_Base_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <HAL_TIM_Base_MspInit+0x4c>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_TIM_Base_MspInit+0x4c>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	2036      	movs	r0, #54	; 0x36
 800300c:	f000 fadf 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003010:	2036      	movs	r0, #54	; 0x36
 8003012:	f000 faf8 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40001000 	.word	0x40001000
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_UART_MspInit+0x84>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d12b      	bne.n	80030a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_UART_MspInit+0x88>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <HAL_UART_MspInit+0x88>)
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_UART_MspInit+0x88>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_UART_MspInit+0x88>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_UART_MspInit+0x88>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_UART_MspInit+0x88>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003082:	230c      	movs	r3, #12
 8003084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308e:	2303      	movs	r3, #3
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003092:	2307      	movs	r3, #7
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	4619      	mov	r1, r3
 800309c:	4805      	ldr	r0, [pc, #20]	; (80030b4 <HAL_UART_MspInit+0x8c>)
 800309e:	f000 facd 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030a2:	bf00      	nop
 80030a4:	3728      	adds	r7, #40	; 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020000 	.word	0x40020000

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <HardFault_Handler+0x4>

080030cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <MemManage_Handler+0x4>

080030d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <BusFault_Handler+0x4>

080030d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <UsageFault_Handler+0x4>

080030de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800310c:	f000 f942 	bl	8003394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <TIM6_DAC_IRQHandler+0x10>)
 800311a:	f001 fc50 	bl	80049be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	200000f8 	.word	0x200000f8

08003128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e00a      	b.n	8003150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800313a:	f3af 8000 	nop.w
 800313e:	4601      	mov	r1, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	60ba      	str	r2, [r7, #8]
 8003146:	b2ca      	uxtb	r2, r1
 8003148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbf0      	blt.n	800313a <_read+0x12>
	}

return len;
 8003158:	687b      	ldr	r3, [r7, #4]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e009      	b.n	8003188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	60ba      	str	r2, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fe71 	bl	8002e64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbf1      	blt.n	8003174 <_write+0x12>
	}
	return len;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_close>:

int _close(int file)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	return -1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c2:	605a      	str	r2, [r3, #4]
	return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <_isatty>:

int _isatty(int file)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
	return 1;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003234:	f002 fad0 	bl	80057d8 <__errno>
 8003238:	4602      	mov	r2, r0
 800323a:	230c      	movs	r3, #12
 800323c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003242:	e009      	b.n	8003258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <_sbrk+0x64>)
 8003254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20020000 	.word	0x20020000
 8003264:	00000400 	.word	0x00000400
 8003268:	20000094 	.word	0x20000094
 800326c:	20000180 	.word	0x20000180

08003270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <SystemInit+0x28>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <SystemInit+0x28>)
 800327c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SystemInit+0x28>)
 8003286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800328a:	609a      	str	r2, [r3, #8]
#endif
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800329c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032a2:	e003      	b.n	80032ac <LoopCopyDataInit>

080032a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032aa:	3104      	adds	r1, #4

080032ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b4:	d3f6      	bcc.n	80032a4 <CopyDataInit>
  ldr  r2, =_sbss
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032b8:	e002      	b.n	80032c0 <LoopFillZerobss>

080032ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032bc:	f842 3b04 	str.w	r3, [r2], #4

080032c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c4:	d3f9      	bcc.n	80032ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032c6:	f7ff ffd3 	bl	8003270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ca:	f002 fa8b 	bl	80057e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ce:	f7ff fb7d 	bl	80029cc <main>
  bx  lr    
 80032d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032d8:	08007288 	.word	0x08007288
  ldr  r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80032e4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80032e8:	20000180 	.word	0x20000180

080032ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC_IRQHandler>
	...

080032f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <HAL_Init+0x40>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_Init+0x40>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_Init+0x40>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <HAL_Init+0x40>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 f94d 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f808 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003324:	f7ff fdb8 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00

08003334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_InitTick+0x54>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x58>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334a:	fbb3 f3f1 	udiv	r3, r3, r1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f965 	bl	8003622 <HAL_SYSTICK_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00e      	b.n	8003380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d80a      	bhi.n	800337e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003368:	2200      	movs	r2, #0
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003370:	f000 f92d 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <HAL_InitTick+0x5c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000000 	.word	0x20000000
 800338c:	20000008 	.word	0x20000008
 8003390:	20000004 	.word	0x20000004

08003394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x20>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x24>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_IncTick+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000008 	.word	0x20000008
 80033b8:	20000178 	.word	0x20000178

080033bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return uwTick;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_GetTick+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000178 	.word	0x20000178

080033d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff ffee 	bl	80033bc <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ec:	d005      	beq.n	80033fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_Delay+0x40>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fa:	bf00      	nop
 80033fc:	f7ff ffde 	bl	80033bc <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	429a      	cmp	r2, r3
 800340a:	d8f7      	bhi.n	80033fc <HAL_Delay+0x28>
  {
  }
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000008 	.word	0x20000008

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	60d3      	str	r3, [r2, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff3e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff8e 	bl	800350c <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5d 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff31 	bl	800347c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffa2 	bl	8003574 <SysTick_Config>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e165      	b.n	8003924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003658:	2201      	movs	r2, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	f040 8154 	bne.w	800391e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00b      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368a:	2b11      	cmp	r3, #17
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0xfc>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b12      	cmp	r3, #18
 8003736:	d123      	bne.n	8003780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80ae 	beq.w	800391e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b5c      	ldr	r3, [pc, #368]	; (8003938 <HAL_GPIO_Init+0x2fc>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a5b      	ldr	r2, [pc, #364]	; (8003938 <HAL_GPIO_Init+0x2fc>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_GPIO_Init+0x2fc>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037de:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_GPIO_Init+0x300>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4e      	ldr	r2, [pc, #312]	; (8003940 <HAL_GPIO_Init+0x304>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d025      	beq.n	8003856 <HAL_GPIO_Init+0x21a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <HAL_GPIO_Init+0x308>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01f      	beq.n	8003852 <HAL_GPIO_Init+0x216>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4c      	ldr	r2, [pc, #304]	; (8003948 <HAL_GPIO_Init+0x30c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d019      	beq.n	800384e <HAL_GPIO_Init+0x212>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_GPIO_Init+0x310>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_GPIO_Init+0x20e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_GPIO_Init+0x314>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00d      	beq.n	8003846 <HAL_GPIO_Init+0x20a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a49      	ldr	r2, [pc, #292]	; (8003954 <HAL_GPIO_Init+0x318>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d007      	beq.n	8003842 <HAL_GPIO_Init+0x206>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a48      	ldr	r2, [pc, #288]	; (8003958 <HAL_GPIO_Init+0x31c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_GPIO_Init+0x202>
 800383a:	2306      	movs	r3, #6
 800383c:	e00c      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 800383e:	2307      	movs	r3, #7
 8003840:	e00a      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 8003842:	2305      	movs	r3, #5
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 8003846:	2304      	movs	r3, #4
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x21c>
 8003856:	2300      	movs	r3, #0
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003868:	4934      	ldr	r1, [pc, #208]	; (800393c <HAL_GPIO_Init+0x300>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_GPIO_Init+0x320>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389a:	4a30      	ldr	r2, [pc, #192]	; (800395c <HAL_GPIO_Init+0x320>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <HAL_GPIO_Init+0x320>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <HAL_GPIO_Init+0x320>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_GPIO_Init+0x320>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_GPIO_Init+0x320>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_GPIO_Init+0x320>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a10      	ldr	r2, [pc, #64]	; (800395c <HAL_GPIO_Init+0x320>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	f67f ae96 	bls.w	8003658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3724      	adds	r7, #36	; 0x24
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40023800 	.word	0x40023800
 800393c:	40013800 	.word	0x40013800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40020800 	.word	0x40020800
 800394c:	40020c00 	.word	0x40020c00
 8003950:	40021000 	.word	0x40021000
 8003954:	40021400 	.word	0x40021400
 8003958:	40021800 	.word	0x40021800
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
 800396c:	4613      	mov	r3, r2
 800396e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800397c:	e003      	b.n	8003986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800397e:	887b      	ldrh	r3, [r7, #2]
 8003980:	041a      	lsls	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	619a      	str	r2, [r3, #24]
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0cc      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b68      	ldr	r3, [pc, #416]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d90c      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d044      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e067      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4934      	ldr	r1, [pc, #208]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7ff fc9a 	bl	80033bc <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7ff fc96 	bl	80033bc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d20c      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f855 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fbfa 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08007184 	.word	0x08007184
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000000 	.word	0x20000000

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b7c:	f7ff fff0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b80:	4601      	mov	r1, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0a9b      	lsrs	r3, r3, #10
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4a03      	ldr	r2, [pc, #12]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	08007194 	.word	0x08007194

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba4:	f7ff ffdc 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	08007194 	.word	0x08007194

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be2:	4bc6      	ldr	r3, [pc, #792]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	f200 817e 	bhi.w	8003eec <HAL_RCC_GetSysClockFreq+0x324>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_RCC_GetSysClockFreq+0x30>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003eed 	.word	0x08003eed
 8003c00:	08003eed 	.word	0x08003eed
 8003c04:	08003eed 	.word	0x08003eed
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003eed 	.word	0x08003eed
 8003c10:	08003eed 	.word	0x08003eed
 8003c14:	08003eed 	.word	0x08003eed
 8003c18:	08003c39 	.word	0x08003c39
 8003c1c:	08003eed 	.word	0x08003eed
 8003c20:	08003eed 	.word	0x08003eed
 8003c24:	08003eed 	.word	0x08003eed
 8003c28:	08003d95 	.word	0x08003d95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4bb4      	ldr	r3, [pc, #720]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x338>)
 8003c2e:	613b      	str	r3, [r7, #16]
       break;
 8003c30:	e15f      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c32:	4bb4      	ldr	r3, [pc, #720]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003c34:	613b      	str	r3, [r7, #16]
      break;
 8003c36:	e15c      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c38:	4bb0      	ldr	r3, [pc, #704]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c40:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c42:	4bae      	ldr	r3, [pc, #696]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4bab      	ldr	r3, [pc, #684]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	ea03 0501 	and.w	r5, r3, r1
 8003c64:	ea04 0602 	and.w	r6, r4, r2
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	f04f 0400 	mov.w	r4, #0
 8003c74:	0154      	lsls	r4, r2, #5
 8003c76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c7a:	014b      	lsls	r3, r1, #5
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4622      	mov	r2, r4
 8003c80:	1b49      	subs	r1, r1, r5
 8003c82:	eb62 0206 	sbc.w	r2, r2, r6
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	0194      	lsls	r4, r2, #6
 8003c90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c94:	018b      	lsls	r3, r1, #6
 8003c96:	1a5b      	subs	r3, r3, r1
 8003c98:	eb64 0402 	sbc.w	r4, r4, r2
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	00e2      	lsls	r2, r4, #3
 8003ca6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003caa:	00d9      	lsls	r1, r3, #3
 8003cac:	460b      	mov	r3, r1
 8003cae:	4614      	mov	r4, r2
 8003cb0:	195b      	adds	r3, r3, r5
 8003cb2:	eb44 0406 	adc.w	r4, r4, r6
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	0262      	lsls	r2, r4, #9
 8003cc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cc4:	0259      	lsls	r1, r3, #9
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4621      	mov	r1, r4
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f7fc ffa6 	bl	8000c28 <__aeabi_uldivmod>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e049      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce4:	4b85      	ldr	r3, [pc, #532]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	ea03 0501 	and.w	r5, r3, r1
 8003cfa:	ea04 0602 	and.w	r6, r4, r2
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4632      	mov	r2, r6
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	f04f 0400 	mov.w	r4, #0
 8003d0a:	0154      	lsls	r4, r2, #5
 8003d0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d10:	014b      	lsls	r3, r1, #5
 8003d12:	4619      	mov	r1, r3
 8003d14:	4622      	mov	r2, r4
 8003d16:	1b49      	subs	r1, r1, r5
 8003d18:	eb62 0206 	sbc.w	r2, r2, r6
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	f04f 0400 	mov.w	r4, #0
 8003d24:	0194      	lsls	r4, r2, #6
 8003d26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d2a:	018b      	lsls	r3, r1, #6
 8003d2c:	1a5b      	subs	r3, r3, r1
 8003d2e:	eb64 0402 	sbc.w	r4, r4, r2
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d40:	00d9      	lsls	r1, r3, #3
 8003d42:	460b      	mov	r3, r1
 8003d44:	4614      	mov	r4, r2
 8003d46:	195b      	adds	r3, r3, r5
 8003d48:	eb44 0406 	adc.w	r4, r4, r6
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	02a2      	lsls	r2, r4, #10
 8003d56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d5a:	0299      	lsls	r1, r3, #10
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4614      	mov	r4, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	4621      	mov	r1, r4
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f04f 0400 	mov.w	r4, #0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	f7fc ff5b 	bl	8000c28 <__aeabi_uldivmod>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d78:	4b60      	ldr	r3, [pc, #384]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	613b      	str	r3, [r7, #16]
      break;
 8003d92:	e0ae      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9e:	4b57      	ldr	r3, [pc, #348]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04a      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003daa:	4b54      	ldr	r3, [pc, #336]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	ea03 0501 	and.w	r5, r3, r1
 8003dc0:	ea04 0602 	and.w	r6, r4, r2
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	f04f 0400 	mov.w	r4, #0
 8003dd0:	0154      	lsls	r4, r2, #5
 8003dd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dd6:	014b      	lsls	r3, r1, #5
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4622      	mov	r2, r4
 8003ddc:	1b49      	subs	r1, r1, r5
 8003dde:	eb62 0206 	sbc.w	r2, r2, r6
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	0194      	lsls	r4, r2, #6
 8003dec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003df0:	018b      	lsls	r3, r1, #6
 8003df2:	1a5b      	subs	r3, r3, r1
 8003df4:	eb64 0402 	sbc.w	r4, r4, r2
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	00e2      	lsls	r2, r4, #3
 8003e02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e06:	00d9      	lsls	r1, r3, #3
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	195b      	adds	r3, r3, r5
 8003e0e:	eb44 0406 	adc.w	r4, r4, r6
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	0262      	lsls	r2, r4, #9
 8003e1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e20:	0259      	lsls	r1, r3, #9
 8003e22:	460b      	mov	r3, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	4621      	mov	r1, r4
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f04f 0400 	mov.w	r4, #0
 8003e30:	461a      	mov	r2, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	f7fc fef8 	bl	8000c28 <__aeabi_uldivmod>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e049      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e40:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	099b      	lsrs	r3, r3, #6
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	ea03 0501 	and.w	r5, r3, r1
 8003e56:	ea04 0602 	and.w	r6, r4, r2
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f04f 0400 	mov.w	r4, #0
 8003e66:	0154      	lsls	r4, r2, #5
 8003e68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e6c:	014b      	lsls	r3, r1, #5
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4622      	mov	r2, r4
 8003e72:	1b49      	subs	r1, r1, r5
 8003e74:	eb62 0206 	sbc.w	r2, r2, r6
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	f04f 0400 	mov.w	r4, #0
 8003e80:	0194      	lsls	r4, r2, #6
 8003e82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e86:	018b      	lsls	r3, r1, #6
 8003e88:	1a5b      	subs	r3, r3, r1
 8003e8a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e9c:	00d9      	lsls	r1, r3, #3
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	195b      	adds	r3, r3, r5
 8003ea4:	eb44 0406 	adc.w	r4, r4, r6
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	02a2      	lsls	r2, r4, #10
 8003eb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eb6:	0299      	lsls	r1, r3, #10
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4614      	mov	r4, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4623      	mov	r3, r4
 8003eca:	f7fc fead 	bl	8000c28 <__aeabi_uldivmod>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_GetSysClockFreq+0x334>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0f1b      	lsrs	r3, r3, #28
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	613b      	str	r3, [r7, #16]
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x338>)
 8003eee:	613b      	str	r3, [r7, #16]
      break;
 8003ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef2:	693b      	ldr	r3, [r7, #16]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	007a1200 	.word	0x007a1200

08003f08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f22:	4b95      	ldr	r3, [pc, #596]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d019      	beq.n	8003f62 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f2e:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d106      	bne.n	8003f48 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f3a:	4b8f      	ldr	r3, [pc, #572]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f48:	4b8b      	ldr	r3, [pc, #556]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d112      	bne.n	8003f7a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f54:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d05b      	beq.n	8004026 <HAL_RCC_OscConfig+0x11e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d157      	bne.n	8004026 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e216      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x8a>
 8003f84:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7b      	ldr	r2, [pc, #492]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e01d      	b.n	8003fce <HAL_RCC_OscConfig+0xc6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xae>
 8003f9c:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a75      	ldr	r2, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b73      	ldr	r3, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a72      	ldr	r2, [pc, #456]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0xc6>
 8003fb6:	4b70      	ldr	r3, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d013      	beq.n	8003ffe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7ff f9f1 	bl	80033bc <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fde:	f7ff f9ed 	bl	80033bc <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	; 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1db      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0xd6>
 8003ffc:	e014      	b.n	8004028 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7ff f9dd 	bl	80033bc <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004006:	f7ff f9d9 	bl	80033bc <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1c7      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004018:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0xfe>
 8004024:	e000      	b.n	8004028 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d06f      	beq.n	8004114 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004040:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004048:	2b08      	cmp	r3, #8
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800404c:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004060:	2b0c      	cmp	r3, #12
 8004062:	d11c      	bne.n	800409e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004064:	4b44      	ldr	r3, [pc, #272]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d116      	bne.n	800409e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x180>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d001      	beq.n	8004088 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e18f      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4938      	ldr	r1, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409c:	e03a      	b.n	8004114 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d020      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a6:	4b35      	ldr	r3, [pc, #212]	; (800417c <HAL_RCC_OscConfig+0x274>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7ff f986 	bl	80033bc <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b4:	f7ff f982 	bl	80033bc <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e170      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4925      	ldr	r1, [pc, #148]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
 80040e6:	e015      	b.n	8004114 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x274>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7ff f965 	bl	80033bc <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7ff f961 	bl	80033bc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e14f      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d037      	beq.n	8004190 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d016      	beq.n	8004156 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_RCC_OscConfig+0x278>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7ff f945 	bl	80033bc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004136:	f7ff f941 	bl	80033bc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e12f      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800414a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x22e>
 8004154:	e01c      	b.n	8004190 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_RCC_OscConfig+0x278>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7ff f92e 	bl	80033bc <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004164:	f7ff f92a 	bl	80033bc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d908      	bls.n	8004184 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e118      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	42470000 	.word	0x42470000
 8004180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	4b8a      	ldr	r3, [pc, #552]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e9      	bne.n	8004164 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8097 	beq.w	80042cc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b83      	ldr	r3, [pc, #524]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a7e      	ldr	r2, [pc, #504]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	4b7c      	ldr	r3, [pc, #496]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ce:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d118      	bne.n	800420c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041da:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7ff f8e9 	bl	80033bc <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7ff f8e5 	bl	80033bc <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0d3      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	4b6c      	ldr	r3, [pc, #432]	; (80043b4 <HAL_RCC_OscConfig+0x4ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x31a>
 8004214:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e01c      	b.n	800425c <HAL_RCC_OscConfig+0x354>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x33c>
 800422a:	4b61      	ldr	r3, [pc, #388]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a60      	ldr	r2, [pc, #384]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	4b5e      	ldr	r3, [pc, #376]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a5d      	ldr	r2, [pc, #372]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0x354>
 8004244:	4b5a      	ldr	r3, [pc, #360]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a59      	ldr	r2, [pc, #356]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	4b57      	ldr	r3, [pc, #348]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7ff f8aa 	bl	80033bc <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7ff f8a6 	bl	80033bc <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e092      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ee      	beq.n	800426c <HAL_RCC_OscConfig+0x364>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7ff f894 	bl	80033bc <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7ff f890 	bl	80033bc <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e07c      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ee      	bne.n	8004298 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d068      	beq.n	80043a6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d060      	beq.n	80043a2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d145      	bne.n	8004374 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b33      	ldr	r3, [pc, #204]	; (80043b8 <HAL_RCC_OscConfig+0x4b0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7ff f865 	bl	80033bc <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7ff f861 	bl	80033bc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e04f      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	3b01      	subs	r3, #1
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	071b      	lsls	r3, r3, #28
 8004340:	491b      	ldr	r1, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <HAL_RCC_OscConfig+0x4b0>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7ff f836 	bl	80033bc <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7ff f832 	bl	80033bc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e020      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x44c>
 8004372:	e018      	b.n	80043a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004374:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_RCC_OscConfig+0x4b0>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7ff f81f 	bl	80033bc <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004382:	f7ff f81b 	bl	80033bc <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e009      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_RCC_OscConfig+0x4a8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x47a>
 80043a0:	e001      	b.n	80043a6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40007000 	.word	0x40007000
 80043b8:	42470060 	.word	0x42470060

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e056      	b.n	800447c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fe fd7d 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	ea42 0103 	orr.w	r1, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 0104 	and.w	r1, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x26>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e18a      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x33c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fe ff83 	bl	80033bc <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d00f      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x70>
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044da:	d107      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x68>
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d003      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044f2:	e15b      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x82>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x82>
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800450c:	e14e      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2205      	movs	r2, #5
 800451e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d007      	beq.n	8004576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d178      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive+0x10a>
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d166      	bne.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b2:	e053      	b.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d11b      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x176>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d016      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x176>
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d113      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d119      	bne.n	800463c <HAL_SPI_TransmitReceive+0x1b8>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d014      	beq.n	800463c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	b292      	uxth	r2, r2
 800461e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004638:	2301      	movs	r3, #1
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800463c:	f7fe febe 	bl	80033bc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004648:	429a      	cmp	r2, r3
 800464a:	d807      	bhi.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004652:	d003      	beq.n	800465c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800465a:	e0a7      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1a6      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x130>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1a1      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x130>
 8004670:	e07c      	b.n	800476c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x1fc>
 800467a:	8b7b      	ldrh	r3, [r7, #26]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d16b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	7812      	ldrb	r2, [r2, #0]
 800468c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a6:	e057      	b.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d11c      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d114      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d119      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x2ae>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d014      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800472e:	2301      	movs	r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004732:	f7fe fe43 	bl	80033bc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800473e:	429a      	cmp	r2, r3
 8004740:	d803      	bhi.n	800474a <HAL_SPI_TransmitReceive+0x2c6>
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d102      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x2cc>
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004756:	e029      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1a2      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x224>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d19d      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f893 	bl	800489c <SPI_EndRxTxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004788:	e010      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	e000      	b.n	80047ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3730      	adds	r7, #48	; 0x30
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d8:	e04c      	b.n	8004874 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e0:	d048      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047e2:	f7fe fdeb 	bl	80033bc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d902      	bls.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d13d      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004810:	d111      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481a:	d004      	beq.n	8004826 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004824:	d107      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483e:	d10f      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800485e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e00f      	b.n	8004894 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	d1a3      	bne.n	80047da <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <SPI_EndRxTxTransaction+0x7c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <SPI_EndRxTxTransaction+0x80>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0d5b      	lsrs	r3, r3, #21
 80048b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d112      	bne.n	80048ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f7ff ff78 	bl	80047c8 <SPI_WaitFlagStateUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e00f      	b.n	800490e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d0f2      	beq.n	80048ee <SPI_EndRxTxTransaction+0x52>
 8004908:	e000      	b.n	800490c <SPI_EndRxTxTransaction+0x70>
        break;
 800490a:	bf00      	nop
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000000 	.word	0x20000000
 800491c:	165e9f81 	.word	0x165e9f81

08004920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e01d      	b.n	800496e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fe fb46 	bl	8002fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f000 f95e 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b06      	cmp	r3, #6
 800499e:	d007      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d122      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d11b      	bne.n	8004a1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0202 	mvn.w	r2, #2
 80049ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f8ee 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004a06:	e005      	b.n	8004a14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8e0 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8f1 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d122      	bne.n	8004a6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d11b      	bne.n	8004a6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0204 	mvn.w	r2, #4
 8004a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f8c4 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004a5a:	e005      	b.n	8004a68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8b6 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8c7 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d122      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d11b      	bne.n	8004ac2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0208 	mvn.w	r2, #8
 8004a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f89a 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004aae:	e005      	b.n	8004abc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f88c 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f89d 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d122      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d11b      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0210 	mvn.w	r2, #16
 8004ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2208      	movs	r2, #8
 8004aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f870 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004b02:	e005      	b.n	8004b10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f862 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f873 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0201 	mvn.w	r2, #1
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fd ff2d 	bl	800299c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f97f 	bl	8004e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f838 	bl	8004c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d10e      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0220 	mvn.w	r2, #32
 8004bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f949 	bl	8004e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d027      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d023      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d017      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <TIM_Base_SetConfig+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_Base_SetConfig+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <TIM_Base_SetConfig+0x134>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <TIM_Base_SetConfig+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <TIM_Base_SetConfig+0x13c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800
 8004d54:	40001800 	.word	0x40001800
 8004d58:	40001c00 	.word	0x40001c00
 8004d5c:	40002000 	.word	0x40002000

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e05a      	b.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d01d      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1b      	ldr	r2, [pc, #108]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1a      	ldr	r2, [pc, #104]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10c      	bne.n	8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40010400 	.word	0x40010400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40001800 	.word	0x40001800

08004e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e03f      	b.n	8004f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe f8be 	bl	8003028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f90b 	bl	80050e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af02      	add	r7, sp, #8
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	f040 8083 	bne.w	8005042 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Transmit+0x2e>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e07b      	b.n	8005044 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Transmit+0x40>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e074      	b.n	8005044 <HAL_UART_Transmit+0x12a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f70:	f7fe fa24 	bl	80033bc <HAL_GetTick>
 8004f74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f8a:	e042      	b.n	8005012 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d122      	bne.n	8004fea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2180      	movs	r1, #128	; 0x80
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f84c 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e042      	b.n	8005044 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3302      	adds	r3, #2
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	e017      	b.n	8005012 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	e013      	b.n	8005012 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f829 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e01f      	b.n	8005044 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	60ba      	str	r2, [r7, #8]
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1b7      	bne.n	8004f8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f810 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e006      	b.n	8005044 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005042:	2302      	movs	r3, #2
  }
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505c:	e02c      	b.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005064:	d028      	beq.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0x30>
 800506c:	f7fe f9a6 	bl	80033bc <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	d21d      	bcs.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800508a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e00f      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d0c3      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005122:	f023 030c 	bic.w	r3, r3, #12
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	430b      	orrs	r3, r1
 800512e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	f040 818b 	bne.w	8005468 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4ac1      	ldr	r2, [pc, #772]	; (800545c <UART_SetConfig+0x37c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d005      	beq.n	8005168 <UART_SetConfig+0x88>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4abf      	ldr	r2, [pc, #764]	; (8005460 <UART_SetConfig+0x380>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f040 80bd 	bne.w	80052e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fe fd1a 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 800516c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	461d      	mov	r5, r3
 8005172:	f04f 0600 	mov.w	r6, #0
 8005176:	46a8      	mov	r8, r5
 8005178:	46b1      	mov	r9, r6
 800517a:	eb18 0308 	adds.w	r3, r8, r8
 800517e:	eb49 0409 	adc.w	r4, r9, r9
 8005182:	4698      	mov	r8, r3
 8005184:	46a1      	mov	r9, r4
 8005186:	eb18 0805 	adds.w	r8, r8, r5
 800518a:	eb49 0906 	adc.w	r9, r9, r6
 800518e:	f04f 0100 	mov.w	r1, #0
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800519a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800519e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051a2:	4688      	mov	r8, r1
 80051a4:	4691      	mov	r9, r2
 80051a6:	eb18 0005 	adds.w	r0, r8, r5
 80051aa:	eb49 0106 	adc.w	r1, r9, r6
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	461d      	mov	r5, r3
 80051b4:	f04f 0600 	mov.w	r6, #0
 80051b8:	196b      	adds	r3, r5, r5
 80051ba:	eb46 0406 	adc.w	r4, r6, r6
 80051be:	461a      	mov	r2, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	f7fb fd31 	bl	8000c28 <__aeabi_uldivmod>
 80051c6:	4603      	mov	r3, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	461a      	mov	r2, r3
 80051cc:	4ba5      	ldr	r3, [pc, #660]	; (8005464 <UART_SetConfig+0x384>)
 80051ce:	fba3 2302 	umull	r2, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	461d      	mov	r5, r3
 80051dc:	f04f 0600 	mov.w	r6, #0
 80051e0:	46a9      	mov	r9, r5
 80051e2:	46b2      	mov	sl, r6
 80051e4:	eb19 0309 	adds.w	r3, r9, r9
 80051e8:	eb4a 040a 	adc.w	r4, sl, sl
 80051ec:	4699      	mov	r9, r3
 80051ee:	46a2      	mov	sl, r4
 80051f0:	eb19 0905 	adds.w	r9, r9, r5
 80051f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005204:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005208:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800520c:	4689      	mov	r9, r1
 800520e:	4692      	mov	sl, r2
 8005210:	eb19 0005 	adds.w	r0, r9, r5
 8005214:	eb4a 0106 	adc.w	r1, sl, r6
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	461d      	mov	r5, r3
 800521e:	f04f 0600 	mov.w	r6, #0
 8005222:	196b      	adds	r3, r5, r5
 8005224:	eb46 0406 	adc.w	r4, r6, r6
 8005228:	461a      	mov	r2, r3
 800522a:	4623      	mov	r3, r4
 800522c:	f7fb fcfc 	bl	8000c28 <__aeabi_uldivmod>
 8005230:	4603      	mov	r3, r0
 8005232:	460c      	mov	r4, r1
 8005234:	461a      	mov	r2, r3
 8005236:	4b8b      	ldr	r3, [pc, #556]	; (8005464 <UART_SetConfig+0x384>)
 8005238:	fba3 1302 	umull	r1, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2164      	movs	r1, #100	; 0x64
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	3332      	adds	r3, #50	; 0x32
 800524a:	4a86      	ldr	r2, [pc, #536]	; (8005464 <UART_SetConfig+0x384>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005258:	4498      	add	r8, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	461d      	mov	r5, r3
 800525e:	f04f 0600 	mov.w	r6, #0
 8005262:	46a9      	mov	r9, r5
 8005264:	46b2      	mov	sl, r6
 8005266:	eb19 0309 	adds.w	r3, r9, r9
 800526a:	eb4a 040a 	adc.w	r4, sl, sl
 800526e:	4699      	mov	r9, r3
 8005270:	46a2      	mov	sl, r4
 8005272:	eb19 0905 	adds.w	r9, r9, r5
 8005276:	eb4a 0a06 	adc.w	sl, sl, r6
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800528a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800528e:	4689      	mov	r9, r1
 8005290:	4692      	mov	sl, r2
 8005292:	eb19 0005 	adds.w	r0, r9, r5
 8005296:	eb4a 0106 	adc.w	r1, sl, r6
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	461d      	mov	r5, r3
 80052a0:	f04f 0600 	mov.w	r6, #0
 80052a4:	196b      	adds	r3, r5, r5
 80052a6:	eb46 0406 	adc.w	r4, r6, r6
 80052aa:	461a      	mov	r2, r3
 80052ac:	4623      	mov	r3, r4
 80052ae:	f7fb fcbb 	bl	8000c28 <__aeabi_uldivmod>
 80052b2:	4603      	mov	r3, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <UART_SetConfig+0x384>)
 80052ba:	fba3 1302 	umull	r1, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2164      	movs	r1, #100	; 0x64
 80052c2:	fb01 f303 	mul.w	r3, r1, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	3332      	adds	r3, #50	; 0x32
 80052cc:	4a65      	ldr	r2, [pc, #404]	; (8005464 <UART_SetConfig+0x384>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f003 0207 	and.w	r2, r3, #7
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4442      	add	r2, r8
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	e26f      	b.n	80057c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052e2:	f7fe fc49 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 80052e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	461d      	mov	r5, r3
 80052ec:	f04f 0600 	mov.w	r6, #0
 80052f0:	46a8      	mov	r8, r5
 80052f2:	46b1      	mov	r9, r6
 80052f4:	eb18 0308 	adds.w	r3, r8, r8
 80052f8:	eb49 0409 	adc.w	r4, r9, r9
 80052fc:	4698      	mov	r8, r3
 80052fe:	46a1      	mov	r9, r4
 8005300:	eb18 0805 	adds.w	r8, r8, r5
 8005304:	eb49 0906 	adc.w	r9, r9, r6
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005314:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005318:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800531c:	4688      	mov	r8, r1
 800531e:	4691      	mov	r9, r2
 8005320:	eb18 0005 	adds.w	r0, r8, r5
 8005324:	eb49 0106 	adc.w	r1, r9, r6
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	461d      	mov	r5, r3
 800532e:	f04f 0600 	mov.w	r6, #0
 8005332:	196b      	adds	r3, r5, r5
 8005334:	eb46 0406 	adc.w	r4, r6, r6
 8005338:	461a      	mov	r2, r3
 800533a:	4623      	mov	r3, r4
 800533c:	f7fb fc74 	bl	8000c28 <__aeabi_uldivmod>
 8005340:	4603      	mov	r3, r0
 8005342:	460c      	mov	r4, r1
 8005344:	461a      	mov	r2, r3
 8005346:	4b47      	ldr	r3, [pc, #284]	; (8005464 <UART_SetConfig+0x384>)
 8005348:	fba3 2302 	umull	r2, r3, r3, r2
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	461d      	mov	r5, r3
 8005356:	f04f 0600 	mov.w	r6, #0
 800535a:	46a9      	mov	r9, r5
 800535c:	46b2      	mov	sl, r6
 800535e:	eb19 0309 	adds.w	r3, r9, r9
 8005362:	eb4a 040a 	adc.w	r4, sl, sl
 8005366:	4699      	mov	r9, r3
 8005368:	46a2      	mov	sl, r4
 800536a:	eb19 0905 	adds.w	r9, r9, r5
 800536e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800537e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005382:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005386:	4689      	mov	r9, r1
 8005388:	4692      	mov	sl, r2
 800538a:	eb19 0005 	adds.w	r0, r9, r5
 800538e:	eb4a 0106 	adc.w	r1, sl, r6
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	461d      	mov	r5, r3
 8005398:	f04f 0600 	mov.w	r6, #0
 800539c:	196b      	adds	r3, r5, r5
 800539e:	eb46 0406 	adc.w	r4, r6, r6
 80053a2:	461a      	mov	r2, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	f7fb fc3f 	bl	8000c28 <__aeabi_uldivmod>
 80053aa:	4603      	mov	r3, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	461a      	mov	r2, r3
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <UART_SetConfig+0x384>)
 80053b2:	fba3 1302 	umull	r1, r3, r3, r2
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	2164      	movs	r1, #100	; 0x64
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	3332      	adds	r3, #50	; 0x32
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <UART_SetConfig+0x384>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053d2:	4498      	add	r8, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	461d      	mov	r5, r3
 80053d8:	f04f 0600 	mov.w	r6, #0
 80053dc:	46a9      	mov	r9, r5
 80053de:	46b2      	mov	sl, r6
 80053e0:	eb19 0309 	adds.w	r3, r9, r9
 80053e4:	eb4a 040a 	adc.w	r4, sl, sl
 80053e8:	4699      	mov	r9, r3
 80053ea:	46a2      	mov	sl, r4
 80053ec:	eb19 0905 	adds.w	r9, r9, r5
 80053f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005408:	4689      	mov	r9, r1
 800540a:	4692      	mov	sl, r2
 800540c:	eb19 0005 	adds.w	r0, r9, r5
 8005410:	eb4a 0106 	adc.w	r1, sl, r6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	461d      	mov	r5, r3
 800541a:	f04f 0600 	mov.w	r6, #0
 800541e:	196b      	adds	r3, r5, r5
 8005420:	eb46 0406 	adc.w	r4, r6, r6
 8005424:	461a      	mov	r2, r3
 8005426:	4623      	mov	r3, r4
 8005428:	f7fb fbfe 	bl	8000c28 <__aeabi_uldivmod>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	461a      	mov	r2, r3
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <UART_SetConfig+0x384>)
 8005434:	fba3 1302 	umull	r1, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2164      	movs	r1, #100	; 0x64
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <UART_SetConfig+0x384>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 0207 	and.w	r2, r3, #7
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4442      	add	r2, r8
 8005458:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800545a:	e1b2      	b.n	80057c2 <UART_SetConfig+0x6e2>
 800545c:	40011000 	.word	0x40011000
 8005460:	40011400 	.word	0x40011400
 8005464:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4ad7      	ldr	r2, [pc, #860]	; (80057cc <UART_SetConfig+0x6ec>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d005      	beq.n	800547e <UART_SetConfig+0x39e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4ad6      	ldr	r2, [pc, #856]	; (80057d0 <UART_SetConfig+0x6f0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	f040 80d1 	bne.w	8005620 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800547e:	f7fe fb8f 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8005482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	469a      	mov	sl, r3
 8005488:	f04f 0b00 	mov.w	fp, #0
 800548c:	46d0      	mov	r8, sl
 800548e:	46d9      	mov	r9, fp
 8005490:	eb18 0308 	adds.w	r3, r8, r8
 8005494:	eb49 0409 	adc.w	r4, r9, r9
 8005498:	4698      	mov	r8, r3
 800549a:	46a1      	mov	r9, r4
 800549c:	eb18 080a 	adds.w	r8, r8, sl
 80054a0:	eb49 090b 	adc.w	r9, r9, fp
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054b8:	4688      	mov	r8, r1
 80054ba:	4691      	mov	r9, r2
 80054bc:	eb1a 0508 	adds.w	r5, sl, r8
 80054c0:	eb4b 0609 	adc.w	r6, fp, r9
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4619      	mov	r1, r3
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	f04f 0400 	mov.w	r4, #0
 80054d6:	0094      	lsls	r4, r2, #2
 80054d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	461a      	mov	r2, r3
 80054e0:	4623      	mov	r3, r4
 80054e2:	4628      	mov	r0, r5
 80054e4:	4631      	mov	r1, r6
 80054e6:	f7fb fb9f 	bl	8000c28 <__aeabi_uldivmod>
 80054ea:	4603      	mov	r3, r0
 80054ec:	460c      	mov	r4, r1
 80054ee:	461a      	mov	r2, r3
 80054f0:	4bb8      	ldr	r3, [pc, #736]	; (80057d4 <UART_SetConfig+0x6f4>)
 80054f2:	fba3 2302 	umull	r2, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	469b      	mov	fp, r3
 8005500:	f04f 0c00 	mov.w	ip, #0
 8005504:	46d9      	mov	r9, fp
 8005506:	46e2      	mov	sl, ip
 8005508:	eb19 0309 	adds.w	r3, r9, r9
 800550c:	eb4a 040a 	adc.w	r4, sl, sl
 8005510:	4699      	mov	r9, r3
 8005512:	46a2      	mov	sl, r4
 8005514:	eb19 090b 	adds.w	r9, r9, fp
 8005518:	eb4a 0a0c 	adc.w	sl, sl, ip
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005528:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800552c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005530:	4689      	mov	r9, r1
 8005532:	4692      	mov	sl, r2
 8005534:	eb1b 0509 	adds.w	r5, fp, r9
 8005538:	eb4c 060a 	adc.w	r6, ip, sl
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	0094      	lsls	r4, r2, #2
 8005550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005554:	008b      	lsls	r3, r1, #2
 8005556:	461a      	mov	r2, r3
 8005558:	4623      	mov	r3, r4
 800555a:	4628      	mov	r0, r5
 800555c:	4631      	mov	r1, r6
 800555e:	f7fb fb63 	bl	8000c28 <__aeabi_uldivmod>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	461a      	mov	r2, r3
 8005568:	4b9a      	ldr	r3, [pc, #616]	; (80057d4 <UART_SetConfig+0x6f4>)
 800556a:	fba3 1302 	umull	r1, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2164      	movs	r1, #100	; 0x64
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	; 0x32
 800557c:	4a95      	ldr	r2, [pc, #596]	; (80057d4 <UART_SetConfig+0x6f4>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005588:	4498      	add	r8, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	469b      	mov	fp, r3
 800558e:	f04f 0c00 	mov.w	ip, #0
 8005592:	46d9      	mov	r9, fp
 8005594:	46e2      	mov	sl, ip
 8005596:	eb19 0309 	adds.w	r3, r9, r9
 800559a:	eb4a 040a 	adc.w	r4, sl, sl
 800559e:	4699      	mov	r9, r3
 80055a0:	46a2      	mov	sl, r4
 80055a2:	eb19 090b 	adds.w	r9, r9, fp
 80055a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055be:	4689      	mov	r9, r1
 80055c0:	4692      	mov	sl, r2
 80055c2:	eb1b 0509 	adds.w	r5, fp, r9
 80055c6:	eb4c 060a 	adc.w	r6, ip, sl
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	0094      	lsls	r4, r2, #2
 80055de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055e2:	008b      	lsls	r3, r1, #2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	4631      	mov	r1, r6
 80055ec:	f7fb fb1c 	bl	8000c28 <__aeabi_uldivmod>
 80055f0:	4603      	mov	r3, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b77      	ldr	r3, [pc, #476]	; (80057d4 <UART_SetConfig+0x6f4>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	2164      	movs	r1, #100	; 0x64
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	3332      	adds	r3, #50	; 0x32
 800560a:	4a72      	ldr	r2, [pc, #456]	; (80057d4 <UART_SetConfig+0x6f4>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4442      	add	r2, r8
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	e0d0      	b.n	80057c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fe faaa 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8005624:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	469a      	mov	sl, r3
 800562a:	f04f 0b00 	mov.w	fp, #0
 800562e:	46d0      	mov	r8, sl
 8005630:	46d9      	mov	r9, fp
 8005632:	eb18 0308 	adds.w	r3, r8, r8
 8005636:	eb49 0409 	adc.w	r4, r9, r9
 800563a:	4698      	mov	r8, r3
 800563c:	46a1      	mov	r9, r4
 800563e:	eb18 080a 	adds.w	r8, r8, sl
 8005642:	eb49 090b 	adc.w	r9, r9, fp
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005652:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005656:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800565a:	4688      	mov	r8, r1
 800565c:	4691      	mov	r9, r2
 800565e:	eb1a 0508 	adds.w	r5, sl, r8
 8005662:	eb4b 0609 	adc.w	r6, fp, r9
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4619      	mov	r1, r3
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	0094      	lsls	r4, r2, #2
 800567a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800567e:	008b      	lsls	r3, r1, #2
 8005680:	461a      	mov	r2, r3
 8005682:	4623      	mov	r3, r4
 8005684:	4628      	mov	r0, r5
 8005686:	4631      	mov	r1, r6
 8005688:	f7fb face 	bl	8000c28 <__aeabi_uldivmod>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	461a      	mov	r2, r3
 8005692:	4b50      	ldr	r3, [pc, #320]	; (80057d4 <UART_SetConfig+0x6f4>)
 8005694:	fba3 2302 	umull	r2, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	469b      	mov	fp, r3
 80056a2:	f04f 0c00 	mov.w	ip, #0
 80056a6:	46d9      	mov	r9, fp
 80056a8:	46e2      	mov	sl, ip
 80056aa:	eb19 0309 	adds.w	r3, r9, r9
 80056ae:	eb4a 040a 	adc.w	r4, sl, sl
 80056b2:	4699      	mov	r9, r3
 80056b4:	46a2      	mov	sl, r4
 80056b6:	eb19 090b 	adds.w	r9, r9, fp
 80056ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056d2:	4689      	mov	r9, r1
 80056d4:	4692      	mov	sl, r2
 80056d6:	eb1b 0509 	adds.w	r5, fp, r9
 80056da:	eb4c 060a 	adc.w	r6, ip, sl
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	0094      	lsls	r4, r2, #2
 80056f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	4631      	mov	r1, r6
 8005700:	f7fb fa92 	bl	8000c28 <__aeabi_uldivmod>
 8005704:	4603      	mov	r3, r0
 8005706:	460c      	mov	r4, r1
 8005708:	461a      	mov	r2, r3
 800570a:	4b32      	ldr	r3, [pc, #200]	; (80057d4 <UART_SetConfig+0x6f4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <UART_SetConfig+0x6f4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572a:	4498      	add	r8, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	469b      	mov	fp, r3
 8005730:	f04f 0c00 	mov.w	ip, #0
 8005734:	46d9      	mov	r9, fp
 8005736:	46e2      	mov	sl, ip
 8005738:	eb19 0309 	adds.w	r3, r9, r9
 800573c:	eb4a 040a 	adc.w	r4, sl, sl
 8005740:	4699      	mov	r9, r3
 8005742:	46a2      	mov	sl, r4
 8005744:	eb19 090b 	adds.w	r9, r9, fp
 8005748:	eb4a 0a0c 	adc.w	sl, sl, ip
 800574c:	f04f 0100 	mov.w	r1, #0
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005758:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800575c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005760:	4689      	mov	r9, r1
 8005762:	4692      	mov	sl, r2
 8005764:	eb1b 0509 	adds.w	r5, fp, r9
 8005768:	eb4c 060a 	adc.w	r6, ip, sl
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4619      	mov	r1, r3
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	f04f 0400 	mov.w	r4, #0
 800577e:	0094      	lsls	r4, r2, #2
 8005780:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005784:	008b      	lsls	r3, r1, #2
 8005786:	461a      	mov	r2, r3
 8005788:	4623      	mov	r3, r4
 800578a:	4628      	mov	r0, r5
 800578c:	4631      	mov	r1, r6
 800578e:	f7fb fa4b 	bl	8000c28 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	461a      	mov	r2, r3
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <UART_SetConfig+0x6f4>)
 800579a:	fba3 1302 	umull	r1, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2164      	movs	r1, #100	; 0x64
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	3332      	adds	r3, #50	; 0x32
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <UART_SetConfig+0x6f4>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 020f 	and.w	r2, r3, #15
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4442      	add	r2, r8
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	e7ff      	b.n	80057c2 <UART_SetConfig+0x6e2>
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057cc:	40011000 	.word	0x40011000
 80057d0:	40011400 	.word	0x40011400
 80057d4:	51eb851f 	.word	0x51eb851f

080057d8 <__errno>:
 80057d8:	4b01      	ldr	r3, [pc, #4]	; (80057e0 <__errno+0x8>)
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	2000000c 	.word	0x2000000c

080057e4 <__libc_init_array>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4e0d      	ldr	r6, [pc, #52]	; (800581c <__libc_init_array+0x38>)
 80057e8:	4c0d      	ldr	r4, [pc, #52]	; (8005820 <__libc_init_array+0x3c>)
 80057ea:	1ba4      	subs	r4, r4, r6
 80057ec:	10a4      	asrs	r4, r4, #2
 80057ee:	2500      	movs	r5, #0
 80057f0:	42a5      	cmp	r5, r4
 80057f2:	d109      	bne.n	8005808 <__libc_init_array+0x24>
 80057f4:	4e0b      	ldr	r6, [pc, #44]	; (8005824 <__libc_init_array+0x40>)
 80057f6:	4c0c      	ldr	r4, [pc, #48]	; (8005828 <__libc_init_array+0x44>)
 80057f8:	f001 fcb2 	bl	8007160 <_init>
 80057fc:	1ba4      	subs	r4, r4, r6
 80057fe:	10a4      	asrs	r4, r4, #2
 8005800:	2500      	movs	r5, #0
 8005802:	42a5      	cmp	r5, r4
 8005804:	d105      	bne.n	8005812 <__libc_init_array+0x2e>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800580c:	4798      	blx	r3
 800580e:	3501      	adds	r5, #1
 8005810:	e7ee      	b.n	80057f0 <__libc_init_array+0xc>
 8005812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005816:	4798      	blx	r3
 8005818:	3501      	adds	r5, #1
 800581a:	e7f2      	b.n	8005802 <__libc_init_array+0x1e>
 800581c:	08007280 	.word	0x08007280
 8005820:	08007280 	.word	0x08007280
 8005824:	08007280 	.word	0x08007280
 8005828:	08007284 	.word	0x08007284

0800582c <memset>:
 800582c:	4402      	add	r2, r0
 800582e:	4603      	mov	r3, r0
 8005830:	4293      	cmp	r3, r2
 8005832:	d100      	bne.n	8005836 <memset+0xa>
 8005834:	4770      	bx	lr
 8005836:	f803 1b01 	strb.w	r1, [r3], #1
 800583a:	e7f9      	b.n	8005830 <memset+0x4>

0800583c <iprintf>:
 800583c:	b40f      	push	{r0, r1, r2, r3}
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <iprintf+0x2c>)
 8005840:	b513      	push	{r0, r1, r4, lr}
 8005842:	681c      	ldr	r4, [r3, #0]
 8005844:	b124      	cbz	r4, 8005850 <iprintf+0x14>
 8005846:	69a3      	ldr	r3, [r4, #24]
 8005848:	b913      	cbnz	r3, 8005850 <iprintf+0x14>
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f84e 	bl	80058ec <__sinit>
 8005850:	ab05      	add	r3, sp, #20
 8005852:	9a04      	ldr	r2, [sp, #16]
 8005854:	68a1      	ldr	r1, [r4, #8]
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	4620      	mov	r0, r4
 800585a:	f000 f955 	bl	8005b08 <_vfiprintf_r>
 800585e:	b002      	add	sp, #8
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	b004      	add	sp, #16
 8005866:	4770      	bx	lr
 8005868:	2000000c 	.word	0x2000000c

0800586c <std>:
 800586c:	2300      	movs	r3, #0
 800586e:	b510      	push	{r4, lr}
 8005870:	4604      	mov	r4, r0
 8005872:	e9c0 3300 	strd	r3, r3, [r0]
 8005876:	6083      	str	r3, [r0, #8]
 8005878:	8181      	strh	r1, [r0, #12]
 800587a:	6643      	str	r3, [r0, #100]	; 0x64
 800587c:	81c2      	strh	r2, [r0, #14]
 800587e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005882:	6183      	str	r3, [r0, #24]
 8005884:	4619      	mov	r1, r3
 8005886:	2208      	movs	r2, #8
 8005888:	305c      	adds	r0, #92	; 0x5c
 800588a:	f7ff ffcf 	bl	800582c <memset>
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x38>)
 8005890:	6263      	str	r3, [r4, #36]	; 0x24
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <std+0x3c>)
 8005894:	62a3      	str	r3, [r4, #40]	; 0x28
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <std+0x40>)
 8005898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <std+0x44>)
 800589c:	6224      	str	r4, [r4, #32]
 800589e:	6323      	str	r3, [r4, #48]	; 0x30
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	08006065 	.word	0x08006065
 80058a8:	08006087 	.word	0x08006087
 80058ac:	080060bf 	.word	0x080060bf
 80058b0:	080060e3 	.word	0x080060e3

080058b4 <_cleanup_r>:
 80058b4:	4901      	ldr	r1, [pc, #4]	; (80058bc <_cleanup_r+0x8>)
 80058b6:	f000 b885 	b.w	80059c4 <_fwalk_reent>
 80058ba:	bf00      	nop
 80058bc:	080063bd 	.word	0x080063bd

080058c0 <__sfmoreglue>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	1e4a      	subs	r2, r1, #1
 80058c4:	2568      	movs	r5, #104	; 0x68
 80058c6:	4355      	muls	r5, r2
 80058c8:	460e      	mov	r6, r1
 80058ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ce:	f000 f897 	bl	8005a00 <_malloc_r>
 80058d2:	4604      	mov	r4, r0
 80058d4:	b140      	cbz	r0, 80058e8 <__sfmoreglue+0x28>
 80058d6:	2100      	movs	r1, #0
 80058d8:	e9c0 1600 	strd	r1, r6, [r0]
 80058dc:	300c      	adds	r0, #12
 80058de:	60a0      	str	r0, [r4, #8]
 80058e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058e4:	f7ff ffa2 	bl	800582c <memset>
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}

080058ec <__sinit>:
 80058ec:	6983      	ldr	r3, [r0, #24]
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	bb33      	cbnz	r3, 8005942 <__sinit+0x56>
 80058f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058f8:	6503      	str	r3, [r0, #80]	; 0x50
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <__sinit+0x58>)
 80058fc:	4a12      	ldr	r2, [pc, #72]	; (8005948 <__sinit+0x5c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6282      	str	r2, [r0, #40]	; 0x28
 8005902:	4298      	cmp	r0, r3
 8005904:	bf04      	itt	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	6183      	streq	r3, [r0, #24]
 800590a:	f000 f81f 	bl	800594c <__sfp>
 800590e:	6060      	str	r0, [r4, #4]
 8005910:	4620      	mov	r0, r4
 8005912:	f000 f81b 	bl	800594c <__sfp>
 8005916:	60a0      	str	r0, [r4, #8]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f817 	bl	800594c <__sfp>
 800591e:	2200      	movs	r2, #0
 8005920:	60e0      	str	r0, [r4, #12]
 8005922:	2104      	movs	r1, #4
 8005924:	6860      	ldr	r0, [r4, #4]
 8005926:	f7ff ffa1 	bl	800586c <std>
 800592a:	2201      	movs	r2, #1
 800592c:	2109      	movs	r1, #9
 800592e:	68a0      	ldr	r0, [r4, #8]
 8005930:	f7ff ff9c 	bl	800586c <std>
 8005934:	2202      	movs	r2, #2
 8005936:	2112      	movs	r1, #18
 8005938:	68e0      	ldr	r0, [r4, #12]
 800593a:	f7ff ff97 	bl	800586c <std>
 800593e:	2301      	movs	r3, #1
 8005940:	61a3      	str	r3, [r4, #24]
 8005942:	bd10      	pop	{r4, pc}
 8005944:	0800719c 	.word	0x0800719c
 8005948:	080058b5 	.word	0x080058b5

0800594c <__sfp>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <__sfp+0x70>)
 8005950:	681e      	ldr	r6, [r3, #0]
 8005952:	69b3      	ldr	r3, [r6, #24]
 8005954:	4607      	mov	r7, r0
 8005956:	b913      	cbnz	r3, 800595e <__sfp+0x12>
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ffc7 	bl	80058ec <__sinit>
 800595e:	3648      	adds	r6, #72	; 0x48
 8005960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	d503      	bpl.n	8005970 <__sfp+0x24>
 8005968:	6833      	ldr	r3, [r6, #0]
 800596a:	b133      	cbz	r3, 800597a <__sfp+0x2e>
 800596c:	6836      	ldr	r6, [r6, #0]
 800596e:	e7f7      	b.n	8005960 <__sfp+0x14>
 8005970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005974:	b16d      	cbz	r5, 8005992 <__sfp+0x46>
 8005976:	3468      	adds	r4, #104	; 0x68
 8005978:	e7f4      	b.n	8005964 <__sfp+0x18>
 800597a:	2104      	movs	r1, #4
 800597c:	4638      	mov	r0, r7
 800597e:	f7ff ff9f 	bl	80058c0 <__sfmoreglue>
 8005982:	6030      	str	r0, [r6, #0]
 8005984:	2800      	cmp	r0, #0
 8005986:	d1f1      	bne.n	800596c <__sfp+0x20>
 8005988:	230c      	movs	r3, #12
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4604      	mov	r4, r0
 800598e:	4620      	mov	r0, r4
 8005990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <__sfp+0x74>)
 8005994:	6665      	str	r5, [r4, #100]	; 0x64
 8005996:	e9c4 5500 	strd	r5, r5, [r4]
 800599a:	60a5      	str	r5, [r4, #8]
 800599c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80059a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80059a4:	2208      	movs	r2, #8
 80059a6:	4629      	mov	r1, r5
 80059a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059ac:	f7ff ff3e 	bl	800582c <memset>
 80059b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059b8:	e7e9      	b.n	800598e <__sfp+0x42>
 80059ba:	bf00      	nop
 80059bc:	0800719c 	.word	0x0800719c
 80059c0:	ffff0001 	.word	0xffff0001

080059c4 <_fwalk_reent>:
 80059c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c8:	4680      	mov	r8, r0
 80059ca:	4689      	mov	r9, r1
 80059cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059d0:	2600      	movs	r6, #0
 80059d2:	b914      	cbnz	r4, 80059da <_fwalk_reent+0x16>
 80059d4:	4630      	mov	r0, r6
 80059d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059de:	3f01      	subs	r7, #1
 80059e0:	d501      	bpl.n	80059e6 <_fwalk_reent+0x22>
 80059e2:	6824      	ldr	r4, [r4, #0]
 80059e4:	e7f5      	b.n	80059d2 <_fwalk_reent+0xe>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d907      	bls.n	80059fc <_fwalk_reent+0x38>
 80059ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f0:	3301      	adds	r3, #1
 80059f2:	d003      	beq.n	80059fc <_fwalk_reent+0x38>
 80059f4:	4629      	mov	r1, r5
 80059f6:	4640      	mov	r0, r8
 80059f8:	47c8      	blx	r9
 80059fa:	4306      	orrs	r6, r0
 80059fc:	3568      	adds	r5, #104	; 0x68
 80059fe:	e7ee      	b.n	80059de <_fwalk_reent+0x1a>

08005a00 <_malloc_r>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	1ccd      	adds	r5, r1, #3
 8005a04:	f025 0503 	bic.w	r5, r5, #3
 8005a08:	3508      	adds	r5, #8
 8005a0a:	2d0c      	cmp	r5, #12
 8005a0c:	bf38      	it	cc
 8005a0e:	250c      	movcc	r5, #12
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	4606      	mov	r6, r0
 8005a14:	db01      	blt.n	8005a1a <_malloc_r+0x1a>
 8005a16:	42a9      	cmp	r1, r5
 8005a18:	d903      	bls.n	8005a22 <_malloc_r+0x22>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	2000      	movs	r0, #0
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	f000 fd6b 	bl	80064fc <__malloc_lock>
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <_malloc_r+0xac>)
 8005a28:	6814      	ldr	r4, [r2, #0]
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	b991      	cbnz	r1, 8005a54 <_malloc_r+0x54>
 8005a2e:	4c20      	ldr	r4, [pc, #128]	; (8005ab0 <_malloc_r+0xb0>)
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	b91b      	cbnz	r3, 8005a3c <_malloc_r+0x3c>
 8005a34:	4630      	mov	r0, r6
 8005a36:	f000 fb05 	bl	8006044 <_sbrk_r>
 8005a3a:	6020      	str	r0, [r4, #0]
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f000 fb00 	bl	8006044 <_sbrk_r>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d124      	bne.n	8005a92 <_malloc_r+0x92>
 8005a48:	230c      	movs	r3, #12
 8005a4a:	6033      	str	r3, [r6, #0]
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f000 fd56 	bl	80064fe <__malloc_unlock>
 8005a52:	e7e4      	b.n	8005a1e <_malloc_r+0x1e>
 8005a54:	680b      	ldr	r3, [r1, #0]
 8005a56:	1b5b      	subs	r3, r3, r5
 8005a58:	d418      	bmi.n	8005a8c <_malloc_r+0x8c>
 8005a5a:	2b0b      	cmp	r3, #11
 8005a5c:	d90f      	bls.n	8005a7e <_malloc_r+0x7e>
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	50cd      	str	r5, [r1, r3]
 8005a62:	18cc      	adds	r4, r1, r3
 8005a64:	4630      	mov	r0, r6
 8005a66:	f000 fd4a 	bl	80064fe <__malloc_unlock>
 8005a6a:	f104 000b 	add.w	r0, r4, #11
 8005a6e:	1d23      	adds	r3, r4, #4
 8005a70:	f020 0007 	bic.w	r0, r0, #7
 8005a74:	1ac3      	subs	r3, r0, r3
 8005a76:	d0d3      	beq.n	8005a20 <_malloc_r+0x20>
 8005a78:	425a      	negs	r2, r3
 8005a7a:	50e2      	str	r2, [r4, r3]
 8005a7c:	e7d0      	b.n	8005a20 <_malloc_r+0x20>
 8005a7e:	428c      	cmp	r4, r1
 8005a80:	684b      	ldr	r3, [r1, #4]
 8005a82:	bf16      	itet	ne
 8005a84:	6063      	strne	r3, [r4, #4]
 8005a86:	6013      	streq	r3, [r2, #0]
 8005a88:	460c      	movne	r4, r1
 8005a8a:	e7eb      	b.n	8005a64 <_malloc_r+0x64>
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	6849      	ldr	r1, [r1, #4]
 8005a90:	e7cc      	b.n	8005a2c <_malloc_r+0x2c>
 8005a92:	1cc4      	adds	r4, r0, #3
 8005a94:	f024 0403 	bic.w	r4, r4, #3
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d005      	beq.n	8005aa8 <_malloc_r+0xa8>
 8005a9c:	1a21      	subs	r1, r4, r0
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f000 fad0 	bl	8006044 <_sbrk_r>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d0cf      	beq.n	8005a48 <_malloc_r+0x48>
 8005aa8:	6025      	str	r5, [r4, #0]
 8005aaa:	e7db      	b.n	8005a64 <_malloc_r+0x64>
 8005aac:	20000098 	.word	0x20000098
 8005ab0:	2000009c 	.word	0x2000009c

08005ab4 <__sfputc_r>:
 8005ab4:	6893      	ldr	r3, [r2, #8]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	b410      	push	{r4}
 8005abc:	6093      	str	r3, [r2, #8]
 8005abe:	da08      	bge.n	8005ad2 <__sfputc_r+0x1e>
 8005ac0:	6994      	ldr	r4, [r2, #24]
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	db01      	blt.n	8005aca <__sfputc_r+0x16>
 8005ac6:	290a      	cmp	r1, #10
 8005ac8:	d103      	bne.n	8005ad2 <__sfputc_r+0x1e>
 8005aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ace:	f000 bb0d 	b.w	80060ec <__swbuf_r>
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	1c58      	adds	r0, r3, #1
 8005ad6:	6010      	str	r0, [r2, #0]
 8005ad8:	7019      	strb	r1, [r3, #0]
 8005ada:	4608      	mov	r0, r1
 8005adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <__sfputs_r>:
 8005ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	460f      	mov	r7, r1
 8005ae8:	4614      	mov	r4, r2
 8005aea:	18d5      	adds	r5, r2, r3
 8005aec:	42ac      	cmp	r4, r5
 8005aee:	d101      	bne.n	8005af4 <__sfputs_r+0x12>
 8005af0:	2000      	movs	r0, #0
 8005af2:	e007      	b.n	8005b04 <__sfputs_r+0x22>
 8005af4:	463a      	mov	r2, r7
 8005af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7ff ffda 	bl	8005ab4 <__sfputc_r>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d1f3      	bne.n	8005aec <__sfputs_r+0xa>
 8005b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b08 <_vfiprintf_r>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	b09d      	sub	sp, #116	; 0x74
 8005b10:	4617      	mov	r7, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4606      	mov	r6, r0
 8005b16:	b118      	cbz	r0, 8005b20 <_vfiprintf_r+0x18>
 8005b18:	6983      	ldr	r3, [r0, #24]
 8005b1a:	b90b      	cbnz	r3, 8005b20 <_vfiprintf_r+0x18>
 8005b1c:	f7ff fee6 	bl	80058ec <__sinit>
 8005b20:	4b7c      	ldr	r3, [pc, #496]	; (8005d14 <_vfiprintf_r+0x20c>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d158      	bne.n	8005bd8 <_vfiprintf_r+0xd0>
 8005b26:	6874      	ldr	r4, [r6, #4]
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	0718      	lsls	r0, r3, #28
 8005b2c:	d55e      	bpl.n	8005bec <_vfiprintf_r+0xe4>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05b      	beq.n	8005bec <_vfiprintf_r+0xe4>
 8005b34:	2300      	movs	r3, #0
 8005b36:	9309      	str	r3, [sp, #36]	; 0x24
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b3e:	2330      	movs	r3, #48	; 0x30
 8005b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b44:	9503      	str	r5, [sp, #12]
 8005b46:	f04f 0b01 	mov.w	fp, #1
 8005b4a:	46b8      	mov	r8, r7
 8005b4c:	4645      	mov	r5, r8
 8005b4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b52:	b10b      	cbz	r3, 8005b58 <_vfiprintf_r+0x50>
 8005b54:	2b25      	cmp	r3, #37	; 0x25
 8005b56:	d154      	bne.n	8005c02 <_vfiprintf_r+0xfa>
 8005b58:	ebb8 0a07 	subs.w	sl, r8, r7
 8005b5c:	d00b      	beq.n	8005b76 <_vfiprintf_r+0x6e>
 8005b5e:	4653      	mov	r3, sl
 8005b60:	463a      	mov	r2, r7
 8005b62:	4621      	mov	r1, r4
 8005b64:	4630      	mov	r0, r6
 8005b66:	f7ff ffbc 	bl	8005ae2 <__sfputs_r>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f000 80c2 	beq.w	8005cf4 <_vfiprintf_r+0x1ec>
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	4453      	add	r3, sl
 8005b74:	9309      	str	r3, [sp, #36]	; 0x24
 8005b76:	f898 3000 	ldrb.w	r3, [r8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80ba 	beq.w	8005cf4 <_vfiprintf_r+0x1ec>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	9307      	str	r3, [sp, #28]
 8005b8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b92:	931a      	str	r3, [sp, #104]	; 0x68
 8005b94:	46a8      	mov	r8, r5
 8005b96:	2205      	movs	r2, #5
 8005b98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005b9c:	485e      	ldr	r0, [pc, #376]	; (8005d18 <_vfiprintf_r+0x210>)
 8005b9e:	f7fa fb37 	bl	8000210 <memchr>
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	bb78      	cbnz	r0, 8005c06 <_vfiprintf_r+0xfe>
 8005ba6:	06d9      	lsls	r1, r3, #27
 8005ba8:	bf44      	itt	mi
 8005baa:	2220      	movmi	r2, #32
 8005bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bb0:	071a      	lsls	r2, r3, #28
 8005bb2:	bf44      	itt	mi
 8005bb4:	222b      	movmi	r2, #43	; 0x2b
 8005bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bba:	782a      	ldrb	r2, [r5, #0]
 8005bbc:	2a2a      	cmp	r2, #42	; 0x2a
 8005bbe:	d02a      	beq.n	8005c16 <_vfiprintf_r+0x10e>
 8005bc0:	9a07      	ldr	r2, [sp, #28]
 8005bc2:	46a8      	mov	r8, r5
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	250a      	movs	r5, #10
 8005bc8:	4641      	mov	r1, r8
 8005bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bce:	3b30      	subs	r3, #48	; 0x30
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d969      	bls.n	8005ca8 <_vfiprintf_r+0x1a0>
 8005bd4:	b360      	cbz	r0, 8005c30 <_vfiprintf_r+0x128>
 8005bd6:	e024      	b.n	8005c22 <_vfiprintf_r+0x11a>
 8005bd8:	4b50      	ldr	r3, [pc, #320]	; (8005d1c <_vfiprintf_r+0x214>)
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d101      	bne.n	8005be2 <_vfiprintf_r+0xda>
 8005bde:	68b4      	ldr	r4, [r6, #8]
 8005be0:	e7a2      	b.n	8005b28 <_vfiprintf_r+0x20>
 8005be2:	4b4f      	ldr	r3, [pc, #316]	; (8005d20 <_vfiprintf_r+0x218>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	bf08      	it	eq
 8005be8:	68f4      	ldreq	r4, [r6, #12]
 8005bea:	e79d      	b.n	8005b28 <_vfiprintf_r+0x20>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 fae0 	bl	80061b4 <__swsetup_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d09d      	beq.n	8005b34 <_vfiprintf_r+0x2c>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bfc:	b01d      	add	sp, #116	; 0x74
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	46a8      	mov	r8, r5
 8005c04:	e7a2      	b.n	8005b4c <_vfiprintf_r+0x44>
 8005c06:	4a44      	ldr	r2, [pc, #272]	; (8005d18 <_vfiprintf_r+0x210>)
 8005c08:	1a80      	subs	r0, r0, r2
 8005c0a:	fa0b f000 	lsl.w	r0, fp, r0
 8005c0e:	4318      	orrs	r0, r3
 8005c10:	9004      	str	r0, [sp, #16]
 8005c12:	4645      	mov	r5, r8
 8005c14:	e7be      	b.n	8005b94 <_vfiprintf_r+0x8c>
 8005c16:	9a03      	ldr	r2, [sp, #12]
 8005c18:	1d11      	adds	r1, r2, #4
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	9103      	str	r1, [sp, #12]
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	db01      	blt.n	8005c26 <_vfiprintf_r+0x11e>
 8005c22:	9207      	str	r2, [sp, #28]
 8005c24:	e004      	b.n	8005c30 <_vfiprintf_r+0x128>
 8005c26:	4252      	negs	r2, r2
 8005c28:	f043 0302 	orr.w	r3, r3, #2
 8005c2c:	9207      	str	r2, [sp, #28]
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	f898 3000 	ldrb.w	r3, [r8]
 8005c34:	2b2e      	cmp	r3, #46	; 0x2e
 8005c36:	d10e      	bne.n	8005c56 <_vfiprintf_r+0x14e>
 8005c38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3e:	d138      	bne.n	8005cb2 <_vfiprintf_r+0x1aa>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfb8      	it	lt
 8005c4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c50:	f108 0802 	add.w	r8, r8, #2
 8005c54:	9305      	str	r3, [sp, #20]
 8005c56:	4d33      	ldr	r5, [pc, #204]	; (8005d24 <_vfiprintf_r+0x21c>)
 8005c58:	f898 1000 	ldrb.w	r1, [r8]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7fa fad6 	bl	8000210 <memchr>
 8005c64:	b140      	cbz	r0, 8005c78 <_vfiprintf_r+0x170>
 8005c66:	2340      	movs	r3, #64	; 0x40
 8005c68:	1b40      	subs	r0, r0, r5
 8005c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	4303      	orrs	r3, r0
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	f898 1000 	ldrb.w	r1, [r8]
 8005c7c:	482a      	ldr	r0, [pc, #168]	; (8005d28 <_vfiprintf_r+0x220>)
 8005c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c82:	2206      	movs	r2, #6
 8005c84:	f108 0701 	add.w	r7, r8, #1
 8005c88:	f7fa fac2 	bl	8000210 <memchr>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d037      	beq.n	8005d00 <_vfiprintf_r+0x1f8>
 8005c90:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <_vfiprintf_r+0x224>)
 8005c92:	bb1b      	cbnz	r3, 8005cdc <_vfiprintf_r+0x1d4>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	3307      	adds	r3, #7
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	444b      	add	r3, r9
 8005ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca6:	e750      	b.n	8005b4a <_vfiprintf_r+0x42>
 8005ca8:	fb05 3202 	mla	r2, r5, r2, r3
 8005cac:	2001      	movs	r0, #1
 8005cae:	4688      	mov	r8, r1
 8005cb0:	e78a      	b.n	8005bc8 <_vfiprintf_r+0xc0>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f108 0801 	add.w	r8, r8, #1
 8005cb8:	9305      	str	r3, [sp, #20]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	250a      	movs	r5, #10
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc4:	3a30      	subs	r2, #48	; 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d903      	bls.n	8005cd2 <_vfiprintf_r+0x1ca>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0c3      	beq.n	8005c56 <_vfiprintf_r+0x14e>
 8005cce:	9105      	str	r1, [sp, #20]
 8005cd0:	e7c1      	b.n	8005c56 <_vfiprintf_r+0x14e>
 8005cd2:	fb05 2101 	mla	r1, r5, r1, r2
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4680      	mov	r8, r0
 8005cda:	e7f0      	b.n	8005cbe <_vfiprintf_r+0x1b6>
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <_vfiprintf_r+0x228>)
 8005ce4:	a904      	add	r1, sp, #16
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f3af 8000 	nop.w
 8005cec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	d1d5      	bne.n	8005ca0 <_vfiprintf_r+0x198>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	065b      	lsls	r3, r3, #25
 8005cf8:	f53f af7e 	bmi.w	8005bf8 <_vfiprintf_r+0xf0>
 8005cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cfe:	e77d      	b.n	8005bfc <_vfiprintf_r+0xf4>
 8005d00:	ab03      	add	r3, sp, #12
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	4622      	mov	r2, r4
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <_vfiprintf_r+0x228>)
 8005d08:	a904      	add	r1, sp, #16
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 f888 	bl	8005e20 <_printf_i>
 8005d10:	e7ec      	b.n	8005cec <_vfiprintf_r+0x1e4>
 8005d12:	bf00      	nop
 8005d14:	080071c0 	.word	0x080071c0
 8005d18:	08007200 	.word	0x08007200
 8005d1c:	080071e0 	.word	0x080071e0
 8005d20:	080071a0 	.word	0x080071a0
 8005d24:	08007206 	.word	0x08007206
 8005d28:	0800720a 	.word	0x0800720a
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	08005ae3 	.word	0x08005ae3

08005d34 <_printf_common>:
 8005d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	4691      	mov	r9, r2
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	688a      	ldr	r2, [r1, #8]
 8005d3e:	690b      	ldr	r3, [r1, #16]
 8005d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d44:	4293      	cmp	r3, r2
 8005d46:	bfb8      	it	lt
 8005d48:	4613      	movlt	r3, r2
 8005d4a:	f8c9 3000 	str.w	r3, [r9]
 8005d4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d52:	4606      	mov	r6, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	b112      	cbz	r2, 8005d5e <_printf_common+0x2a>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f8c9 3000 	str.w	r3, [r9]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	0699      	lsls	r1, r3, #26
 8005d62:	bf42      	ittt	mi
 8005d64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d68:	3302      	addmi	r3, #2
 8005d6a:	f8c9 3000 	strmi.w	r3, [r9]
 8005d6e:	6825      	ldr	r5, [r4, #0]
 8005d70:	f015 0506 	ands.w	r5, r5, #6
 8005d74:	d107      	bne.n	8005d86 <_printf_common+0x52>
 8005d76:	f104 0a19 	add.w	sl, r4, #25
 8005d7a:	68e3      	ldr	r3, [r4, #12]
 8005d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	42ab      	cmp	r3, r5
 8005d84:	dc28      	bgt.n	8005dd8 <_printf_common+0xa4>
 8005d86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	3300      	adds	r3, #0
 8005d8e:	bf18      	it	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	0692      	lsls	r2, r2, #26
 8005d94:	d42d      	bmi.n	8005df2 <_printf_common+0xbe>
 8005d96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	47c0      	blx	r8
 8005da0:	3001      	adds	r0, #1
 8005da2:	d020      	beq.n	8005de6 <_printf_common+0xb2>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	68e5      	ldr	r5, [r4, #12]
 8005da8:	f8d9 2000 	ldr.w	r2, [r9]
 8005dac:	f003 0306 	and.w	r3, r3, #6
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	bf08      	it	eq
 8005db4:	1aad      	subeq	r5, r5, r2
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	6922      	ldr	r2, [r4, #16]
 8005dba:	bf0c      	ite	eq
 8005dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc0:	2500      	movne	r5, #0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	bfc4      	itt	gt
 8005dc6:	1a9b      	subgt	r3, r3, r2
 8005dc8:	18ed      	addgt	r5, r5, r3
 8005dca:	f04f 0900 	mov.w	r9, #0
 8005dce:	341a      	adds	r4, #26
 8005dd0:	454d      	cmp	r5, r9
 8005dd2:	d11a      	bne.n	8005e0a <_printf_common+0xd6>
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	e008      	b.n	8005dea <_printf_common+0xb6>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4652      	mov	r2, sl
 8005ddc:	4639      	mov	r1, r7
 8005dde:	4630      	mov	r0, r6
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d103      	bne.n	8005dee <_printf_common+0xba>
 8005de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dee:	3501      	adds	r5, #1
 8005df0:	e7c3      	b.n	8005d7a <_printf_common+0x46>
 8005df2:	18e1      	adds	r1, r4, r3
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	2030      	movs	r0, #48	; 0x30
 8005df8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dfc:	4422      	add	r2, r4
 8005dfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e06:	3302      	adds	r3, #2
 8005e08:	e7c5      	b.n	8005d96 <_printf_common+0x62>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4639      	mov	r1, r7
 8005e10:	4630      	mov	r0, r6
 8005e12:	47c0      	blx	r8
 8005e14:	3001      	adds	r0, #1
 8005e16:	d0e6      	beq.n	8005de6 <_printf_common+0xb2>
 8005e18:	f109 0901 	add.w	r9, r9, #1
 8005e1c:	e7d8      	b.n	8005dd0 <_printf_common+0x9c>
	...

08005e20 <_printf_i>:
 8005e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e28:	460c      	mov	r4, r1
 8005e2a:	7e09      	ldrb	r1, [r1, #24]
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	296e      	cmp	r1, #110	; 0x6e
 8005e30:	4617      	mov	r7, r2
 8005e32:	4606      	mov	r6, r0
 8005e34:	4698      	mov	r8, r3
 8005e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e38:	f000 80b3 	beq.w	8005fa2 <_printf_i+0x182>
 8005e3c:	d822      	bhi.n	8005e84 <_printf_i+0x64>
 8005e3e:	2963      	cmp	r1, #99	; 0x63
 8005e40:	d036      	beq.n	8005eb0 <_printf_i+0x90>
 8005e42:	d80a      	bhi.n	8005e5a <_printf_i+0x3a>
 8005e44:	2900      	cmp	r1, #0
 8005e46:	f000 80b9 	beq.w	8005fbc <_printf_i+0x19c>
 8005e4a:	2958      	cmp	r1, #88	; 0x58
 8005e4c:	f000 8083 	beq.w	8005f56 <_printf_i+0x136>
 8005e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e58:	e032      	b.n	8005ec0 <_printf_i+0xa0>
 8005e5a:	2964      	cmp	r1, #100	; 0x64
 8005e5c:	d001      	beq.n	8005e62 <_printf_i+0x42>
 8005e5e:	2969      	cmp	r1, #105	; 0x69
 8005e60:	d1f6      	bne.n	8005e50 <_printf_i+0x30>
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	6813      	ldr	r3, [r2, #0]
 8005e66:	0605      	lsls	r5, r0, #24
 8005e68:	f103 0104 	add.w	r1, r3, #4
 8005e6c:	d52a      	bpl.n	8005ec4 <_printf_i+0xa4>
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da03      	bge.n	8005e7e <_printf_i+0x5e>
 8005e76:	222d      	movs	r2, #45	; 0x2d
 8005e78:	425b      	negs	r3, r3
 8005e7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e7e:	486f      	ldr	r0, [pc, #444]	; (800603c <_printf_i+0x21c>)
 8005e80:	220a      	movs	r2, #10
 8005e82:	e039      	b.n	8005ef8 <_printf_i+0xd8>
 8005e84:	2973      	cmp	r1, #115	; 0x73
 8005e86:	f000 809d 	beq.w	8005fc4 <_printf_i+0x1a4>
 8005e8a:	d808      	bhi.n	8005e9e <_printf_i+0x7e>
 8005e8c:	296f      	cmp	r1, #111	; 0x6f
 8005e8e:	d020      	beq.n	8005ed2 <_printf_i+0xb2>
 8005e90:	2970      	cmp	r1, #112	; 0x70
 8005e92:	d1dd      	bne.n	8005e50 <_printf_i+0x30>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	f043 0320 	orr.w	r3, r3, #32
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	e003      	b.n	8005ea6 <_printf_i+0x86>
 8005e9e:	2975      	cmp	r1, #117	; 0x75
 8005ea0:	d017      	beq.n	8005ed2 <_printf_i+0xb2>
 8005ea2:	2978      	cmp	r1, #120	; 0x78
 8005ea4:	d1d4      	bne.n	8005e50 <_printf_i+0x30>
 8005ea6:	2378      	movs	r3, #120	; 0x78
 8005ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eac:	4864      	ldr	r0, [pc, #400]	; (8006040 <_printf_i+0x220>)
 8005eae:	e055      	b.n	8005f5c <_printf_i+0x13c>
 8005eb0:	6813      	ldr	r3, [r2, #0]
 8005eb2:	1d19      	adds	r1, r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6011      	str	r1, [r2, #0]
 8005eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e08c      	b.n	8005fde <_printf_i+0x1be>
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6011      	str	r1, [r2, #0]
 8005ec8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ecc:	bf18      	it	ne
 8005ece:	b21b      	sxthne	r3, r3
 8005ed0:	e7cf      	b.n	8005e72 <_printf_i+0x52>
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	6825      	ldr	r5, [r4, #0]
 8005ed6:	1d18      	adds	r0, r3, #4
 8005ed8:	6010      	str	r0, [r2, #0]
 8005eda:	0628      	lsls	r0, r5, #24
 8005edc:	d501      	bpl.n	8005ee2 <_printf_i+0xc2>
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	e002      	b.n	8005ee8 <_printf_i+0xc8>
 8005ee2:	0668      	lsls	r0, r5, #25
 8005ee4:	d5fb      	bpl.n	8005ede <_printf_i+0xbe>
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	4854      	ldr	r0, [pc, #336]	; (800603c <_printf_i+0x21c>)
 8005eea:	296f      	cmp	r1, #111	; 0x6f
 8005eec:	bf14      	ite	ne
 8005eee:	220a      	movne	r2, #10
 8005ef0:	2208      	moveq	r2, #8
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ef8:	6865      	ldr	r5, [r4, #4]
 8005efa:	60a5      	str	r5, [r4, #8]
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	f2c0 8095 	blt.w	800602c <_printf_i+0x20c>
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	f021 0104 	bic.w	r1, r1, #4
 8005f08:	6021      	str	r1, [r4, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d13d      	bne.n	8005f8a <_printf_i+0x16a>
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	f040 808e 	bne.w	8006030 <_printf_i+0x210>
 8005f14:	4665      	mov	r5, ip
 8005f16:	2a08      	cmp	r2, #8
 8005f18:	d10b      	bne.n	8005f32 <_printf_i+0x112>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	07db      	lsls	r3, r3, #31
 8005f1e:	d508      	bpl.n	8005f32 <_printf_i+0x112>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	6862      	ldr	r2, [r4, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	bfde      	ittt	le
 8005f28:	2330      	movle	r3, #48	; 0x30
 8005f2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f2e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f32:	ebac 0305 	sub.w	r3, ip, r5
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	f8cd 8000 	str.w	r8, [sp]
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	aa03      	add	r2, sp, #12
 8005f40:	4621      	mov	r1, r4
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff fef6 	bl	8005d34 <_printf_common>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d14d      	bne.n	8005fe8 <_printf_i+0x1c8>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f50:	b005      	add	sp, #20
 8005f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f56:	4839      	ldr	r0, [pc, #228]	; (800603c <_printf_i+0x21c>)
 8005f58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	6821      	ldr	r1, [r4, #0]
 8005f60:	1d1d      	adds	r5, r3, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6015      	str	r5, [r2, #0]
 8005f66:	060a      	lsls	r2, r1, #24
 8005f68:	d50b      	bpl.n	8005f82 <_printf_i+0x162>
 8005f6a:	07ca      	lsls	r2, r1, #31
 8005f6c:	bf44      	itt	mi
 8005f6e:	f041 0120 	orrmi.w	r1, r1, #32
 8005f72:	6021      	strmi	r1, [r4, #0]
 8005f74:	b91b      	cbnz	r3, 8005f7e <_printf_i+0x15e>
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	f022 0220 	bic.w	r2, r2, #32
 8005f7c:	6022      	str	r2, [r4, #0]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	e7b7      	b.n	8005ef2 <_printf_i+0xd2>
 8005f82:	064d      	lsls	r5, r1, #25
 8005f84:	bf48      	it	mi
 8005f86:	b29b      	uxthmi	r3, r3
 8005f88:	e7ef      	b.n	8005f6a <_printf_i+0x14a>
 8005f8a:	4665      	mov	r5, ip
 8005f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f90:	fb02 3311 	mls	r3, r2, r1, r3
 8005f94:	5cc3      	ldrb	r3, [r0, r3]
 8005f96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	d1f5      	bne.n	8005f8c <_printf_i+0x16c>
 8005fa0:	e7b9      	b.n	8005f16 <_printf_i+0xf6>
 8005fa2:	6813      	ldr	r3, [r2, #0]
 8005fa4:	6825      	ldr	r5, [r4, #0]
 8005fa6:	6961      	ldr	r1, [r4, #20]
 8005fa8:	1d18      	adds	r0, r3, #4
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	0628      	lsls	r0, r5, #24
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_i+0x196>
 8005fb2:	6019      	str	r1, [r3, #0]
 8005fb4:	e002      	b.n	8005fbc <_printf_i+0x19c>
 8005fb6:	066a      	lsls	r2, r5, #25
 8005fb8:	d5fb      	bpl.n	8005fb2 <_printf_i+0x192>
 8005fba:	8019      	strh	r1, [r3, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	6123      	str	r3, [r4, #16]
 8005fc0:	4665      	mov	r5, ip
 8005fc2:	e7b9      	b.n	8005f38 <_printf_i+0x118>
 8005fc4:	6813      	ldr	r3, [r2, #0]
 8005fc6:	1d19      	adds	r1, r3, #4
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	681d      	ldr	r5, [r3, #0]
 8005fcc:	6862      	ldr	r2, [r4, #4]
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f7fa f91d 	bl	8000210 <memchr>
 8005fd6:	b108      	cbz	r0, 8005fdc <_printf_i+0x1bc>
 8005fd8:	1b40      	subs	r0, r0, r5
 8005fda:	6060      	str	r0, [r4, #4]
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	6123      	str	r3, [r4, #16]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe6:	e7a7      	b.n	8005f38 <_printf_i+0x118>
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	462a      	mov	r2, r5
 8005fec:	4639      	mov	r1, r7
 8005fee:	4630      	mov	r0, r6
 8005ff0:	47c0      	blx	r8
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d0aa      	beq.n	8005f4c <_printf_i+0x12c>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	079b      	lsls	r3, r3, #30
 8005ffa:	d413      	bmi.n	8006024 <_printf_i+0x204>
 8005ffc:	68e0      	ldr	r0, [r4, #12]
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	4298      	cmp	r0, r3
 8006002:	bfb8      	it	lt
 8006004:	4618      	movlt	r0, r3
 8006006:	e7a3      	b.n	8005f50 <_printf_i+0x130>
 8006008:	2301      	movs	r3, #1
 800600a:	464a      	mov	r2, r9
 800600c:	4639      	mov	r1, r7
 800600e:	4630      	mov	r0, r6
 8006010:	47c0      	blx	r8
 8006012:	3001      	adds	r0, #1
 8006014:	d09a      	beq.n	8005f4c <_printf_i+0x12c>
 8006016:	3501      	adds	r5, #1
 8006018:	68e3      	ldr	r3, [r4, #12]
 800601a:	9a03      	ldr	r2, [sp, #12]
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	42ab      	cmp	r3, r5
 8006020:	dcf2      	bgt.n	8006008 <_printf_i+0x1e8>
 8006022:	e7eb      	b.n	8005ffc <_printf_i+0x1dc>
 8006024:	2500      	movs	r5, #0
 8006026:	f104 0919 	add.w	r9, r4, #25
 800602a:	e7f5      	b.n	8006018 <_printf_i+0x1f8>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ac      	bne.n	8005f8a <_printf_i+0x16a>
 8006030:	7803      	ldrb	r3, [r0, #0]
 8006032:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006036:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800603a:	e76c      	b.n	8005f16 <_printf_i+0xf6>
 800603c:	08007211 	.word	0x08007211
 8006040:	08007222 	.word	0x08007222

08006044 <_sbrk_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4c06      	ldr	r4, [pc, #24]	; (8006060 <_sbrk_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4605      	mov	r5, r0
 800604c:	4608      	mov	r0, r1
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	f7fd f8d8 	bl	8003204 <_sbrk>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_sbrk_r+0x1a>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	b103      	cbz	r3, 800605e <_sbrk_r+0x1a>
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	2000017c 	.word	0x2000017c

08006064 <__sread>:
 8006064:	b510      	push	{r4, lr}
 8006066:	460c      	mov	r4, r1
 8006068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606c:	f000 fa96 	bl	800659c <_read_r>
 8006070:	2800      	cmp	r0, #0
 8006072:	bfab      	itete	ge
 8006074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006076:	89a3      	ldrhlt	r3, [r4, #12]
 8006078:	181b      	addge	r3, r3, r0
 800607a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800607e:	bfac      	ite	ge
 8006080:	6563      	strge	r3, [r4, #84]	; 0x54
 8006082:	81a3      	strhlt	r3, [r4, #12]
 8006084:	bd10      	pop	{r4, pc}

08006086 <__swrite>:
 8006086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800608a:	461f      	mov	r7, r3
 800608c:	898b      	ldrh	r3, [r1, #12]
 800608e:	05db      	lsls	r3, r3, #23
 8006090:	4605      	mov	r5, r0
 8006092:	460c      	mov	r4, r1
 8006094:	4616      	mov	r6, r2
 8006096:	d505      	bpl.n	80060a4 <__swrite+0x1e>
 8006098:	2302      	movs	r3, #2
 800609a:	2200      	movs	r2, #0
 800609c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a0:	f000 f9b6 	bl	8006410 <_lseek_r>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	4632      	mov	r2, r6
 80060b2:	463b      	mov	r3, r7
 80060b4:	4628      	mov	r0, r5
 80060b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ba:	f000 b869 	b.w	8006190 <_write_r>

080060be <__sseek>:
 80060be:	b510      	push	{r4, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c6:	f000 f9a3 	bl	8006410 <_lseek_r>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	bf15      	itete	ne
 80060d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060da:	81a3      	strheq	r3, [r4, #12]
 80060dc:	bf18      	it	ne
 80060de:	81a3      	strhne	r3, [r4, #12]
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <__sclose>:
 80060e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e6:	f000 b8d3 	b.w	8006290 <_close_r>
	...

080060ec <__swbuf_r>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	460e      	mov	r6, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	4605      	mov	r5, r0
 80060f4:	b118      	cbz	r0, 80060fe <__swbuf_r+0x12>
 80060f6:	6983      	ldr	r3, [r0, #24]
 80060f8:	b90b      	cbnz	r3, 80060fe <__swbuf_r+0x12>
 80060fa:	f7ff fbf7 	bl	80058ec <__sinit>
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <__swbuf_r+0x98>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d12a      	bne.n	800615a <__swbuf_r+0x6e>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	69a3      	ldr	r3, [r4, #24]
 8006108:	60a3      	str	r3, [r4, #8]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	071a      	lsls	r2, r3, #28
 800610e:	d52e      	bpl.n	800616e <__swbuf_r+0x82>
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	b363      	cbz	r3, 800616e <__swbuf_r+0x82>
 8006114:	6923      	ldr	r3, [r4, #16]
 8006116:	6820      	ldr	r0, [r4, #0]
 8006118:	1ac0      	subs	r0, r0, r3
 800611a:	6963      	ldr	r3, [r4, #20]
 800611c:	b2f6      	uxtb	r6, r6
 800611e:	4283      	cmp	r3, r0
 8006120:	4637      	mov	r7, r6
 8006122:	dc04      	bgt.n	800612e <__swbuf_r+0x42>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f948 	bl	80063bc <_fflush_r>
 800612c:	bb28      	cbnz	r0, 800617a <__swbuf_r+0x8e>
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	3b01      	subs	r3, #1
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	701e      	strb	r6, [r3, #0]
 800613c:	6963      	ldr	r3, [r4, #20]
 800613e:	3001      	adds	r0, #1
 8006140:	4283      	cmp	r3, r0
 8006142:	d004      	beq.n	800614e <__swbuf_r+0x62>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	07db      	lsls	r3, r3, #31
 8006148:	d519      	bpl.n	800617e <__swbuf_r+0x92>
 800614a:	2e0a      	cmp	r6, #10
 800614c:	d117      	bne.n	800617e <__swbuf_r+0x92>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f000 f933 	bl	80063bc <_fflush_r>
 8006156:	b190      	cbz	r0, 800617e <__swbuf_r+0x92>
 8006158:	e00f      	b.n	800617a <__swbuf_r+0x8e>
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <__swbuf_r+0x9c>)
 800615c:	429c      	cmp	r4, r3
 800615e:	d101      	bne.n	8006164 <__swbuf_r+0x78>
 8006160:	68ac      	ldr	r4, [r5, #8]
 8006162:	e7d0      	b.n	8006106 <__swbuf_r+0x1a>
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <__swbuf_r+0xa0>)
 8006166:	429c      	cmp	r4, r3
 8006168:	bf08      	it	eq
 800616a:	68ec      	ldreq	r4, [r5, #12]
 800616c:	e7cb      	b.n	8006106 <__swbuf_r+0x1a>
 800616e:	4621      	mov	r1, r4
 8006170:	4628      	mov	r0, r5
 8006172:	f000 f81f 	bl	80061b4 <__swsetup_r>
 8006176:	2800      	cmp	r0, #0
 8006178:	d0cc      	beq.n	8006114 <__swbuf_r+0x28>
 800617a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800617e:	4638      	mov	r0, r7
 8006180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006182:	bf00      	nop
 8006184:	080071c0 	.word	0x080071c0
 8006188:	080071e0 	.word	0x080071e0
 800618c:	080071a0 	.word	0x080071a0

08006190 <_write_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4c07      	ldr	r4, [pc, #28]	; (80061b0 <_write_r+0x20>)
 8006194:	4605      	mov	r5, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	6022      	str	r2, [r4, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fc ffdf 	bl	8003162 <_write>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_write_r+0x1e>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_write_r+0x1e>
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	2000017c 	.word	0x2000017c

080061b4 <__swsetup_r>:
 80061b4:	4b32      	ldr	r3, [pc, #200]	; (8006280 <__swsetup_r+0xcc>)
 80061b6:	b570      	push	{r4, r5, r6, lr}
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	4606      	mov	r6, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	b125      	cbz	r5, 80061ca <__swsetup_r+0x16>
 80061c0:	69ab      	ldr	r3, [r5, #24]
 80061c2:	b913      	cbnz	r3, 80061ca <__swsetup_r+0x16>
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff fb91 	bl	80058ec <__sinit>
 80061ca:	4b2e      	ldr	r3, [pc, #184]	; (8006284 <__swsetup_r+0xd0>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d10f      	bne.n	80061f0 <__swsetup_r+0x3c>
 80061d0:	686c      	ldr	r4, [r5, #4]
 80061d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	0715      	lsls	r5, r2, #28
 80061da:	d42c      	bmi.n	8006236 <__swsetup_r+0x82>
 80061dc:	06d0      	lsls	r0, r2, #27
 80061de:	d411      	bmi.n	8006204 <__swsetup_r+0x50>
 80061e0:	2209      	movs	r2, #9
 80061e2:	6032      	str	r2, [r6, #0]
 80061e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e8:	81a3      	strh	r3, [r4, #12]
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ee:	e03e      	b.n	800626e <__swsetup_r+0xba>
 80061f0:	4b25      	ldr	r3, [pc, #148]	; (8006288 <__swsetup_r+0xd4>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <__swsetup_r+0x46>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7eb      	b.n	80061d2 <__swsetup_r+0x1e>
 80061fa:	4b24      	ldr	r3, [pc, #144]	; (800628c <__swsetup_r+0xd8>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7e6      	b.n	80061d2 <__swsetup_r+0x1e>
 8006204:	0751      	lsls	r1, r2, #29
 8006206:	d512      	bpl.n	800622e <__swsetup_r+0x7a>
 8006208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800620a:	b141      	cbz	r1, 800621e <__swsetup_r+0x6a>
 800620c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006210:	4299      	cmp	r1, r3
 8006212:	d002      	beq.n	800621a <__swsetup_r+0x66>
 8006214:	4630      	mov	r0, r6
 8006216:	f000 f973 	bl	8006500 <_free_r>
 800621a:	2300      	movs	r3, #0
 800621c:	6363      	str	r3, [r4, #52]	; 0x34
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	2300      	movs	r3, #0
 8006228:	6063      	str	r3, [r4, #4]
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f043 0308 	orr.w	r3, r3, #8
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	b94b      	cbnz	r3, 800624e <__swsetup_r+0x9a>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d003      	beq.n	800624e <__swsetup_r+0x9a>
 8006246:	4621      	mov	r1, r4
 8006248:	4630      	mov	r0, r6
 800624a:	f000 f917 	bl	800647c <__smakebuf_r>
 800624e:	89a2      	ldrh	r2, [r4, #12]
 8006250:	f012 0301 	ands.w	r3, r2, #1
 8006254:	d00c      	beq.n	8006270 <__swsetup_r+0xbc>
 8006256:	2300      	movs	r3, #0
 8006258:	60a3      	str	r3, [r4, #8]
 800625a:	6963      	ldr	r3, [r4, #20]
 800625c:	425b      	negs	r3, r3
 800625e:	61a3      	str	r3, [r4, #24]
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	b953      	cbnz	r3, 800627a <__swsetup_r+0xc6>
 8006264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006268:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800626c:	d1ba      	bne.n	80061e4 <__swsetup_r+0x30>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	0792      	lsls	r2, r2, #30
 8006272:	bf58      	it	pl
 8006274:	6963      	ldrpl	r3, [r4, #20]
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	e7f2      	b.n	8006260 <__swsetup_r+0xac>
 800627a:	2000      	movs	r0, #0
 800627c:	e7f7      	b.n	800626e <__swsetup_r+0xba>
 800627e:	bf00      	nop
 8006280:	2000000c 	.word	0x2000000c
 8006284:	080071c0 	.word	0x080071c0
 8006288:	080071e0 	.word	0x080071e0
 800628c:	080071a0 	.word	0x080071a0

08006290 <_close_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4c06      	ldr	r4, [pc, #24]	; (80062ac <_close_r+0x1c>)
 8006294:	2300      	movs	r3, #0
 8006296:	4605      	mov	r5, r0
 8006298:	4608      	mov	r0, r1
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	f7fc ff7d 	bl	800319a <_close>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_close_r+0x1a>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_close_r+0x1a>
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	2000017c 	.word	0x2000017c

080062b0 <__sflush_r>:
 80062b0:	898a      	ldrh	r2, [r1, #12]
 80062b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	4605      	mov	r5, r0
 80062b8:	0710      	lsls	r0, r2, #28
 80062ba:	460c      	mov	r4, r1
 80062bc:	d458      	bmi.n	8006370 <__sflush_r+0xc0>
 80062be:	684b      	ldr	r3, [r1, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dc05      	bgt.n	80062d0 <__sflush_r+0x20>
 80062c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dc02      	bgt.n	80062d0 <__sflush_r+0x20>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d0f9      	beq.n	80062ca <__sflush_r+0x1a>
 80062d6:	2300      	movs	r3, #0
 80062d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062dc:	682f      	ldr	r7, [r5, #0]
 80062de:	6a21      	ldr	r1, [r4, #32]
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	d032      	beq.n	800634a <__sflush_r+0x9a>
 80062e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	075a      	lsls	r2, r3, #29
 80062ea:	d505      	bpl.n	80062f8 <__sflush_r+0x48>
 80062ec:	6863      	ldr	r3, [r4, #4]
 80062ee:	1ac0      	subs	r0, r0, r3
 80062f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062f2:	b10b      	cbz	r3, 80062f8 <__sflush_r+0x48>
 80062f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062f6:	1ac0      	subs	r0, r0, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	4602      	mov	r2, r0
 80062fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062fe:	6a21      	ldr	r1, [r4, #32]
 8006300:	4628      	mov	r0, r5
 8006302:	47b0      	blx	r6
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	d106      	bne.n	8006318 <__sflush_r+0x68>
 800630a:	6829      	ldr	r1, [r5, #0]
 800630c:	291d      	cmp	r1, #29
 800630e:	d848      	bhi.n	80063a2 <__sflush_r+0xf2>
 8006310:	4a29      	ldr	r2, [pc, #164]	; (80063b8 <__sflush_r+0x108>)
 8006312:	40ca      	lsrs	r2, r1
 8006314:	07d6      	lsls	r6, r2, #31
 8006316:	d544      	bpl.n	80063a2 <__sflush_r+0xf2>
 8006318:	2200      	movs	r2, #0
 800631a:	6062      	str	r2, [r4, #4]
 800631c:	04d9      	lsls	r1, r3, #19
 800631e:	6922      	ldr	r2, [r4, #16]
 8006320:	6022      	str	r2, [r4, #0]
 8006322:	d504      	bpl.n	800632e <__sflush_r+0x7e>
 8006324:	1c42      	adds	r2, r0, #1
 8006326:	d101      	bne.n	800632c <__sflush_r+0x7c>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b903      	cbnz	r3, 800632e <__sflush_r+0x7e>
 800632c:	6560      	str	r0, [r4, #84]	; 0x54
 800632e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006330:	602f      	str	r7, [r5, #0]
 8006332:	2900      	cmp	r1, #0
 8006334:	d0c9      	beq.n	80062ca <__sflush_r+0x1a>
 8006336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800633a:	4299      	cmp	r1, r3
 800633c:	d002      	beq.n	8006344 <__sflush_r+0x94>
 800633e:	4628      	mov	r0, r5
 8006340:	f000 f8de 	bl	8006500 <_free_r>
 8006344:	2000      	movs	r0, #0
 8006346:	6360      	str	r0, [r4, #52]	; 0x34
 8006348:	e7c0      	b.n	80062cc <__sflush_r+0x1c>
 800634a:	2301      	movs	r3, #1
 800634c:	4628      	mov	r0, r5
 800634e:	47b0      	blx	r6
 8006350:	1c41      	adds	r1, r0, #1
 8006352:	d1c8      	bne.n	80062e6 <__sflush_r+0x36>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0c5      	beq.n	80062e6 <__sflush_r+0x36>
 800635a:	2b1d      	cmp	r3, #29
 800635c:	d001      	beq.n	8006362 <__sflush_r+0xb2>
 800635e:	2b16      	cmp	r3, #22
 8006360:	d101      	bne.n	8006366 <__sflush_r+0xb6>
 8006362:	602f      	str	r7, [r5, #0]
 8006364:	e7b1      	b.n	80062ca <__sflush_r+0x1a>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	e7ad      	b.n	80062cc <__sflush_r+0x1c>
 8006370:	690f      	ldr	r7, [r1, #16]
 8006372:	2f00      	cmp	r7, #0
 8006374:	d0a9      	beq.n	80062ca <__sflush_r+0x1a>
 8006376:	0793      	lsls	r3, r2, #30
 8006378:	680e      	ldr	r6, [r1, #0]
 800637a:	bf08      	it	eq
 800637c:	694b      	ldreq	r3, [r1, #20]
 800637e:	600f      	str	r7, [r1, #0]
 8006380:	bf18      	it	ne
 8006382:	2300      	movne	r3, #0
 8006384:	eba6 0807 	sub.w	r8, r6, r7
 8006388:	608b      	str	r3, [r1, #8]
 800638a:	f1b8 0f00 	cmp.w	r8, #0
 800638e:	dd9c      	ble.n	80062ca <__sflush_r+0x1a>
 8006390:	4643      	mov	r3, r8
 8006392:	463a      	mov	r2, r7
 8006394:	6a21      	ldr	r1, [r4, #32]
 8006396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006398:	4628      	mov	r0, r5
 800639a:	47b0      	blx	r6
 800639c:	2800      	cmp	r0, #0
 800639e:	dc06      	bgt.n	80063ae <__sflush_r+0xfe>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ac:	e78e      	b.n	80062cc <__sflush_r+0x1c>
 80063ae:	4407      	add	r7, r0
 80063b0:	eba8 0800 	sub.w	r8, r8, r0
 80063b4:	e7e9      	b.n	800638a <__sflush_r+0xda>
 80063b6:	bf00      	nop
 80063b8:	20400001 	.word	0x20400001

080063bc <_fflush_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	b1db      	cbz	r3, 80063fe <_fflush_r+0x42>
 80063c6:	b118      	cbz	r0, 80063d0 <_fflush_r+0x14>
 80063c8:	6983      	ldr	r3, [r0, #24]
 80063ca:	b90b      	cbnz	r3, 80063d0 <_fflush_r+0x14>
 80063cc:	f7ff fa8e 	bl	80058ec <__sinit>
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <_fflush_r+0x48>)
 80063d2:	429c      	cmp	r4, r3
 80063d4:	d109      	bne.n	80063ea <_fflush_r+0x2e>
 80063d6:	686c      	ldr	r4, [r5, #4]
 80063d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063dc:	b17b      	cbz	r3, 80063fe <_fflush_r+0x42>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e6:	f7ff bf63 	b.w	80062b0 <__sflush_r>
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <_fflush_r+0x4c>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d101      	bne.n	80063f4 <_fflush_r+0x38>
 80063f0:	68ac      	ldr	r4, [r5, #8]
 80063f2:	e7f1      	b.n	80063d8 <_fflush_r+0x1c>
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <_fflush_r+0x50>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	bf08      	it	eq
 80063fa:	68ec      	ldreq	r4, [r5, #12]
 80063fc:	e7ec      	b.n	80063d8 <_fflush_r+0x1c>
 80063fe:	2000      	movs	r0, #0
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	080071c0 	.word	0x080071c0
 8006408:	080071e0 	.word	0x080071e0
 800640c:	080071a0 	.word	0x080071a0

08006410 <_lseek_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4c07      	ldr	r4, [pc, #28]	; (8006430 <_lseek_r+0x20>)
 8006414:	4605      	mov	r5, r0
 8006416:	4608      	mov	r0, r1
 8006418:	4611      	mov	r1, r2
 800641a:	2200      	movs	r2, #0
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f7fc fee2 	bl	80031e8 <_lseek>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_lseek_r+0x1e>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	b103      	cbz	r3, 800642e <_lseek_r+0x1e>
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	2000017c 	.word	0x2000017c

08006434 <__swhatbuf_r>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	460e      	mov	r6, r1
 8006438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643c:	2900      	cmp	r1, #0
 800643e:	b096      	sub	sp, #88	; 0x58
 8006440:	4614      	mov	r4, r2
 8006442:	461d      	mov	r5, r3
 8006444:	da07      	bge.n	8006456 <__swhatbuf_r+0x22>
 8006446:	2300      	movs	r3, #0
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	89b3      	ldrh	r3, [r6, #12]
 800644c:	061a      	lsls	r2, r3, #24
 800644e:	d410      	bmi.n	8006472 <__swhatbuf_r+0x3e>
 8006450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006454:	e00e      	b.n	8006474 <__swhatbuf_r+0x40>
 8006456:	466a      	mov	r2, sp
 8006458:	f000 f8b2 	bl	80065c0 <_fstat_r>
 800645c:	2800      	cmp	r0, #0
 800645e:	dbf2      	blt.n	8006446 <__swhatbuf_r+0x12>
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006466:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800646a:	425a      	negs	r2, r3
 800646c:	415a      	adcs	r2, r3
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	e7ee      	b.n	8006450 <__swhatbuf_r+0x1c>
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	2000      	movs	r0, #0
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	b016      	add	sp, #88	; 0x58
 800647a:	bd70      	pop	{r4, r5, r6, pc}

0800647c <__smakebuf_r>:
 800647c:	898b      	ldrh	r3, [r1, #12]
 800647e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006480:	079d      	lsls	r5, r3, #30
 8006482:	4606      	mov	r6, r0
 8006484:	460c      	mov	r4, r1
 8006486:	d507      	bpl.n	8006498 <__smakebuf_r+0x1c>
 8006488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	2301      	movs	r3, #1
 8006492:	6163      	str	r3, [r4, #20]
 8006494:	b002      	add	sp, #8
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	ab01      	add	r3, sp, #4
 800649a:	466a      	mov	r2, sp
 800649c:	f7ff ffca 	bl	8006434 <__swhatbuf_r>
 80064a0:	9900      	ldr	r1, [sp, #0]
 80064a2:	4605      	mov	r5, r0
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff faab 	bl	8005a00 <_malloc_r>
 80064aa:	b948      	cbnz	r0, 80064c0 <__smakebuf_r+0x44>
 80064ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b0:	059a      	lsls	r2, r3, #22
 80064b2:	d4ef      	bmi.n	8006494 <__smakebuf_r+0x18>
 80064b4:	f023 0303 	bic.w	r3, r3, #3
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	e7e3      	b.n	8006488 <__smakebuf_r+0xc>
 80064c0:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <__smakebuf_r+0x7c>)
 80064c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	6020      	str	r0, [r4, #0]
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	9b00      	ldr	r3, [sp, #0]
 80064d0:	6163      	str	r3, [r4, #20]
 80064d2:	9b01      	ldr	r3, [sp, #4]
 80064d4:	6120      	str	r0, [r4, #16]
 80064d6:	b15b      	cbz	r3, 80064f0 <__smakebuf_r+0x74>
 80064d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 f881 	bl	80065e4 <_isatty_r>
 80064e2:	b128      	cbz	r0, 80064f0 <__smakebuf_r+0x74>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	431d      	orrs	r5, r3
 80064f4:	81a5      	strh	r5, [r4, #12]
 80064f6:	e7cd      	b.n	8006494 <__smakebuf_r+0x18>
 80064f8:	080058b5 	.word	0x080058b5

080064fc <__malloc_lock>:
 80064fc:	4770      	bx	lr

080064fe <__malloc_unlock>:
 80064fe:	4770      	bx	lr

08006500 <_free_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4605      	mov	r5, r0
 8006504:	2900      	cmp	r1, #0
 8006506:	d045      	beq.n	8006594 <_free_r+0x94>
 8006508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650c:	1f0c      	subs	r4, r1, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	bfb8      	it	lt
 8006512:	18e4      	addlt	r4, r4, r3
 8006514:	f7ff fff2 	bl	80064fc <__malloc_lock>
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <_free_r+0x98>)
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	4610      	mov	r0, r2
 800651e:	b933      	cbnz	r3, 800652e <_free_r+0x2e>
 8006520:	6063      	str	r3, [r4, #4]
 8006522:	6014      	str	r4, [r2, #0]
 8006524:	4628      	mov	r0, r5
 8006526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800652a:	f7ff bfe8 	b.w	80064fe <__malloc_unlock>
 800652e:	42a3      	cmp	r3, r4
 8006530:	d90c      	bls.n	800654c <_free_r+0x4c>
 8006532:	6821      	ldr	r1, [r4, #0]
 8006534:	1862      	adds	r2, r4, r1
 8006536:	4293      	cmp	r3, r2
 8006538:	bf04      	itt	eq
 800653a:	681a      	ldreq	r2, [r3, #0]
 800653c:	685b      	ldreq	r3, [r3, #4]
 800653e:	6063      	str	r3, [r4, #4]
 8006540:	bf04      	itt	eq
 8006542:	1852      	addeq	r2, r2, r1
 8006544:	6022      	streq	r2, [r4, #0]
 8006546:	6004      	str	r4, [r0, #0]
 8006548:	e7ec      	b.n	8006524 <_free_r+0x24>
 800654a:	4613      	mov	r3, r2
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	b10a      	cbz	r2, 8006554 <_free_r+0x54>
 8006550:	42a2      	cmp	r2, r4
 8006552:	d9fa      	bls.n	800654a <_free_r+0x4a>
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	1858      	adds	r0, r3, r1
 8006558:	42a0      	cmp	r0, r4
 800655a:	d10b      	bne.n	8006574 <_free_r+0x74>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	4401      	add	r1, r0
 8006560:	1858      	adds	r0, r3, r1
 8006562:	4282      	cmp	r2, r0
 8006564:	6019      	str	r1, [r3, #0]
 8006566:	d1dd      	bne.n	8006524 <_free_r+0x24>
 8006568:	6810      	ldr	r0, [r2, #0]
 800656a:	6852      	ldr	r2, [r2, #4]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	4401      	add	r1, r0
 8006570:	6019      	str	r1, [r3, #0]
 8006572:	e7d7      	b.n	8006524 <_free_r+0x24>
 8006574:	d902      	bls.n	800657c <_free_r+0x7c>
 8006576:	230c      	movs	r3, #12
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	e7d3      	b.n	8006524 <_free_r+0x24>
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	1821      	adds	r1, r4, r0
 8006580:	428a      	cmp	r2, r1
 8006582:	bf04      	itt	eq
 8006584:	6811      	ldreq	r1, [r2, #0]
 8006586:	6852      	ldreq	r2, [r2, #4]
 8006588:	6062      	str	r2, [r4, #4]
 800658a:	bf04      	itt	eq
 800658c:	1809      	addeq	r1, r1, r0
 800658e:	6021      	streq	r1, [r4, #0]
 8006590:	605c      	str	r4, [r3, #4]
 8006592:	e7c7      	b.n	8006524 <_free_r+0x24>
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	bf00      	nop
 8006598:	20000098 	.word	0x20000098

0800659c <_read_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4c07      	ldr	r4, [pc, #28]	; (80065bc <_read_r+0x20>)
 80065a0:	4605      	mov	r5, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fc fdbc 	bl	8003128 <_read>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_read_r+0x1e>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_read_r+0x1e>
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	2000017c 	.word	0x2000017c

080065c0 <_fstat_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4c07      	ldr	r4, [pc, #28]	; (80065e0 <_fstat_r+0x20>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4605      	mov	r5, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	4611      	mov	r1, r2
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	f7fc fdf0 	bl	80031b2 <_fstat>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	d102      	bne.n	80065dc <_fstat_r+0x1c>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	b103      	cbz	r3, 80065dc <_fstat_r+0x1c>
 80065da:	602b      	str	r3, [r5, #0]
 80065dc:	bd38      	pop	{r3, r4, r5, pc}
 80065de:	bf00      	nop
 80065e0:	2000017c 	.word	0x2000017c

080065e4 <_isatty_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4c06      	ldr	r4, [pc, #24]	; (8006600 <_isatty_r+0x1c>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4605      	mov	r5, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	f7fc fdef 	bl	80031d2 <_isatty>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_isatty_r+0x1a>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_isatty_r+0x1a>
 80065fc:	602b      	str	r3, [r5, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	2000017c 	.word	0x2000017c

08006604 <asin>:
 8006604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006606:	ed2d 8b02 	vpush	{d8}
 800660a:	4e26      	ldr	r6, [pc, #152]	; (80066a4 <asin+0xa0>)
 800660c:	b08b      	sub	sp, #44	; 0x2c
 800660e:	ec55 4b10 	vmov	r4, r5, d0
 8006612:	f000 f851 	bl	80066b8 <__ieee754_asin>
 8006616:	f996 3000 	ldrsb.w	r3, [r6]
 800661a:	eeb0 8a40 	vmov.f32	s16, s0
 800661e:	eef0 8a60 	vmov.f32	s17, s1
 8006622:	3301      	adds	r3, #1
 8006624:	d036      	beq.n	8006694 <asin+0x90>
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7fa fa95 	bl	8000b5c <__aeabi_dcmpun>
 8006632:	4607      	mov	r7, r0
 8006634:	bb70      	cbnz	r0, 8006694 <asin+0x90>
 8006636:	ec45 4b10 	vmov	d0, r4, r5
 800663a:	f000 fd7d 	bl	8007138 <fabs>
 800663e:	2200      	movs	r2, #0
 8006640:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <asin+0xa4>)
 8006642:	ec51 0b10 	vmov	r0, r1, d0
 8006646:	f7fa fa7f 	bl	8000b48 <__aeabi_dcmpgt>
 800664a:	b318      	cbz	r0, 8006694 <asin+0x90>
 800664c:	2301      	movs	r3, #1
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	4816      	ldr	r0, [pc, #88]	; (80066ac <asin+0xa8>)
 8006652:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <asin+0xac>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	9708      	str	r7, [sp, #32]
 8006658:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800665c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006660:	f000 fd76 	bl	8007150 <nan>
 8006664:	f996 3000 	ldrsb.w	r3, [r6]
 8006668:	2b02      	cmp	r3, #2
 800666a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800666e:	d104      	bne.n	800667a <asin+0x76>
 8006670:	f7ff f8b2 	bl	80057d8 <__errno>
 8006674:	2321      	movs	r3, #33	; 0x21
 8006676:	6003      	str	r3, [r0, #0]
 8006678:	e004      	b.n	8006684 <asin+0x80>
 800667a:	4668      	mov	r0, sp
 800667c:	f000 fd65 	bl	800714a <matherr>
 8006680:	2800      	cmp	r0, #0
 8006682:	d0f5      	beq.n	8006670 <asin+0x6c>
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	b11b      	cbz	r3, 8006690 <asin+0x8c>
 8006688:	f7ff f8a6 	bl	80057d8 <__errno>
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	6003      	str	r3, [r0, #0]
 8006690:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006694:	eeb0 0a48 	vmov.f32	s0, s16
 8006698:	eef0 0a68 	vmov.f32	s1, s17
 800669c:	b00b      	add	sp, #44	; 0x2c
 800669e:	ecbd 8b02 	vpop	{d8}
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a4:	20000070 	.word	0x20000070
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	08007205 	.word	0x08007205
 80066b0:	08007233 	.word	0x08007233

080066b4 <atan2>:
 80066b4:	f000 ba10 	b.w	8006ad8 <__ieee754_atan2>

080066b8 <__ieee754_asin>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	ec55 4b10 	vmov	r4, r5, d0
 80066c0:	4bcb      	ldr	r3, [pc, #812]	; (80069f0 <__ieee754_asin+0x338>)
 80066c2:	b087      	sub	sp, #28
 80066c4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80066c8:	429f      	cmp	r7, r3
 80066ca:	9501      	str	r5, [sp, #4]
 80066cc:	dd31      	ble.n	8006732 <__ieee754_asin+0x7a>
 80066ce:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80066d2:	ee10 3a10 	vmov	r3, s0
 80066d6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80066da:	433b      	orrs	r3, r7
 80066dc:	d117      	bne.n	800670e <__ieee754_asin+0x56>
 80066de:	a3aa      	add	r3, pc, #680	; (adr r3, 8006988 <__ieee754_asin+0x2d0>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	ee10 0a10 	vmov	r0, s0
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7f9 ff9d 	bl	8000628 <__aeabi_dmul>
 80066ee:	a3a8      	add	r3, pc, #672	; (adr r3, 8006990 <__ieee754_asin+0x2d8>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	4620      	mov	r0, r4
 80066fa:	4629      	mov	r1, r5
 80066fc:	f7f9 ff94 	bl	8000628 <__aeabi_dmul>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4630      	mov	r0, r6
 8006706:	4639      	mov	r1, r7
 8006708:	f7f9 fdd8 	bl	80002bc <__adddf3>
 800670c:	e00a      	b.n	8006724 <__ieee754_asin+0x6c>
 800670e:	ee10 2a10 	vmov	r2, s0
 8006712:	462b      	mov	r3, r5
 8006714:	4620      	mov	r0, r4
 8006716:	4629      	mov	r1, r5
 8006718:	f7f9 fdce 	bl	80002b8 <__aeabi_dsub>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	f7fa f8ac 	bl	800087c <__aeabi_ddiv>
 8006724:	4604      	mov	r4, r0
 8006726:	460d      	mov	r5, r1
 8006728:	ec45 4b10 	vmov	d0, r4, r5
 800672c:	b007      	add	sp, #28
 800672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006732:	4bb0      	ldr	r3, [pc, #704]	; (80069f4 <__ieee754_asin+0x33c>)
 8006734:	429f      	cmp	r7, r3
 8006736:	dc11      	bgt.n	800675c <__ieee754_asin+0xa4>
 8006738:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800673c:	f280 80ae 	bge.w	800689c <__ieee754_asin+0x1e4>
 8006740:	a395      	add	r3, pc, #596	; (adr r3, 8006998 <__ieee754_asin+0x2e0>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	ee10 0a10 	vmov	r0, s0
 800674a:	4629      	mov	r1, r5
 800674c:	f7f9 fdb6 	bl	80002bc <__adddf3>
 8006750:	2200      	movs	r2, #0
 8006752:	4ba9      	ldr	r3, [pc, #676]	; (80069f8 <__ieee754_asin+0x340>)
 8006754:	f7fa f9f8 	bl	8000b48 <__aeabi_dcmpgt>
 8006758:	2800      	cmp	r0, #0
 800675a:	d1e5      	bne.n	8006728 <__ieee754_asin+0x70>
 800675c:	ec45 4b10 	vmov	d0, r4, r5
 8006760:	f000 fcea 	bl	8007138 <fabs>
 8006764:	2000      	movs	r0, #0
 8006766:	ec53 2b10 	vmov	r2, r3, d0
 800676a:	49a3      	ldr	r1, [pc, #652]	; (80069f8 <__ieee754_asin+0x340>)
 800676c:	f7f9 fda4 	bl	80002b8 <__aeabi_dsub>
 8006770:	2200      	movs	r2, #0
 8006772:	4ba2      	ldr	r3, [pc, #648]	; (80069fc <__ieee754_asin+0x344>)
 8006774:	f7f9 ff58 	bl	8000628 <__aeabi_dmul>
 8006778:	a389      	add	r3, pc, #548	; (adr r3, 80069a0 <__ieee754_asin+0x2e8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	f7f9 ff51 	bl	8000628 <__aeabi_dmul>
 8006786:	a388      	add	r3, pc, #544	; (adr r3, 80069a8 <__ieee754_asin+0x2f0>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fd96 	bl	80002bc <__adddf3>
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	f7f9 ff48 	bl	8000628 <__aeabi_dmul>
 8006798:	a385      	add	r3, pc, #532	; (adr r3, 80069b0 <__ieee754_asin+0x2f8>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 fd8b 	bl	80002b8 <__aeabi_dsub>
 80067a2:	4622      	mov	r2, r4
 80067a4:	462b      	mov	r3, r5
 80067a6:	f7f9 ff3f 	bl	8000628 <__aeabi_dmul>
 80067aa:	a383      	add	r3, pc, #524	; (adr r3, 80069b8 <__ieee754_asin+0x300>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7f9 fd84 	bl	80002bc <__adddf3>
 80067b4:	4622      	mov	r2, r4
 80067b6:	462b      	mov	r3, r5
 80067b8:	f7f9 ff36 	bl	8000628 <__aeabi_dmul>
 80067bc:	a380      	add	r3, pc, #512	; (adr r3, 80069c0 <__ieee754_asin+0x308>)
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	f7f9 fd79 	bl	80002b8 <__aeabi_dsub>
 80067c6:	4622      	mov	r2, r4
 80067c8:	462b      	mov	r3, r5
 80067ca:	f7f9 ff2d 	bl	8000628 <__aeabi_dmul>
 80067ce:	a37e      	add	r3, pc, #504	; (adr r3, 80069c8 <__ieee754_asin+0x310>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 fd72 	bl	80002bc <__adddf3>
 80067d8:	4622      	mov	r2, r4
 80067da:	462b      	mov	r3, r5
 80067dc:	f7f9 ff24 	bl	8000628 <__aeabi_dmul>
 80067e0:	a37b      	add	r3, pc, #492	; (adr r3, 80069d0 <__ieee754_asin+0x318>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	4680      	mov	r8, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 ff1b 	bl	8000628 <__aeabi_dmul>
 80067f2:	a379      	add	r3, pc, #484	; (adr r3, 80069d8 <__ieee754_asin+0x320>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f7f9 fd5e 	bl	80002b8 <__aeabi_dsub>
 80067fc:	4622      	mov	r2, r4
 80067fe:	462b      	mov	r3, r5
 8006800:	f7f9 ff12 	bl	8000628 <__aeabi_dmul>
 8006804:	a376      	add	r3, pc, #472	; (adr r3, 80069e0 <__ieee754_asin+0x328>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f7f9 fd57 	bl	80002bc <__adddf3>
 800680e:	4622      	mov	r2, r4
 8006810:	462b      	mov	r3, r5
 8006812:	f7f9 ff09 	bl	8000628 <__aeabi_dmul>
 8006816:	a374      	add	r3, pc, #464	; (adr r3, 80069e8 <__ieee754_asin+0x330>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 fd4c 	bl	80002b8 <__aeabi_dsub>
 8006820:	4622      	mov	r2, r4
 8006822:	462b      	mov	r3, r5
 8006824:	f7f9 ff00 	bl	8000628 <__aeabi_dmul>
 8006828:	4b73      	ldr	r3, [pc, #460]	; (80069f8 <__ieee754_asin+0x340>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd46 	bl	80002bc <__adddf3>
 8006830:	ec45 4b10 	vmov	d0, r4, r5
 8006834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006838:	f000 fa2c 	bl	8006c94 <__ieee754_sqrt>
 800683c:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <__ieee754_asin+0x348>)
 800683e:	429f      	cmp	r7, r3
 8006840:	ec5b ab10 	vmov	sl, fp, d0
 8006844:	f340 80de 	ble.w	8006a04 <__ieee754_asin+0x34c>
 8006848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800684c:	4640      	mov	r0, r8
 800684e:	4649      	mov	r1, r9
 8006850:	f7fa f814 	bl	800087c <__aeabi_ddiv>
 8006854:	4652      	mov	r2, sl
 8006856:	465b      	mov	r3, fp
 8006858:	f7f9 fee6 	bl	8000628 <__aeabi_dmul>
 800685c:	4652      	mov	r2, sl
 800685e:	465b      	mov	r3, fp
 8006860:	f7f9 fd2c 	bl	80002bc <__adddf3>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	f7f9 fd28 	bl	80002bc <__adddf3>
 800686c:	a348      	add	r3, pc, #288	; (adr r3, 8006990 <__ieee754_asin+0x2d8>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd21 	bl	80002b8 <__aeabi_dsub>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	a143      	add	r1, pc, #268	; (adr r1, 8006988 <__ieee754_asin+0x2d0>)
 800687c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006880:	f7f9 fd1a 	bl	80002b8 <__aeabi_dsub>
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	bfdc      	itt	le
 800688a:	4602      	movle	r2, r0
 800688c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006890:	4604      	mov	r4, r0
 8006892:	460d      	mov	r5, r1
 8006894:	bfdc      	itt	le
 8006896:	4614      	movle	r4, r2
 8006898:	461d      	movle	r5, r3
 800689a:	e745      	b.n	8006728 <__ieee754_asin+0x70>
 800689c:	ee10 2a10 	vmov	r2, s0
 80068a0:	ee10 0a10 	vmov	r0, s0
 80068a4:	462b      	mov	r3, r5
 80068a6:	4629      	mov	r1, r5
 80068a8:	f7f9 febe 	bl	8000628 <__aeabi_dmul>
 80068ac:	a33c      	add	r3, pc, #240	; (adr r3, 80069a0 <__ieee754_asin+0x2e8>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	f7f9 feb7 	bl	8000628 <__aeabi_dmul>
 80068ba:	a33b      	add	r3, pc, #236	; (adr r3, 80069a8 <__ieee754_asin+0x2f0>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fcfc 	bl	80002bc <__adddf3>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	f7f9 feae 	bl	8000628 <__aeabi_dmul>
 80068cc:	a338      	add	r3, pc, #224	; (adr r3, 80069b0 <__ieee754_asin+0x2f8>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fcf1 	bl	80002b8 <__aeabi_dsub>
 80068d6:	4632      	mov	r2, r6
 80068d8:	463b      	mov	r3, r7
 80068da:	f7f9 fea5 	bl	8000628 <__aeabi_dmul>
 80068de:	a336      	add	r3, pc, #216	; (adr r3, 80069b8 <__ieee754_asin+0x300>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f7f9 fcea 	bl	80002bc <__adddf3>
 80068e8:	4632      	mov	r2, r6
 80068ea:	463b      	mov	r3, r7
 80068ec:	f7f9 fe9c 	bl	8000628 <__aeabi_dmul>
 80068f0:	a333      	add	r3, pc, #204	; (adr r3, 80069c0 <__ieee754_asin+0x308>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fcdf 	bl	80002b8 <__aeabi_dsub>
 80068fa:	4632      	mov	r2, r6
 80068fc:	463b      	mov	r3, r7
 80068fe:	f7f9 fe93 	bl	8000628 <__aeabi_dmul>
 8006902:	a331      	add	r3, pc, #196	; (adr r3, 80069c8 <__ieee754_asin+0x310>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fcd8 	bl	80002bc <__adddf3>
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	f7f9 fe8a 	bl	8000628 <__aeabi_dmul>
 8006914:	a32e      	add	r3, pc, #184	; (adr r3, 80069d0 <__ieee754_asin+0x318>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	4680      	mov	r8, r0
 800691c:	4689      	mov	r9, r1
 800691e:	4630      	mov	r0, r6
 8006920:	4639      	mov	r1, r7
 8006922:	f7f9 fe81 	bl	8000628 <__aeabi_dmul>
 8006926:	a32c      	add	r3, pc, #176	; (adr r3, 80069d8 <__ieee754_asin+0x320>)
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f7f9 fcc4 	bl	80002b8 <__aeabi_dsub>
 8006930:	4632      	mov	r2, r6
 8006932:	463b      	mov	r3, r7
 8006934:	f7f9 fe78 	bl	8000628 <__aeabi_dmul>
 8006938:	a329      	add	r3, pc, #164	; (adr r3, 80069e0 <__ieee754_asin+0x328>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fcbd 	bl	80002bc <__adddf3>
 8006942:	4632      	mov	r2, r6
 8006944:	463b      	mov	r3, r7
 8006946:	f7f9 fe6f 	bl	8000628 <__aeabi_dmul>
 800694a:	a327      	add	r3, pc, #156	; (adr r3, 80069e8 <__ieee754_asin+0x330>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	f7f9 fcb2 	bl	80002b8 <__aeabi_dsub>
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	f7f9 fe66 	bl	8000628 <__aeabi_dmul>
 800695c:	2200      	movs	r2, #0
 800695e:	4b26      	ldr	r3, [pc, #152]	; (80069f8 <__ieee754_asin+0x340>)
 8006960:	f7f9 fcac 	bl	80002bc <__adddf3>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 ff86 	bl	800087c <__aeabi_ddiv>
 8006970:	4622      	mov	r2, r4
 8006972:	462b      	mov	r3, r5
 8006974:	f7f9 fe58 	bl	8000628 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	e6c2      	b.n	8006708 <__ieee754_asin+0x50>
 8006982:	bf00      	nop
 8006984:	f3af 8000 	nop.w
 8006988:	54442d18 	.word	0x54442d18
 800698c:	3ff921fb 	.word	0x3ff921fb
 8006990:	33145c07 	.word	0x33145c07
 8006994:	3c91a626 	.word	0x3c91a626
 8006998:	8800759c 	.word	0x8800759c
 800699c:	7e37e43c 	.word	0x7e37e43c
 80069a0:	0dfdf709 	.word	0x0dfdf709
 80069a4:	3f023de1 	.word	0x3f023de1
 80069a8:	7501b288 	.word	0x7501b288
 80069ac:	3f49efe0 	.word	0x3f49efe0
 80069b0:	b5688f3b 	.word	0xb5688f3b
 80069b4:	3fa48228 	.word	0x3fa48228
 80069b8:	0e884455 	.word	0x0e884455
 80069bc:	3fc9c155 	.word	0x3fc9c155
 80069c0:	03eb6f7d 	.word	0x03eb6f7d
 80069c4:	3fd4d612 	.word	0x3fd4d612
 80069c8:	55555555 	.word	0x55555555
 80069cc:	3fc55555 	.word	0x3fc55555
 80069d0:	b12e9282 	.word	0xb12e9282
 80069d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80069d8:	1b8d0159 	.word	0x1b8d0159
 80069dc:	3fe6066c 	.word	0x3fe6066c
 80069e0:	9c598ac8 	.word	0x9c598ac8
 80069e4:	40002ae5 	.word	0x40002ae5
 80069e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80069ec:	40033a27 	.word	0x40033a27
 80069f0:	3fefffff 	.word	0x3fefffff
 80069f4:	3fdfffff 	.word	0x3fdfffff
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	3fe00000 	.word	0x3fe00000
 8006a00:	3fef3332 	.word	0x3fef3332
 8006a04:	ee10 2a10 	vmov	r2, s0
 8006a08:	ee10 0a10 	vmov	r0, s0
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fc54 	bl	80002bc <__adddf3>
 8006a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4649      	mov	r1, r9
 8006a20:	f7f9 ff2c 	bl	800087c <__aeabi_ddiv>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2c:	f7f9 fdfc 	bl	8000628 <__aeabi_dmul>
 8006a30:	2600      	movs	r6, #0
 8006a32:	4680      	mov	r8, r0
 8006a34:	4689      	mov	r9, r1
 8006a36:	4632      	mov	r2, r6
 8006a38:	465b      	mov	r3, fp
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	f7f9 fdf3 	bl	8000628 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7f9 fc35 	bl	80002b8 <__aeabi_dsub>
 8006a4e:	4632      	mov	r2, r6
 8006a50:	4604      	mov	r4, r0
 8006a52:	460d      	mov	r5, r1
 8006a54:	465b      	mov	r3, fp
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	f7f9 fc2f 	bl	80002bc <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4620      	mov	r0, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7f9 ff09 	bl	800087c <__aeabi_ddiv>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	f7f9 fc25 	bl	80002bc <__adddf3>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	a114      	add	r1, pc, #80	; (adr r1, 8006ac8 <__ieee754_asin+0x410>)
 8006a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a7c:	f7f9 fc1c 	bl	80002b8 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7f9 fc16 	bl	80002b8 <__aeabi_dsub>
 8006a8c:	465f      	mov	r7, fp
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	4632      	mov	r2, r6
 8006a94:	465b      	mov	r3, fp
 8006a96:	4630      	mov	r0, r6
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7f9 fc0f 	bl	80002bc <__adddf3>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	a10b      	add	r1, pc, #44	; (adr r1, 8006ad0 <__ieee754_asin+0x418>)
 8006aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa8:	f7f9 fc06 	bl	80002b8 <__aeabi_dsub>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	f7f9 fc00 	bl	80002b8 <__aeabi_dsub>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	a104      	add	r1, pc, #16	; (adr r1, 8006ad0 <__ieee754_asin+0x418>)
 8006abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac2:	e6dd      	b.n	8006880 <__ieee754_asin+0x1c8>
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	33145c07 	.word	0x33145c07
 8006acc:	3c91a626 	.word	0x3c91a626
 8006ad0:	54442d18 	.word	0x54442d18
 8006ad4:	3fe921fb 	.word	0x3fe921fb

08006ad8 <__ieee754_atan2>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	ec57 6b11 	vmov	r6, r7, d1
 8006ae0:	4273      	negs	r3, r6
 8006ae2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006ae6:	4333      	orrs	r3, r6
 8006ae8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006c90 <__ieee754_atan2+0x1b8>
 8006aec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006af0:	4573      	cmp	r3, lr
 8006af2:	ec51 0b10 	vmov	r0, r1, d0
 8006af6:	ee11 8a10 	vmov	r8, s2
 8006afa:	d80a      	bhi.n	8006b12 <__ieee754_atan2+0x3a>
 8006afc:	4244      	negs	r4, r0
 8006afe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b02:	4304      	orrs	r4, r0
 8006b04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006b08:	4574      	cmp	r4, lr
 8006b0a:	468c      	mov	ip, r1
 8006b0c:	ee10 9a10 	vmov	r9, s0
 8006b10:	d907      	bls.n	8006b22 <__ieee754_atan2+0x4a>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fbd1 	bl	80002bc <__adddf3>
 8006b1a:	ec41 0b10 	vmov	d0, r0, r1
 8006b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006b26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b2a:	4334      	orrs	r4, r6
 8006b2c:	d103      	bne.n	8006b36 <__ieee754_atan2+0x5e>
 8006b2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b32:	f000 b961 	b.w	8006df8 <atan>
 8006b36:	17bc      	asrs	r4, r7, #30
 8006b38:	f004 0402 	and.w	r4, r4, #2
 8006b3c:	ea53 0909 	orrs.w	r9, r3, r9
 8006b40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006b44:	d107      	bne.n	8006b56 <__ieee754_atan2+0x7e>
 8006b46:	2c02      	cmp	r4, #2
 8006b48:	d073      	beq.n	8006c32 <__ieee754_atan2+0x15a>
 8006b4a:	2c03      	cmp	r4, #3
 8006b4c:	d1e5      	bne.n	8006b1a <__ieee754_atan2+0x42>
 8006b4e:	a13e      	add	r1, pc, #248	; (adr r1, 8006c48 <__ieee754_atan2+0x170>)
 8006b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b54:	e7e1      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006b56:	ea52 0808 	orrs.w	r8, r2, r8
 8006b5a:	d106      	bne.n	8006b6a <__ieee754_atan2+0x92>
 8006b5c:	f1bc 0f00 	cmp.w	ip, #0
 8006b60:	da6b      	bge.n	8006c3a <__ieee754_atan2+0x162>
 8006b62:	a13b      	add	r1, pc, #236	; (adr r1, 8006c50 <__ieee754_atan2+0x178>)
 8006b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b68:	e7d7      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006b6a:	4572      	cmp	r2, lr
 8006b6c:	d120      	bne.n	8006bb0 <__ieee754_atan2+0xd8>
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <__ieee754_atan2+0xbe>
 8006b72:	2c02      	cmp	r4, #2
 8006b74:	d007      	beq.n	8006b86 <__ieee754_atan2+0xae>
 8006b76:	2c03      	cmp	r4, #3
 8006b78:	d009      	beq.n	8006b8e <__ieee754_atan2+0xb6>
 8006b7a:	2c01      	cmp	r4, #1
 8006b7c:	d155      	bne.n	8006c2a <__ieee754_atan2+0x152>
 8006b7e:	a136      	add	r1, pc, #216	; (adr r1, 8006c58 <__ieee754_atan2+0x180>)
 8006b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b84:	e7c9      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006b86:	a136      	add	r1, pc, #216	; (adr r1, 8006c60 <__ieee754_atan2+0x188>)
 8006b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b8c:	e7c5      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006b8e:	a136      	add	r1, pc, #216	; (adr r1, 8006c68 <__ieee754_atan2+0x190>)
 8006b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b94:	e7c1      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006b96:	2c02      	cmp	r4, #2
 8006b98:	d04b      	beq.n	8006c32 <__ieee754_atan2+0x15a>
 8006b9a:	2c03      	cmp	r4, #3
 8006b9c:	d0d7      	beq.n	8006b4e <__ieee754_atan2+0x76>
 8006b9e:	2c01      	cmp	r4, #1
 8006ba0:	f04f 0000 	mov.w	r0, #0
 8006ba4:	d102      	bne.n	8006bac <__ieee754_atan2+0xd4>
 8006ba6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006baa:	e7b6      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006bac:	2100      	movs	r1, #0
 8006bae:	e7b4      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006bb0:	4573      	cmp	r3, lr
 8006bb2:	d0d3      	beq.n	8006b5c <__ieee754_atan2+0x84>
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	151b      	asrs	r3, r3, #20
 8006bb8:	2b3c      	cmp	r3, #60	; 0x3c
 8006bba:	dc1e      	bgt.n	8006bfa <__ieee754_atan2+0x122>
 8006bbc:	2f00      	cmp	r7, #0
 8006bbe:	da01      	bge.n	8006bc4 <__ieee754_atan2+0xec>
 8006bc0:	333c      	adds	r3, #60	; 0x3c
 8006bc2:	db1e      	blt.n	8006c02 <__ieee754_atan2+0x12a>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	f7f9 fe58 	bl	800087c <__aeabi_ddiv>
 8006bcc:	ec41 0b10 	vmov	d0, r0, r1
 8006bd0:	f000 fab2 	bl	8007138 <fabs>
 8006bd4:	f000 f910 	bl	8006df8 <atan>
 8006bd8:	ec51 0b10 	vmov	r0, r1, d0
 8006bdc:	2c01      	cmp	r4, #1
 8006bde:	d013      	beq.n	8006c08 <__ieee754_atan2+0x130>
 8006be0:	2c02      	cmp	r4, #2
 8006be2:	d015      	beq.n	8006c10 <__ieee754_atan2+0x138>
 8006be4:	2c00      	cmp	r4, #0
 8006be6:	d098      	beq.n	8006b1a <__ieee754_atan2+0x42>
 8006be8:	a321      	add	r3, pc, #132	; (adr r3, 8006c70 <__ieee754_atan2+0x198>)
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f7f9 fb63 	bl	80002b8 <__aeabi_dsub>
 8006bf2:	a321      	add	r3, pc, #132	; (adr r3, 8006c78 <__ieee754_atan2+0x1a0>)
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	e014      	b.n	8006c24 <__ieee754_atan2+0x14c>
 8006bfa:	a121      	add	r1, pc, #132	; (adr r1, 8006c80 <__ieee754_atan2+0x1a8>)
 8006bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c00:	e7ec      	b.n	8006bdc <__ieee754_atan2+0x104>
 8006c02:	2000      	movs	r0, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	e7e9      	b.n	8006bdc <__ieee754_atan2+0x104>
 8006c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	e784      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006c10:	a317      	add	r3, pc, #92	; (adr r3, 8006c70 <__ieee754_atan2+0x198>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fb4f 	bl	80002b8 <__aeabi_dsub>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	a116      	add	r1, pc, #88	; (adr r1, 8006c78 <__ieee754_atan2+0x1a0>)
 8006c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c24:	f7f9 fb48 	bl	80002b8 <__aeabi_dsub>
 8006c28:	e777      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006c2a:	a117      	add	r1, pc, #92	; (adr r1, 8006c88 <__ieee754_atan2+0x1b0>)
 8006c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c30:	e773      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006c32:	a111      	add	r1, pc, #68	; (adr r1, 8006c78 <__ieee754_atan2+0x1a0>)
 8006c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c38:	e76f      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006c3a:	a111      	add	r1, pc, #68	; (adr r1, 8006c80 <__ieee754_atan2+0x1a8>)
 8006c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c40:	e76b      	b.n	8006b1a <__ieee754_atan2+0x42>
 8006c42:	bf00      	nop
 8006c44:	f3af 8000 	nop.w
 8006c48:	54442d18 	.word	0x54442d18
 8006c4c:	c00921fb 	.word	0xc00921fb
 8006c50:	54442d18 	.word	0x54442d18
 8006c54:	bff921fb 	.word	0xbff921fb
 8006c58:	54442d18 	.word	0x54442d18
 8006c5c:	bfe921fb 	.word	0xbfe921fb
 8006c60:	7f3321d2 	.word	0x7f3321d2
 8006c64:	4002d97c 	.word	0x4002d97c
 8006c68:	7f3321d2 	.word	0x7f3321d2
 8006c6c:	c002d97c 	.word	0xc002d97c
 8006c70:	33145c07 	.word	0x33145c07
 8006c74:	3ca1a626 	.word	0x3ca1a626
 8006c78:	54442d18 	.word	0x54442d18
 8006c7c:	400921fb 	.word	0x400921fb
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	3ff921fb 	.word	0x3ff921fb
 8006c88:	54442d18 	.word	0x54442d18
 8006c8c:	3fe921fb 	.word	0x3fe921fb
 8006c90:	7ff00000 	.word	0x7ff00000

08006c94 <__ieee754_sqrt>:
 8006c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c98:	4955      	ldr	r1, [pc, #340]	; (8006df0 <__ieee754_sqrt+0x15c>)
 8006c9a:	ec55 4b10 	vmov	r4, r5, d0
 8006c9e:	43a9      	bics	r1, r5
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	d112      	bne.n	8006ccc <__ieee754_sqrt+0x38>
 8006ca6:	ee10 2a10 	vmov	r2, s0
 8006caa:	ee10 0a10 	vmov	r0, s0
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 fcba 	bl	8000628 <__aeabi_dmul>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7f9 fafe 	bl	80002bc <__adddf3>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	ec45 4b10 	vmov	d0, r4, r5
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	ee10 0a10 	vmov	r0, s0
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	dc0f      	bgt.n	8006cf6 <__ieee754_sqrt+0x62>
 8006cd6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006cda:	4330      	orrs	r0, r6
 8006cdc:	d0f2      	beq.n	8006cc4 <__ieee754_sqrt+0x30>
 8006cde:	b155      	cbz	r5, 8006cf6 <__ieee754_sqrt+0x62>
 8006ce0:	ee10 2a10 	vmov	r2, s0
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fae6 	bl	80002b8 <__aeabi_dsub>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	f7f9 fdc4 	bl	800087c <__aeabi_ddiv>
 8006cf4:	e7e4      	b.n	8006cc0 <__ieee754_sqrt+0x2c>
 8006cf6:	151b      	asrs	r3, r3, #20
 8006cf8:	d073      	beq.n	8006de2 <__ieee754_sqrt+0x14e>
 8006cfa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006cfe:	07dd      	lsls	r5, r3, #31
 8006d00:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006d04:	bf48      	it	mi
 8006d06:	0fc8      	lsrmi	r0, r1, #31
 8006d08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d0c:	bf44      	itt	mi
 8006d0e:	0049      	lslmi	r1, r1, #1
 8006d10:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006d14:	2500      	movs	r5, #0
 8006d16:	1058      	asrs	r0, r3, #1
 8006d18:	0fcb      	lsrs	r3, r1, #31
 8006d1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006d1e:	0049      	lsls	r1, r1, #1
 8006d20:	2316      	movs	r3, #22
 8006d22:	462c      	mov	r4, r5
 8006d24:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006d28:	19a7      	adds	r7, r4, r6
 8006d2a:	4297      	cmp	r7, r2
 8006d2c:	bfde      	ittt	le
 8006d2e:	19bc      	addle	r4, r7, r6
 8006d30:	1bd2      	suble	r2, r2, r7
 8006d32:	19ad      	addle	r5, r5, r6
 8006d34:	0fcf      	lsrs	r7, r1, #31
 8006d36:	3b01      	subs	r3, #1
 8006d38:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006d3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d44:	d1f0      	bne.n	8006d28 <__ieee754_sqrt+0x94>
 8006d46:	f04f 0c20 	mov.w	ip, #32
 8006d4a:	469e      	mov	lr, r3
 8006d4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d50:	42a2      	cmp	r2, r4
 8006d52:	eb06 070e 	add.w	r7, r6, lr
 8006d56:	dc02      	bgt.n	8006d5e <__ieee754_sqrt+0xca>
 8006d58:	d112      	bne.n	8006d80 <__ieee754_sqrt+0xec>
 8006d5a:	428f      	cmp	r7, r1
 8006d5c:	d810      	bhi.n	8006d80 <__ieee754_sqrt+0xec>
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	eb07 0e06 	add.w	lr, r7, r6
 8006d64:	da42      	bge.n	8006dec <__ieee754_sqrt+0x158>
 8006d66:	f1be 0f00 	cmp.w	lr, #0
 8006d6a:	db3f      	blt.n	8006dec <__ieee754_sqrt+0x158>
 8006d6c:	f104 0801 	add.w	r8, r4, #1
 8006d70:	1b12      	subs	r2, r2, r4
 8006d72:	428f      	cmp	r7, r1
 8006d74:	bf88      	it	hi
 8006d76:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006d7a:	1bc9      	subs	r1, r1, r7
 8006d7c:	4433      	add	r3, r6
 8006d7e:	4644      	mov	r4, r8
 8006d80:	0052      	lsls	r2, r2, #1
 8006d82:	f1bc 0c01 	subs.w	ip, ip, #1
 8006d86:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006d8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d92:	d1dd      	bne.n	8006d50 <__ieee754_sqrt+0xbc>
 8006d94:	430a      	orrs	r2, r1
 8006d96:	d006      	beq.n	8006da6 <__ieee754_sqrt+0x112>
 8006d98:	1c5c      	adds	r4, r3, #1
 8006d9a:	bf13      	iteet	ne
 8006d9c:	3301      	addne	r3, #1
 8006d9e:	3501      	addeq	r5, #1
 8006da0:	4663      	moveq	r3, ip
 8006da2:	f023 0301 	bicne.w	r3, r3, #1
 8006da6:	106a      	asrs	r2, r5, #1
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	07e9      	lsls	r1, r5, #31
 8006dac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006db0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006db4:	bf48      	it	mi
 8006db6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006dbe:	461c      	mov	r4, r3
 8006dc0:	e780      	b.n	8006cc4 <__ieee754_sqrt+0x30>
 8006dc2:	0aca      	lsrs	r2, r1, #11
 8006dc4:	3815      	subs	r0, #21
 8006dc6:	0549      	lsls	r1, r1, #21
 8006dc8:	2a00      	cmp	r2, #0
 8006dca:	d0fa      	beq.n	8006dc2 <__ieee754_sqrt+0x12e>
 8006dcc:	02d6      	lsls	r6, r2, #11
 8006dce:	d50a      	bpl.n	8006de6 <__ieee754_sqrt+0x152>
 8006dd0:	f1c3 0420 	rsb	r4, r3, #32
 8006dd4:	fa21 f404 	lsr.w	r4, r1, r4
 8006dd8:	1e5d      	subs	r5, r3, #1
 8006dda:	4099      	lsls	r1, r3
 8006ddc:	4322      	orrs	r2, r4
 8006dde:	1b43      	subs	r3, r0, r5
 8006de0:	e78b      	b.n	8006cfa <__ieee754_sqrt+0x66>
 8006de2:	4618      	mov	r0, r3
 8006de4:	e7f0      	b.n	8006dc8 <__ieee754_sqrt+0x134>
 8006de6:	0052      	lsls	r2, r2, #1
 8006de8:	3301      	adds	r3, #1
 8006dea:	e7ef      	b.n	8006dcc <__ieee754_sqrt+0x138>
 8006dec:	46a0      	mov	r8, r4
 8006dee:	e7bf      	b.n	8006d70 <__ieee754_sqrt+0xdc>
 8006df0:	7ff00000 	.word	0x7ff00000
 8006df4:	00000000 	.word	0x00000000

08006df8 <atan>:
 8006df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ec55 4b10 	vmov	r4, r5, d0
 8006e00:	4bc3      	ldr	r3, [pc, #780]	; (8007110 <atan+0x318>)
 8006e02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e06:	429e      	cmp	r6, r3
 8006e08:	46ab      	mov	fp, r5
 8006e0a:	dd18      	ble.n	8006e3e <atan+0x46>
 8006e0c:	4bc1      	ldr	r3, [pc, #772]	; (8007114 <atan+0x31c>)
 8006e0e:	429e      	cmp	r6, r3
 8006e10:	dc01      	bgt.n	8006e16 <atan+0x1e>
 8006e12:	d109      	bne.n	8006e28 <atan+0x30>
 8006e14:	b144      	cbz	r4, 8006e28 <atan+0x30>
 8006e16:	4622      	mov	r2, r4
 8006e18:	462b      	mov	r3, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 fa4d 	bl	80002bc <__adddf3>
 8006e22:	4604      	mov	r4, r0
 8006e24:	460d      	mov	r5, r1
 8006e26:	e006      	b.n	8006e36 <atan+0x3e>
 8006e28:	f1bb 0f00 	cmp.w	fp, #0
 8006e2c:	f340 8131 	ble.w	8007092 <atan+0x29a>
 8006e30:	a59b      	add	r5, pc, #620	; (adr r5, 80070a0 <atan+0x2a8>)
 8006e32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e36:	ec45 4b10 	vmov	d0, r4, r5
 8006e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3e:	4bb6      	ldr	r3, [pc, #728]	; (8007118 <atan+0x320>)
 8006e40:	429e      	cmp	r6, r3
 8006e42:	dc14      	bgt.n	8006e6e <atan+0x76>
 8006e44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006e48:	429e      	cmp	r6, r3
 8006e4a:	dc0d      	bgt.n	8006e68 <atan+0x70>
 8006e4c:	a396      	add	r3, pc, #600	; (adr r3, 80070a8 <atan+0x2b0>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	ee10 0a10 	vmov	r0, s0
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fa30 	bl	80002bc <__adddf3>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4baf      	ldr	r3, [pc, #700]	; (800711c <atan+0x324>)
 8006e60:	f7f9 fe72 	bl	8000b48 <__aeabi_dcmpgt>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1e6      	bne.n	8006e36 <atan+0x3e>
 8006e68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006e6c:	e02b      	b.n	8006ec6 <atan+0xce>
 8006e6e:	f000 f963 	bl	8007138 <fabs>
 8006e72:	4bab      	ldr	r3, [pc, #684]	; (8007120 <atan+0x328>)
 8006e74:	429e      	cmp	r6, r3
 8006e76:	ec55 4b10 	vmov	r4, r5, d0
 8006e7a:	f300 80bf 	bgt.w	8006ffc <atan+0x204>
 8006e7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006e82:	429e      	cmp	r6, r3
 8006e84:	f300 80a0 	bgt.w	8006fc8 <atan+0x1d0>
 8006e88:	ee10 2a10 	vmov	r2, s0
 8006e8c:	ee10 0a10 	vmov	r0, s0
 8006e90:	462b      	mov	r3, r5
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7f9 fa12 	bl	80002bc <__adddf3>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4ba0      	ldr	r3, [pc, #640]	; (800711c <atan+0x324>)
 8006e9c:	f7f9 fa0c 	bl	80002b8 <__aeabi_dsub>
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460f      	mov	r7, r1
 8006ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 fa05 	bl	80002bc <__adddf3>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 fcdf 	bl	800087c <__aeabi_ddiv>
 8006ebe:	f04f 0a00 	mov.w	sl, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	462b      	mov	r3, r5
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 fbab 	bl	8000628 <__aeabi_dmul>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	4689      	mov	r9, r1
 8006eda:	f7f9 fba5 	bl	8000628 <__aeabi_dmul>
 8006ede:	a374      	add	r3, pc, #464	; (adr r3, 80070b0 <atan+0x2b8>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	f7f9 fb9e 	bl	8000628 <__aeabi_dmul>
 8006eec:	a372      	add	r3, pc, #456	; (adr r3, 80070b8 <atan+0x2c0>)
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 f9e3 	bl	80002bc <__adddf3>
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	463b      	mov	r3, r7
 8006efa:	f7f9 fb95 	bl	8000628 <__aeabi_dmul>
 8006efe:	a370      	add	r3, pc, #448	; (adr r3, 80070c0 <atan+0x2c8>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 f9da 	bl	80002bc <__adddf3>
 8006f08:	4632      	mov	r2, r6
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	f7f9 fb8c 	bl	8000628 <__aeabi_dmul>
 8006f10:	a36d      	add	r3, pc, #436	; (adr r3, 80070c8 <atan+0x2d0>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f9d1 	bl	80002bc <__adddf3>
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	f7f9 fb83 	bl	8000628 <__aeabi_dmul>
 8006f22:	a36b      	add	r3, pc, #428	; (adr r3, 80070d0 <atan+0x2d8>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f7f9 f9c8 	bl	80002bc <__adddf3>
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	f7f9 fb7a 	bl	8000628 <__aeabi_dmul>
 8006f34:	a368      	add	r3, pc, #416	; (adr r3, 80070d8 <atan+0x2e0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f9bf 	bl	80002bc <__adddf3>
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	f7f9 fb71 	bl	8000628 <__aeabi_dmul>
 8006f46:	a366      	add	r3, pc, #408	; (adr r3, 80070e0 <atan+0x2e8>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	4689      	mov	r9, r1
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 fb68 	bl	8000628 <__aeabi_dmul>
 8006f58:	a363      	add	r3, pc, #396	; (adr r3, 80070e8 <atan+0x2f0>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f9ab 	bl	80002b8 <__aeabi_dsub>
 8006f62:	4632      	mov	r2, r6
 8006f64:	463b      	mov	r3, r7
 8006f66:	f7f9 fb5f 	bl	8000628 <__aeabi_dmul>
 8006f6a:	a361      	add	r3, pc, #388	; (adr r3, 80070f0 <atan+0x2f8>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f9a2 	bl	80002b8 <__aeabi_dsub>
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	f7f9 fb56 	bl	8000628 <__aeabi_dmul>
 8006f7c:	a35e      	add	r3, pc, #376	; (adr r3, 80070f8 <atan+0x300>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f999 	bl	80002b8 <__aeabi_dsub>
 8006f86:	4632      	mov	r2, r6
 8006f88:	463b      	mov	r3, r7
 8006f8a:	f7f9 fb4d 	bl	8000628 <__aeabi_dmul>
 8006f8e:	a35c      	add	r3, pc, #368	; (adr r3, 8007100 <atan+0x308>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 f990 	bl	80002b8 <__aeabi_dsub>
 8006f98:	4632      	mov	r2, r6
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	f7f9 fb44 	bl	8000628 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 f988 	bl	80002bc <__adddf3>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 fb3a 	bl	8000628 <__aeabi_dmul>
 8006fb4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	d14b      	bne.n	8007056 <atan+0x25e>
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f979 	bl	80002b8 <__aeabi_dsub>
 8006fc6:	e72c      	b.n	8006e22 <atan+0x2a>
 8006fc8:	ee10 0a10 	vmov	r0, s0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4b53      	ldr	r3, [pc, #332]	; (800711c <atan+0x324>)
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7f9 f971 	bl	80002b8 <__aeabi_dsub>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	4b4f      	ldr	r3, [pc, #316]	; (800711c <atan+0x324>)
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f96b 	bl	80002bc <__adddf3>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7f9 fc45 	bl	800087c <__aeabi_ddiv>
 8006ff2:	f04f 0a01 	mov.w	sl, #1
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	e764      	b.n	8006ec6 <atan+0xce>
 8006ffc:	4b49      	ldr	r3, [pc, #292]	; (8007124 <atan+0x32c>)
 8006ffe:	429e      	cmp	r6, r3
 8007000:	dc1d      	bgt.n	800703e <atan+0x246>
 8007002:	ee10 0a10 	vmov	r0, s0
 8007006:	2200      	movs	r2, #0
 8007008:	4b47      	ldr	r3, [pc, #284]	; (8007128 <atan+0x330>)
 800700a:	4629      	mov	r1, r5
 800700c:	f7f9 f954 	bl	80002b8 <__aeabi_dsub>
 8007010:	2200      	movs	r2, #0
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <atan+0x330>)
 8007018:	4620      	mov	r0, r4
 800701a:	4629      	mov	r1, r5
 800701c:	f7f9 fb04 	bl	8000628 <__aeabi_dmul>
 8007020:	2200      	movs	r2, #0
 8007022:	4b3e      	ldr	r3, [pc, #248]	; (800711c <atan+0x324>)
 8007024:	f7f9 f94a 	bl	80002bc <__adddf3>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4630      	mov	r0, r6
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 fc24 	bl	800087c <__aeabi_ddiv>
 8007034:	f04f 0a02 	mov.w	sl, #2
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	e743      	b.n	8006ec6 <atan+0xce>
 800703e:	462b      	mov	r3, r5
 8007040:	ee10 2a10 	vmov	r2, s0
 8007044:	2000      	movs	r0, #0
 8007046:	4939      	ldr	r1, [pc, #228]	; (800712c <atan+0x334>)
 8007048:	f7f9 fc18 	bl	800087c <__aeabi_ddiv>
 800704c:	f04f 0a03 	mov.w	sl, #3
 8007050:	4604      	mov	r4, r0
 8007052:	460d      	mov	r5, r1
 8007054:	e737      	b.n	8006ec6 <atan+0xce>
 8007056:	4b36      	ldr	r3, [pc, #216]	; (8007130 <atan+0x338>)
 8007058:	4e36      	ldr	r6, [pc, #216]	; (8007134 <atan+0x33c>)
 800705a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800705e:	4456      	add	r6, sl
 8007060:	449a      	add	sl, r3
 8007062:	e9da 2300 	ldrd	r2, r3, [sl]
 8007066:	f7f9 f927 	bl	80002b8 <__aeabi_dsub>
 800706a:	4622      	mov	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	f7f9 f923 	bl	80002b8 <__aeabi_dsub>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	e9d6 0100 	ldrd	r0, r1, [r6]
 800707a:	f7f9 f91d 	bl	80002b8 <__aeabi_dsub>
 800707e:	f1bb 0f00 	cmp.w	fp, #0
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	f6bf aed6 	bge.w	8006e36 <atan+0x3e>
 800708a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800708e:	461d      	mov	r5, r3
 8007090:	e6d1      	b.n	8006e36 <atan+0x3e>
 8007092:	a51d      	add	r5, pc, #116	; (adr r5, 8007108 <atan+0x310>)
 8007094:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007098:	e6cd      	b.n	8006e36 <atan+0x3e>
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w
 80070a0:	54442d18 	.word	0x54442d18
 80070a4:	3ff921fb 	.word	0x3ff921fb
 80070a8:	8800759c 	.word	0x8800759c
 80070ac:	7e37e43c 	.word	0x7e37e43c
 80070b0:	e322da11 	.word	0xe322da11
 80070b4:	3f90ad3a 	.word	0x3f90ad3a
 80070b8:	24760deb 	.word	0x24760deb
 80070bc:	3fa97b4b 	.word	0x3fa97b4b
 80070c0:	a0d03d51 	.word	0xa0d03d51
 80070c4:	3fb10d66 	.word	0x3fb10d66
 80070c8:	c54c206e 	.word	0xc54c206e
 80070cc:	3fb745cd 	.word	0x3fb745cd
 80070d0:	920083ff 	.word	0x920083ff
 80070d4:	3fc24924 	.word	0x3fc24924
 80070d8:	5555550d 	.word	0x5555550d
 80070dc:	3fd55555 	.word	0x3fd55555
 80070e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80070e4:	bfa2b444 	.word	0xbfa2b444
 80070e8:	52defd9a 	.word	0x52defd9a
 80070ec:	3fadde2d 	.word	0x3fadde2d
 80070f0:	af749a6d 	.word	0xaf749a6d
 80070f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80070f8:	fe231671 	.word	0xfe231671
 80070fc:	3fbc71c6 	.word	0x3fbc71c6
 8007100:	9998ebc4 	.word	0x9998ebc4
 8007104:	3fc99999 	.word	0x3fc99999
 8007108:	54442d18 	.word	0x54442d18
 800710c:	bff921fb 	.word	0xbff921fb
 8007110:	440fffff 	.word	0x440fffff
 8007114:	7ff00000 	.word	0x7ff00000
 8007118:	3fdbffff 	.word	0x3fdbffff
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	3ff2ffff 	.word	0x3ff2ffff
 8007124:	40037fff 	.word	0x40037fff
 8007128:	3ff80000 	.word	0x3ff80000
 800712c:	bff00000 	.word	0xbff00000
 8007130:	08007258 	.word	0x08007258
 8007134:	08007238 	.word	0x08007238

08007138 <fabs>:
 8007138:	ec51 0b10 	vmov	r0, r1, d0
 800713c:	ee10 2a10 	vmov	r2, s0
 8007140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007144:	ec43 2b10 	vmov	d0, r2, r3
 8007148:	4770      	bx	lr

0800714a <matherr>:
 800714a:	2000      	movs	r0, #0
 800714c:	4770      	bx	lr
	...

08007150 <nan>:
 8007150:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007158 <nan+0x8>
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	00000000 	.word	0x00000000
 800715c:	7ff80000 	.word	0x7ff80000

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
