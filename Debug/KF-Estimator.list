
KF-Estimator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009258  08009258  00019258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000078  080093ec  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080093ec  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001270c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a49  00000000  00000000  000327b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  000361a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002404d  00000000  00000000  00036fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc8b  00000000  00000000  0005b015  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d49a6  00000000  00000000  00067ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0013c646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  0013c734  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00001160  00000000  00000000  0014136c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009240 	.word	0x08009240

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009240 	.word	0x08009240

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MPU9250_Initialize>:
#include <MPU9250.h>

MPU9250_Result_t MPU9250_Initialize(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[8] = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef res;

    /* MPU9250_WHO_AM_I ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_WHO_AM_I|0x80;
 8000f3a:	23f5      	movs	r3, #245	; 0xf5
 8000f3c:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	891b      	ldrh	r3, [r3, #8]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f003 fa57 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	f107 010c 	add.w	r1, r7, #12
 8000f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2302      	movs	r3, #2
 8000f62:	f003 ffdd 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8000f66:	4603      	mov	r3, r0
 8000f68:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6858      	ldr	r0, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	891b      	ldrh	r3, [r3, #8]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f003 fa41 	bl	80043fc <HAL_GPIO_WritePin>

    //WHO_AM_I Check
    if (cmdbuf[1] != 0x71) {
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	2b71      	cmp	r3, #113	; 0x71
 8000f7e:	d001      	beq.n	8000f84 <MPU9250_Initialize+0x5c>
        return MPU9250_RESULT_FAIL;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e2a7      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }
    //Ex
    if (res != HAL_OK) {
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MPU9250_Initialize+0x66>
        return MPU9250_RESULT_FAIL;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e2a2      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    /* MPU9250_Reset ----------------------------------------------------------*/

    cmdbuf[0] = MPU9250_PWR_MGMT_1;
 8000f8e:	236b      	movs	r3, #107	; 0x6b
 8000f90:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6858      	ldr	r0, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	891b      	ldrh	r3, [r3, #8]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f003 fa2b 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f003 ffb1 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6858      	ldr	r0, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f003 fa15 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MPU9250_Initialize+0xb4>
        return MPU9250_RESULT_FAIL;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e27b      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f002 ff47 	bl	8003e70 <HAL_Delay>

    /* MPU9250_I2C_Bypass_mode_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_INT_PIN_CFG;
 8000fe2:	2337      	movs	r3, #55	; 0x37
 8000fe4:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x12;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6858      	ldr	r0, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	891b      	ldrh	r3, [r3, #8]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f003 fa01 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f107 010c 	add.w	r1, r7, #12
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	f003 ff87 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6858      	ldr	r0, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	891b      	ldrh	r3, [r3, #8]
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	f003 f9eb 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MPU9250_Initialize+0x108>
        return MPU9250_RESULT_FAIL;
 800102c:	2301      	movs	r3, #1
 800102e:	e251      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    /* MPU9250_I2C_Master_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_USER_CTRL;
 8001030:	236a      	movs	r3, #106	; 0x6a
 8001032:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x30;
 8001034:	2330      	movs	r3, #48	; 0x30
 8001036:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6858      	ldr	r0, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	891b      	ldrh	r3, [r3, #8]
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	f003 f9da 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 010c 	add.w	r1, r7, #12
 8001054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	f003 ff60 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6858      	ldr	r0, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	891b      	ldrh	r3, [r3, #8]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	f003 f9c4 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MPU9250_Initialize+0x156>
        return MPU9250_RESULT_FAIL;
 800107a:	2301      	movs	r3, #1
 800107c:	e22a      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    /* MPU9250_Set_I2C_clock_400kbps ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_MST_CTRL;
 800107e:	2324      	movs	r3, #36	; 0x24
 8001080:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0D;
 8001082:	230d      	movs	r3, #13
 8001084:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	891b      	ldrh	r3, [r3, #8]
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f003 f9b3 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	f003 ff39 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80010ae:	4603      	mov	r3, r0
 80010b0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6858      	ldr	r0, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	891b      	ldrh	r3, [r3, #8]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	f003 f99d 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MPU9250_Initialize+0x1a4>
        return MPU9250_RESULT_FAIL;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e203      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    /* AK8963_Reset ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 80010cc:	2325      	movs	r3, #37	; 0x25
 80010ce:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 80010d0:	230c      	movs	r3, #12
 80010d2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6858      	ldr	r0, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	891b      	ldrh	r3, [r3, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	f003 f98c 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	f107 010c 	add.w	r1, r7, #12
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	f003 ff12 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6858      	ldr	r0, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f003 f976 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MPU9250_Initialize+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001116:	2301      	movs	r3, #1
 8001118:	e1dc      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800111a:	2326      	movs	r3, #38	; 0x26
 800111c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL2;
 800111e:	230b      	movs	r3, #11
 8001120:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	f003 f965 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	f107 010c 	add.w	r1, r7, #12
 800113e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2302      	movs	r3, #2
 8001146:	f003 feeb 	bl	8004f20 <HAL_SPI_TransmitReceive>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6858      	ldr	r0, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	891b      	ldrh	r3, [r3, #8]
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	f003 f94f 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MPU9250_Initialize+0x240>
        return MPU9250_RESULT_FAIL;
 8001164:	2301      	movs	r3, #1
 8001166:	e1b5      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 8001168:	2363      	movs	r3, #99	; 0x63
 800116a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 800116c:	2301      	movs	r3, #1
 800116e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6858      	ldr	r0, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	891b      	ldrh	r3, [r3, #8]
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	f003 f93e 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f107 020c 	add.w	r2, r7, #12
 8001188:	f107 010c 	add.w	r1, r7, #12
 800118c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	f003 fec4 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6858      	ldr	r0, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	891b      	ldrh	r3, [r3, #8]
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	f003 f928 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MPU9250_Initialize+0x28e>
        return MPU9250_RESULT_FAIL;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e18e      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80011b6:	2327      	movs	r3, #39	; 0x27
 80011b8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80011ba:	2381      	movs	r3, #129	; 0x81
 80011bc:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	891b      	ldrh	r3, [r3, #8]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f003 f917 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,8,0xFFFF);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2308      	movs	r3, #8
 80011e2:	f003 fe9d 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6858      	ldr	r0, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	891b      	ldrh	r3, [r3, #8]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	f003 f901 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MPU9250_Initialize+0x2dc>
        return MPU9250_RESULT_FAIL;
 8001200:	2301      	movs	r3, #1
 8001202:	e167      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }
    HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f002 fe33 	bl	8003e70 <HAL_Delay>

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800120a:	2325      	movs	r3, #37	; 0x25
 800120c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 800120e:	230c      	movs	r3, #12
 8001210:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6858      	ldr	r0, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	f003 f8ed 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f107 020c 	add.w	r2, r7, #12
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	f003 fe73 	bl	8004f20 <HAL_SPI_TransmitReceive>
 800123a:	4603      	mov	r3, r0
 800123c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6858      	ldr	r0, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	891b      	ldrh	r3, [r3, #8]
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	f003 f8d7 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MPU9250_Initialize+0x330>
        return MPU9250_RESULT_FAIL;
 8001254:	2301      	movs	r3, #1
 8001256:	e13d      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001258:	2326      	movs	r3, #38	; 0x26
 800125a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 800125c:	230a      	movs	r3, #10
 800125e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6858      	ldr	r0, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	891b      	ldrh	r3, [r3, #8]
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	f003 f8c6 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	f107 010c 	add.w	r1, r7, #12
 800127c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2302      	movs	r3, #2
 8001284:	f003 fe4c 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6858      	ldr	r0, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	891b      	ldrh	r3, [r3, #8]
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	f003 f8b0 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MPU9250_Initialize+0x37e>
        return MPU9250_RESULT_FAIL;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e116      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80012a6:	2363      	movs	r3, #99	; 0x63
 80012a8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 80012aa:	2316      	movs	r3, #22
 80012ac:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6858      	ldr	r0, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	891b      	ldrh	r3, [r3, #8]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f003 f89f 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	f107 010c 	add.w	r1, r7, #12
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2302      	movs	r3, #2
 80012d2:	f003 fe25 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6858      	ldr	r0, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	891b      	ldrh	r3, [r3, #8]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f003 f889 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MPU9250_Initialize+0x3cc>
        return MPU9250_RESULT_FAIL;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0ef      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80012f4:	2327      	movs	r3, #39	; 0x27
 80012f6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80012f8:	2381      	movs	r3, #129	; 0x81
 80012fa:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	891b      	ldrh	r3, [r3, #8]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f003 f878 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	f003 fdfe 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001324:	4603      	mov	r3, r0
 8001326:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6858      	ldr	r0, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	891b      	ldrh	r3, [r3, #8]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f003 f862 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MPU9250_Initialize+0x41a>
        return MPU9250_RESULT_FAIL;
 800133e:	2301      	movs	r3, #1
 8001340:	e0c8      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f002 fd94 	bl	8003e70 <HAL_Delay>

    /* AK8963_WHO_AM_I ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001348:	2325      	movs	r3, #37	; 0x25
 800134a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 800134c:	238c      	movs	r3, #140	; 0x8c
 800134e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6858      	ldr	r0, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	891b      	ldrh	r3, [r3, #8]
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	f003 f84e 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2302      	movs	r3, #2
 8001374:	f003 fdd4 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001378:	4603      	mov	r3, r0
 800137a:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6858      	ldr	r0, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	891b      	ldrh	r3, [r3, #8]
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	f003 f838 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MPU9250_Initialize+0x46e>
        return MPU9250_RESULT_FAIL;
 8001392:	2301      	movs	r3, #1
 8001394:	e09e      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001396:	2326      	movs	r3, #38	; 0x26
 8001398:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_WIA;
 800139a:	2300      	movs	r3, #0
 800139c:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	f003 f827 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	f107 010c 	add.w	r1, r7, #12
 80013ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2302      	movs	r3, #2
 80013c2:	f003 fdad 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80013c6:	4603      	mov	r3, r0
 80013c8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6858      	ldr	r0, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	891b      	ldrh	r3, [r3, #8]
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	f003 f811 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MPU9250_Initialize+0x4bc>
        return MPU9250_RESULT_FAIL;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e077      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80013e4:	2327      	movs	r3, #39	; 0x27
 80013e6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80013e8:	2381      	movs	r3, #129	; 0x81
 80013ea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6858      	ldr	r0, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	891b      	ldrh	r3, [r3, #8]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f003 f800 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	f107 010c 	add.w	r1, r7, #12
 8001408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2302      	movs	r3, #2
 8001410:	f003 fd86 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6858      	ldr	r0, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	891b      	ldrh	r3, [r3, #8]
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	f002 ffea 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MPU9250_Initialize+0x50a>
        return MPU9250_RESULT_FAIL;
 800142e:	2301      	movs	r3, #1
 8001430:	e050      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f002 fd1c 	bl	8003e70 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 8001438:	23c9      	movs	r3, #201	; 0xc9
 800143a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6858      	ldr	r0, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	f002 ffd8 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	f107 010c 	add.w	r1, r7, #12
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2302      	movs	r3, #2
 8001460:	f003 fd5e 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6858      	ldr	r0, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	891b      	ldrh	r3, [r3, #8]
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	f002 ffc2 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MPU9250_Initialize+0x55a>
        return MPU9250_RESULT_FAIL;
 800147e:	2301      	movs	r3, #1
 8001480:	e028      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }
    //WHO_AM_I Check
    if (cmdbuf[1] != 0x48) {
 8001482:	7b7b      	ldrb	r3, [r7, #13]
 8001484:	2b48      	cmp	r3, #72	; 0x48
 8001486:	d001      	beq.n	800148c <MPU9250_Initialize+0x564>
        return MPU9250_RESULT_FAIL;
 8001488:	2301      	movs	r3, #1
 800148a:	e023      	b.n	80014d4 <MPU9250_Initialize+0x5ac>
    }

    /* MPU9250 Turn on Gyroscope DLPF */
    cmdbuf[0] = MPU9250_CONFIG;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 8001492:	2301      	movs	r3, #1
 8001494:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6858      	ldr	r0, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	891b      	ldrh	r3, [r3, #8]
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	f002 ffab 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	f107 010c 	add.w	r1, r7, #12
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2302      	movs	r3, #2
 80014ba:	f003 fd31 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6858      	ldr	r0, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	891b      	ldrh	r3, [r3, #8]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4619      	mov	r1, r3
 80014ce:	f002 ff95 	bl	80043fc <HAL_GPIO_WritePin>

    return MPU9250_RESULT_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <MPU9250_Config>:

MPU9250_Result_t MPU9250_Config(MPU9250_CONFIG_t *MPU9250_CONFIG){
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[4] = {0};
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef res;

    /* MPU9250_Set_Accel_Scale ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_CONFIG->ACCEL_SCALE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7a9b      	ldrb	r3, [r3, #10]
 80014ec:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == ACCEL_SCALE_2G){//2G
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d104      	bne.n	80014fe <MPU9250_Config+0x22>
        MPU9250_CONFIG->ARES = 2.0/MPU9250_ACC_SENS_FACTOR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	e016      	b.n	800152c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_4G){//4G
 80014fe:	7b3b      	ldrb	r3, [r7, #12]
 8001500:	2b08      	cmp	r3, #8
 8001502:	d104      	bne.n	800150e <MPU9250_Config+0x32>
        MPU9250_CONFIG->ARES = 4.0/MPU9250_ACC_SENS_FACTOR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	e00e      	b.n	800152c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_8G){//8G
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d104      	bne.n	800151e <MPU9250_Config+0x42>
        MPU9250_CONFIG->ARES = 8.0/MPU9250_ACC_SENS_FACTOR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	e006      	b.n	800152c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_16G){//16G
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	2b18      	cmp	r3, #24
 8001522:	d103      	bne.n	800152c <MPU9250_Config+0x50>
        MPU9250_CONFIG->ARES = 16.0/MPU9250_ACC_SENS_FACTOR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800152a:	60da      	str	r2, [r3, #12]
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG|0x80;
 800152c:	239c      	movs	r3, #156	; 0x9c
 800152e:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6858      	ldr	r0, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	891b      	ldrh	r3, [r3, #8]
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	f002 ff5e 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2302      	movs	r3, #2
 8001554:	f003 fce4 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6858      	ldr	r0, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	891b      	ldrh	r3, [r3, #8]
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	f002 ff48 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800156c:	7cfb      	ldrb	r3, [r7, #19]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MPU9250_Config+0x9a>
        return MPU9250_RESULT_FAIL;
 8001572:	2301      	movs	r3, #1
 8001574:	e2fe      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG;
 8001576:	231c      	movs	r3, #28
 8001578:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 800157a:	7b7a      	ldrb	r2, [r7, #13]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7a9b      	ldrb	r3, [r3, #10]
 8001580:	4313      	orrs	r3, r2
 8001582:	b2db      	uxtb	r3, r3
 8001584:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6858      	ldr	r0, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	891b      	ldrh	r3, [r3, #8]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f002 ff33 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	f107 010c 	add.w	r1, r7, #12
 80015a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	f003 fcb9 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80015ae:	4603      	mov	r3, r0
 80015b0:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6858      	ldr	r0, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	891b      	ldrh	r3, [r3, #8]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4619      	mov	r1, r3
 80015be:	f002 ff1d 	bl	80043fc <HAL_GPIO_WritePin>

    cmdbuf[0] = MPU9250_ACCEL_CONFIG_2;
 80015c2:	231d      	movs	r3, #29
 80015c4:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01; // CHANGED: BW 184Hz
 80015c6:	2301      	movs	r3, #1
 80015c8:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6858      	ldr	r0, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	891b      	ldrh	r3, [r3, #8]
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	f002 ff11 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	f107 010c 	add.w	r1, r7, #12
 80015e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2302      	movs	r3, #2
 80015ee:	f003 fc97 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80015f2:	4603      	mov	r3, r0
 80015f4:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6858      	ldr	r0, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	891b      	ldrh	r3, [r3, #8]
 80015fe:	2201      	movs	r2, #1
 8001600:	4619      	mov	r1, r3
 8001602:	f002 fefb 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001606:	7cfb      	ldrb	r3, [r7, #19]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MPU9250_Config+0x134>
        return MPU9250_RESULT_FAIL;
 800160c:	2301      	movs	r3, #1
 800160e:	e2b1      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    /* MPU9250_GYRO_CONFIG ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_CONFIG->GYRO_SCALE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7adb      	ldrb	r3, [r3, #11]
 8001614:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == GYRO_SCALE_250dps){//250dps
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <MPU9250_Config+0x148>
        MPU9250_CONFIG->GRES = 2.0/MPU9250_GYRO_SENS_FACTOR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4aa9      	ldr	r2, [pc, #676]	; (80018c4 <MPU9250_Config+0x3e8>)
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	e013      	b.n	800164c <MPU9250_Config+0x170>
    }
    else if(cmdbuf[0] == GYRO_SCALE_500dps){//500dps
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	2b08      	cmp	r3, #8
 8001628:	d103      	bne.n	8001632 <MPU9250_Config+0x156>
        MPU9250_CONFIG->GRES = 4.0/MPU9250_GYRO_SENS_FACTOR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4aa6      	ldr	r2, [pc, #664]	; (80018c8 <MPU9250_Config+0x3ec>)
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	e00c      	b.n	800164c <MPU9250_Config+0x170>
    }
    else if(cmdbuf[0] == GYRO_SCALE_1000dps){//1000dps
 8001632:	7b3b      	ldrb	r3, [r7, #12]
 8001634:	2b10      	cmp	r3, #16
 8001636:	d103      	bne.n	8001640 <MPU9250_Config+0x164>
        MPU9250_CONFIG->GRES = 8.0/MPU9250_GYRO_SENS_FACTOR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4aa4      	ldr	r2, [pc, #656]	; (80018cc <MPU9250_Config+0x3f0>)
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	e005      	b.n	800164c <MPU9250_Config+0x170>
    }
    else if(cmdbuf[0] == GYRO_SCALE_2000dps){//2000dps
 8001640:	7b3b      	ldrb	r3, [r7, #12]
 8001642:	2b18      	cmp	r3, #24
 8001644:	d102      	bne.n	800164c <MPU9250_Config+0x170>
        MPU9250_CONFIG->GRES = 16.0/MPU9250_GYRO_SENS_FACTOR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4aa1      	ldr	r2, [pc, #644]	; (80018d0 <MPU9250_Config+0x3f4>)
 800164a:	611a      	str	r2, [r3, #16]
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG|0x80;
 800164c:	239b      	movs	r3, #155	; 0x9b
 800164e:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6858      	ldr	r0, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	891b      	ldrh	r3, [r3, #8]
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	f002 fece 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f107 020c 	add.w	r2, r7, #12
 8001668:	f107 010c 	add.w	r1, r7, #12
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2302      	movs	r3, #2
 8001674:	f003 fc54 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001678:	4603      	mov	r3, r0
 800167a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6858      	ldr	r0, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	891b      	ldrh	r3, [r3, #8]
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	f002 feb8 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MPU9250_Config+0x1ba>
        return MPU9250_RESULT_FAIL;
 8001692:	2301      	movs	r3, #1
 8001694:	e26e      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG;
 8001696:	231b      	movs	r3, #27
 8001698:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE & ~0b11; // CHANGED: bypasses dlpf
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	b25a      	sxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7a9b      	ldrb	r3, [r3, #10]
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6858      	ldr	r0, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	891b      	ldrh	r3, [r3, #8]
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	f002 fe9d 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f107 020c 	add.w	r2, r7, #12
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2302      	movs	r3, #2
 80016d6:	f003 fc23 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80016da:	4603      	mov	r3, r0
 80016dc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6858      	ldr	r0, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	891b      	ldrh	r3, [r3, #8]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	f002 fe87 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80016ee:	7cfb      	ldrb	r3, [r7, #19]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MPU9250_Config+0x21c>
        return MPU9250_RESULT_FAIL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e23d      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    // CHANGED: Sets DLPF config value for gyro
    cmdbuf[0] = MPU9250_CONFIG;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 80016fe:	2301      	movs	r3, #1
 8001700:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6858      	ldr	r0, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	891b      	ldrh	r3, [r3, #8]
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	f002 fe75 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	f107 020c 	add.w	r2, r7, #12
 800171a:	f107 010c 	add.w	r1, r7, #12
 800171e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	f003 fbfb 	bl	8004f20 <HAL_SPI_TransmitReceive>
 800172a:	4603      	mov	r3, r0
 800172c:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6858      	ldr	r0, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	891b      	ldrh	r3, [r3, #8]
 8001736:	2201      	movs	r2, #1
 8001738:	4619      	mov	r1, r3
 800173a:	f002 fe5f 	bl	80043fc <HAL_GPIO_WritePin>

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/
    /* AK8963_Set_Fuse_access_mode ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800173e:	2325      	movs	r3, #37	; 0x25
 8001740:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001742:	230c      	movs	r3, #12
 8001744:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6858      	ldr	r0, [r3, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	891b      	ldrh	r3, [r3, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	f002 fe53 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	f107 020c 	add.w	r2, r7, #12
 800175e:	f107 010c 	add.w	r1, r7, #12
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2302      	movs	r3, #2
 800176a:	f003 fbd9 	bl	8004f20 <HAL_SPI_TransmitReceive>
 800176e:	4603      	mov	r3, r0
 8001770:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6858      	ldr	r0, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	891b      	ldrh	r3, [r3, #8]
 800177a:	2201      	movs	r2, #1
 800177c:	4619      	mov	r1, r3
 800177e:	f002 fe3d 	bl	80043fc <HAL_GPIO_WritePin>
    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001782:	2326      	movs	r3, #38	; 0x26
 8001784:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8001786:	230a      	movs	r3, #10
 8001788:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6858      	ldr	r0, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	891b      	ldrh	r3, [r3, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	f002 fe31 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 020c 	add.w	r2, r7, #12
 80017a2:	f107 010c 	add.w	r1, r7, #12
 80017a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2302      	movs	r3, #2
 80017ae:	f003 fbb7 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6858      	ldr	r0, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	891b      	ldrh	r3, [r3, #8]
 80017be:	2201      	movs	r2, #1
 80017c0:	4619      	mov	r1, r3
 80017c2:	f002 fe1b 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80017c6:	7cfb      	ldrb	r3, [r7, #19]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MPU9250_Config+0x2f4>
        return MPU9250_RESULT_FAIL;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e1d1      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80017d0:	2363      	movs	r3, #99	; 0x63
 80017d2:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0F;
 80017d4:	230f      	movs	r3, #15
 80017d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6858      	ldr	r0, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	891b      	ldrh	r3, [r3, #8]
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f002 fe0a 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f107 020c 	add.w	r2, r7, #12
 80017f0:	f107 010c 	add.w	r1, r7, #12
 80017f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2302      	movs	r3, #2
 80017fc:	f003 fb90 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001800:	4603      	mov	r3, r0
 8001802:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6858      	ldr	r0, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	891b      	ldrh	r3, [r3, #8]
 800180c:	2201      	movs	r2, #1
 800180e:	4619      	mov	r1, r3
 8001810:	f002 fdf4 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MPU9250_Config+0x342>
        return MPU9250_RESULT_FAIL;
 800181a:	2301      	movs	r3, #1
 800181c:	e1aa      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 800181e:	2327      	movs	r3, #39	; 0x27
 8001820:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 8001822:	2381      	movs	r3, #129	; 0x81
 8001824:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6858      	ldr	r0, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	891b      	ldrh	r3, [r3, #8]
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	f002 fde3 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f107 020c 	add.w	r2, r7, #12
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2302      	movs	r3, #2
 800184a:	f003 fb69 	bl	8004f20 <HAL_SPI_TransmitReceive>
 800184e:	4603      	mov	r3, r0
 8001850:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6858      	ldr	r0, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	891b      	ldrh	r3, [r3, #8]
 800185a:	2201      	movs	r2, #1
 800185c:	4619      	mov	r1, r3
 800185e:	f002 fdcd 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001862:	7cfb      	ldrb	r3, [r7, #19]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MPU9250_Config+0x390>
        return MPU9250_RESULT_FAIL;
 8001868:	2301      	movs	r3, #1
 800186a:	e183      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    HAL_Delay(500);
 800186c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001870:	f002 fafe 	bl	8003e70 <HAL_Delay>

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001874:	2325      	movs	r3, #37	; 0x25
 8001876:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 8001878:	238c      	movs	r3, #140	; 0x8c
 800187a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f002 fdb8 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	f107 020c 	add.w	r2, r7, #12
 8001894:	f107 010c 	add.w	r1, r7, #12
 8001898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2302      	movs	r3, #2
 80018a0:	f003 fb3e 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80018a4:	4603      	mov	r3, r0
 80018a6:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6858      	ldr	r0, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	891b      	ldrh	r3, [r3, #8]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	f002 fda2 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <MPU9250_Config+0x3f8>
        return MPU9250_RESULT_FAIL;
 80018be:	2301      	movs	r3, #1
 80018c0:	e158      	b.n	8001b74 <MPU9250_Config+0x698>
 80018c2:	bf00      	nop
 80018c4:	3bfa232d 	.word	0x3bfa232d
 80018c8:	3c7a232d 	.word	0x3c7a232d
 80018cc:	3cfa232d 	.word	0x3cfa232d
 80018d0:	3d7a232d 	.word	0x3d7a232d
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 80018d4:	2326      	movs	r3, #38	; 0x26
 80018d6:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ASAX;
 80018d8:	2310      	movs	r3, #16
 80018da:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6858      	ldr	r0, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	891b      	ldrh	r3, [r3, #8]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f002 fd88 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	f107 010c 	add.w	r1, r7, #12
 80018f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2302      	movs	r3, #2
 8001900:	f003 fb0e 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001904:	4603      	mov	r3, r0
 8001906:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6858      	ldr	r0, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	891b      	ldrh	r3, [r3, #8]
 8001910:	2201      	movs	r2, #1
 8001912:	4619      	mov	r1, r3
 8001914:	f002 fd72 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001918:	7cfb      	ldrb	r3, [r7, #19]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MPU9250_Config+0x446>
        return MPU9250_RESULT_FAIL;
 800191e:	2301      	movs	r3, #1
 8001920:	e128      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001922:	2327      	movs	r3, #39	; 0x27
 8001924:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x83;
 8001926:	2383      	movs	r3, #131	; 0x83
 8001928:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6858      	ldr	r0, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	891b      	ldrh	r3, [r3, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	4619      	mov	r1, r3
 8001936:	f002 fd61 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	f107 010c 	add.w	r1, r7, #12
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2302      	movs	r3, #2
 800194e:	f003 fae7 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001952:	4603      	mov	r3, r0
 8001954:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6858      	ldr	r0, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	891b      	ldrh	r3, [r3, #8]
 800195e:	2201      	movs	r2, #1
 8001960:	4619      	mov	r1, r3
 8001962:	f002 fd4b 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MPU9250_Config+0x494>
        return MPU9250_RESULT_FAIL;
 800196c:	2301      	movs	r3, #1
 800196e:	e101      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    HAL_Delay(500);
 8001970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001974:	f002 fa7c 	bl	8003e70 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 8001978:	23c9      	movs	r3, #201	; 0xc9
 800197a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6858      	ldr	r0, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	891b      	ldrh	r3, [r3, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	f002 fd38 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,4,0xFFFF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f107 020c 	add.w	r2, r7, #12
 8001994:	f107 010c 	add.w	r1, r7, #12
 8001998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2304      	movs	r3, #4
 80019a0:	f003 fabe 	bl	8004f20 <HAL_SPI_TransmitReceive>
 80019a4:	4603      	mov	r3, r0
 80019a6:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6858      	ldr	r0, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	891b      	ldrh	r3, [r3, #8]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	f002 fd22 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MPU9250_Config+0x4e6>
        return MPU9250_RESULT_FAIL;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0d8      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    for(int i=0;i<3;i++){
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e032      	b.n	8001a2e <MPU9250_Config+0x552>
        MPU9250_CONFIG->MAG_SENSITIVITY[i] = (((cmdbuf[i+1] -128)*0.5)/128)+1;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	f107 0218 	add.w	r2, r7, #24
 80019d0:	4413      	add	r3, r2
 80019d2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80019d6:	3b80      	subs	r3, #128	; 0x80
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fdbb 	bl	8000554 <__aeabi_i2d>
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <MPU9250_Config+0x6a0>)
 80019e4:	f7fe fe20 	bl	8000628 <__aeabi_dmul>
 80019e8:	4603      	mov	r3, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	4618      	mov	r0, r3
 80019ee:	4621      	mov	r1, r4
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <MPU9250_Config+0x6a4>)
 80019f6:	f7fe ff41 	bl	800087c <__aeabi_ddiv>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <MPU9250_Config+0x6a8>)
 8001a08:	f7fe fc58 	bl	80002bc <__adddf3>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	f7ff f8b8 	bl	8000b88 <__aeabi_d2f>
 8001a18:	4601      	mov	r1, r0
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	6019      	str	r1, [r3, #0]
    for(int i=0;i<3;i++){
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	ddc9      	ble.n	80019c8 <MPU9250_Config+0x4ec>
    }

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001a34:	2325      	movs	r3, #37	; 0x25
 8001a36:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6858      	ldr	r0, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	891b      	ldrh	r3, [r3, #8]
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	f002 fcd8 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	f107 010c 	add.w	r1, r7, #12
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f003 fa5e 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001a64:	4603      	mov	r3, r0
 8001a66:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6858      	ldr	r0, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	891b      	ldrh	r3, [r3, #8]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	f002 fcc2 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MPU9250_Config+0x5a6>
        return MPU9250_RESULT_FAIL;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e078      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001a82:	2326      	movs	r3, #38	; 0x26
 8001a84:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8001a86:	230a      	movs	r3, #10
 8001a88:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	f002 fcb1 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f107 020c 	add.w	r2, r7, #12
 8001aa2:	f107 010c 	add.w	r1, r7, #12
 8001aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2302      	movs	r3, #2
 8001aae:	f003 fa37 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6858      	ldr	r0, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	891b      	ldrh	r3, [r3, #8]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f002 fc9b 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MPU9250_Config+0x5f4>
        return MPU9250_RESULT_FAIL;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e051      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 8001ad0:	2363      	movs	r3, #99	; 0x63
 8001ad2:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 8001ad4:	2316      	movs	r3, #22
 8001ad6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6858      	ldr	r0, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	891b      	ldrh	r3, [r3, #8]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f002 fc8a 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f107 020c 	add.w	r2, r7, #12
 8001af0:	f107 010c 	add.w	r1, r7, #12
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	f003 fa10 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001b00:	4603      	mov	r3, r0
 8001b02:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6858      	ldr	r0, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	891b      	ldrh	r3, [r3, #8]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f002 fc74 	bl	80043fc <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MPU9250_Config+0x642>
        return MPU9250_RESULT_FAIL;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e02a      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001b1e:	2327      	movs	r3, #39	; 0x27
 8001b20:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 8001b22:	2381      	movs	r3, #129	; 0x81
 8001b24:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6858      	ldr	r0, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	891b      	ldrh	r3, [r3, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	f002 fc63 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f107 020c 	add.w	r2, r7, #12
 8001b3e:	f107 010c 	add.w	r1, r7, #12
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f003 f9e9 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6858      	ldr	r0, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	891b      	ldrh	r3, [r3, #8]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f002 fc4d 	bl	80043fc <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f002 f984 	bl	8003e70 <HAL_Delay>

    //Ex
    if (res != HAL_OK) {
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MPU9250_Config+0x696>
        return MPU9250_RESULT_FAIL;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <MPU9250_Config+0x698>
    }

    return MPU9250_RESULT_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	3fe00000 	.word	0x3fe00000
 8001b80:	40600000 	.word	0x40600000
 8001b84:	3ff00000 	.word	0x3ff00000

08001b88 <MPU9250_Update6DOF>:

MPU9250_Result_t MPU9250_Update6DOF(MPU9250_CONFIG_t *MPU9250_CONFIG,MPU9250_DATA_t *MPU9250_DATA){
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b08d      	sub	sp, #52	; 0x34
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    uint8_t cmdbuf[15] = {0};
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	f8c3 200b 	str.w	r2, [r3, #11]
    HAL_StatusTypeDef res;

    /* MPU9250_Get_Accel_Gyro_and_Temp ---------------------------------------------------------*/

    uint8_t cmd_base = MPU9250_ACCEL_XOUT_H|0x80;
 8001ba2:	23bb      	movs	r3, #187	; 0xbb
 8001ba4:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < 15; ++i) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bac:	e010      	b.n	8001bd0 <MPU9250_Update6DOF+0x48>
        cmdbuf[i] = cmd_base + i;
 8001bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb2:	7ff9      	ldrb	r1, [r7, #31]
 8001bb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001bb8:	440a      	add	r2, r1
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 15; ++i) {
 8001bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2b0e      	cmp	r3, #14
 8001bd6:	d9ea      	bls.n	8001bae <MPU9250_Update6DOF+0x26>
    }

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6858      	ldr	r0, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	891b      	ldrh	r3, [r3, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	f002 fc0a 	bl	80043fc <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,15,0xFFFF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	f107 010c 	add.w	r1, r7, #12
 8001bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	f003 f990 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6858      	ldr	r0, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	891b      	ldrh	r3, [r3, #8]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f002 fbf4 	bl	80043fc <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8001c14:	7fbb      	ldrb	r3, [r7, #30]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MPU9250_Update6DOF+0x96>
        return MPU9250_RESULT_FAIL;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0ae      	b.n	8001d7c <MPU9250_Update6DOF+0x1f4>
    }

    for(int i=0;i<3;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	e07a      	b.n	8001d1a <MPU9250_Update6DOF+0x192>
        MPU9250_DATA->accel_raw[i] = (uint16_t)cmdbuf[2*i+1] << 8 | cmdbuf[2*i+2];
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2e:	4413      	add	r3, r2
 8001c30:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c42:	440b      	add	r3, r1
 8001c44:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	3304      	adds	r3, #4
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	809a      	strh	r2, [r3, #4]
        MPU9250_DATA->gyro_raw[i] = (uint16_t)cmdbuf[2*i+9] << 8 | cmdbuf[2*i+10];
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	3309      	adds	r3, #9
 8001c64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c68:	4413      	add	r3, r2
 8001c6a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	3305      	adds	r3, #5
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	3210      	adds	r2, #16
 8001c90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MPU9250_DATA->accel[i] = ((int16_t)MPU9250_DATA->accel_raw[i] * MPU9250_CONFIG->ARES) - MPU9250_CONFIG->ACCEL_OFFSET[i];
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	edc3 7a00 	vstr	s15, [r3]
        MPU9250_DATA->gyro[i] = ((int16_t)MPU9250_DATA->gyro_raw[i] * MPU9250_CONFIG->GRES) - MPU9250_CONFIG->GYRO_OFFSET[i];
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6a3a      	ldr	r2, [r7, #32]
 8001cd6:	3210      	adds	r2, #16
 8001cd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<3;i++){
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	3301      	adds	r3, #1
 8001d18:	623b      	str	r3, [r7, #32]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	dd81      	ble.n	8001c24 <MPU9250_Update6DOF+0x9c>
    }
    MPU9250_DATA->temperature_raw = ((uint16_t)cmdbuf[7] << 8) | cmdbuf[8];
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	7d3b      	ldrb	r3, [r7, #20]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    MPU9250_DATA->temperature = (MPU9250_DATA->temperature_raw/333.87) + 21.0;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc09 	bl	8000554 <__aeabi_i2d>
 8001d42:	a312      	add	r3, pc, #72	; (adr r3, 8001d8c <MPU9250_Update6DOF+0x204>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fd98 	bl	800087c <__aeabi_ddiv>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MPU9250_Update6DOF+0x200>)
 8001d5a:	f7fe faaf 	bl	80002bc <__adddf3>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	4618      	mov	r0, r3
 8001d64:	4621      	mov	r1, r4
 8001d66:	f7fe ff0f 	bl	8000b88 <__aeabi_d2f>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    if (res != HAL_OK) {
 8001d70:	7fbb      	ldrb	r3, [r7, #30]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MPU9250_Update6DOF+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <MPU9250_Update6DOF+0x1f4>
    }

    return MPU9250_RESULT_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	372c      	adds	r7, #44	; 0x2c
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	f3af 8000 	nop.w
 8001d88:	40350000 	.word	0x40350000
 8001d8c:	851eb852 	.word	0x851eb852
 8001d90:	4074ddeb 	.word	0x4074ddeb

08001d94 <MPU9250_Calibrate>:
    }

    return MPU9250_RESULT_OK;
}

MPU9250_Result_t MPU9250_Calibrate(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09a      	sub	sp, #104	; 0x68
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    MPU9250_DATA_t MPU9250_TEMP;
    float ax_sum=0,ay_sum=0,az_sum=0;
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	667b      	str	r3, [r7, #100]	; 0x64
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	663b      	str	r3, [r7, #96]	; 0x60
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
    float gx_sum=0,gy_sum=0,gz_sum=0;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	657b      	str	r3, [r7, #84]	; 0x54
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	653b      	str	r3, [r7, #80]	; 0x50

    /* MPU9250_Accel_Gyro_Calibration---------------------------------------------------------*/
    for (uint8_t i = 0; i < 3; ++i) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001dc6:	e018      	b.n	8001dfa <MPU9250_Calibrate+0x66>
        MPU9250_TEMP.accel_raw[i] = 0;
 8001dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dcc:	3304      	adds	r3, #4
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f823 2c5c 	strh.w	r2, [r3, #-92]
        MPU9250_TEMP.accel[i] = 0;
 8001ddc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001de6:	4413      	add	r3, r2
 8001de8:	3b60      	subs	r3, #96	; 0x60
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i) {
 8001df0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001df4:	3301      	adds	r3, #1
 8001df6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001dfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d9e2      	bls.n	8001dc8 <MPU9250_Calibrate+0x34>
    }

    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e08:	e03e      	b.n	8001e88 <MPU9250_Calibrate+0xf4>
        MPU9250_Update6DOF(MPU9250_CONFIG,&MPU9250_TEMP);
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff feb9 	bl	8001b88 <MPU9250_Update6DOF>
        ax_sum += MPU9250_TEMP.accel[0];
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        ay_sum += MPU9250_TEMP.accel[1];
 8001e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e2a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        az_sum += MPU9250_TEMP.accel[2] - 1;
 8001e36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e42:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        gx_sum += MPU9250_TEMP.gyro[0];
 8001e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e52:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        gy_sum += MPU9250_TEMP.gyro[1];
 8001e5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        gz_sum += MPU9250_TEMP.gyro[2];
 8001e6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e72:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8001e7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e82:	3301      	adds	r3, #1
 8001e84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e90:	d3bb      	bcc.n	8001e0a <MPU9250_Calibrate+0x76>
    }
    MPU9250_CONFIG->ACCEL_OFFSET[0] = ax_sum/CALIBRATE_TIMES;
 8001e92:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001e96:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edc3 7a08 	vstr	s15, [r3, #32]
    MPU9250_CONFIG->ACCEL_OFFSET[1] = ay_sum/CALIBRATE_TIMES;
 8001ea4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001ea8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001eac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    MPU9250_CONFIG->ACCEL_OFFSET[2] = az_sum/CALIBRATE_TIMES;
 8001eb6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001eba:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    MPU9250_CONFIG->GYRO_OFFSET[0] = gx_sum/CALIBRATE_TIMES;
 8001ec8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ecc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    MPU9250_CONFIG->GYRO_OFFSET[1] = gy_sum/CALIBRATE_TIMES;
 8001eda:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ede:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    MPU9250_CONFIG->GYRO_OFFSET[2] = gz_sum/CALIBRATE_TIMES;
 8001eec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ef0:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001f08 <MPU9250_Calibrate+0x174>
 8001ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    return MPU9250_RESULT_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3768      	adds	r7, #104	; 0x68
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	447a0000 	.word	0x447a0000

08001f0c <attitudeInit>:
 */
#include "attitude.h"

#define betaDef         0.1 // 2 * proportional gain

void attitudeInit(AttitudeState *s, KalmanState* kf) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    // gyroscope drift estimated to be 1 deg/s
    s->beta = sqrt(3.0/4) * 3.14159265358979 * (1.0/180.0);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <attitudeInit+0x44>)
 8001f1a:	601a      	str	r2, [r3, #0]
    s->q0 = 1.0;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f22:	60da      	str	r2, [r3, #12]
    s->q1 = s->q2 = s->q3 = 0.0;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]
    s->step = 0.0000185;  // step for gradient descent found through testing
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <attitudeInit+0x48>)
 8001f40:	605a      	str	r2, [r3, #4]
    initKFMatrices(kf);
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f000 f808 	bl	8001f58 <initKFMatrices>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	3c77a4e2 	.word	0x3c77a4e2
 8001f54:	379b3073 	.word	0x379b3073

08001f58 <initKFMatrices>:

void initKFMatrices(KalmanState* kf) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    /*
    * Kalman Filter array is 3 rows
    *  Each row represents an axis
    *  Each column represents x1, x2, x3 for their respective axis
    */
    kf->time = 0.001; // sample rate (s)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4aaf      	ldr	r2, [pc, #700]	; (8002220 <initKFMatrices+0x2c8>)
 8001f64:	601a      	str	r2, [r3, #0]
    kf->acc_var[0] = 0.000004117;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4aae      	ldr	r2, [pc, #696]	; (8002224 <initKFMatrices+0x2cc>)
 8001f6a:	611a      	str	r2, [r3, #16]
    kf->acc_var[1] = 0.000004178;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4aae      	ldr	r2, [pc, #696]	; (8002228 <initKFMatrices+0x2d0>)
 8001f70:	615a      	str	r2, [r3, #20]
    kf->acc_var[2] = 0.000013638;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4aad      	ldr	r2, [pc, #692]	; (800222c <initKFMatrices+0x2d4>)
 8001f76:	619a      	str	r2, [r3, #24]
//    kf->acc_bias[0]= 0.000233963;
//    kf->acc_bias[1]= -0.00099799;
//    kf->acc_bias[2]= 0.000854502;
    kf->acc_bias[0]= 0.0005;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4aad      	ldr	r2, [pc, #692]	; (8002230 <initKFMatrices+0x2d8>)
 8001f7c:	61da      	str	r2, [r3, #28]
    kf->acc_bias[1]= 0.0005;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4aab      	ldr	r2, [pc, #684]	; (8002230 <initKFMatrices+0x2d8>)
 8001f82:	621a      	str	r2, [r3, #32]
    kf->acc_bias[2]= 0.0005;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4aaa      	ldr	r2, [pc, #680]	; (8002230 <initKFMatrices+0x2d8>)
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    float32_t t = kf->time;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	61fb      	str	r3, [r7, #28]
    float32_t t2= t*t;
 8001f90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9c:	edc7 7a06 	vstr	s15, [r7, #24]
    float32_t t2d2      = t2/2.0; //precompute
 8001fa0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fa4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fac:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t t4d4      = t2d2*t2d2;
 8001fb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbc:	edc7 7a04 	vstr	s15, [r7, #16]
    float32_t t3d2      = t2d2*t;
 8001fc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fcc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Stores state of current axis
    for (uint8_t i = 0; i < X_MAT_SZ; ++i) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fd6:	e00d      	b.n	8001ff4 <initKFMatrices+0x9c>
        kf->x_mat[i] = 0;
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	330a      	adds	r3, #10
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < X_MAT_SZ; ++i) {
 8001fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d9ed      	bls.n	8001fd8 <initKFMatrices+0x80>
    }
    arm_mat_init_f32(&kf->X, 3, 2, kf->x_mat);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3328      	adds	r3, #40	; 0x28
 8002006:	2202      	movs	r2, #2
 8002008:	2103      	movs	r1, #3
 800200a:	f004 ff6f 	bl	8006eec <arm_mat_init_f32>

    // A Matrix
    kf->a_mat[0] = 1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    kf->a_mat[1] = t;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
    kf->a_mat[2] = 0;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	649a      	str	r2, [r3, #72]	; 0x48
    kf->a_mat[3] = 1;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c
    arm_mat_init_f32(&kf->A, 2, 2, kf->a_mat);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3340      	adds	r3, #64	; 0x40
 8002036:	2202      	movs	r2, #2
 8002038:	2102      	movs	r1, #2
 800203a:	f004 ff57 	bl	8006eec <arm_mat_init_f32>

    // G Matrix
    kf->g_mat[0] = t2d2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	651a      	str	r2, [r3, #80]	; 0x50
    kf->g_mat[1] = t;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
    arm_mat_init_f32(&kf->G, G_MAT_SZ, 1, kf->g_mat);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3350      	adds	r3, #80	; 0x50
 8002054:	2201      	movs	r2, #1
 8002056:	2102      	movs	r1, #2
 8002058:	f004 ff48 	bl	8006eec <arm_mat_init_f32>

    // H Matrix
    kf->h_mat[0] = 1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
    kf->h_mat[1] = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	65da      	str	r2, [r3, #92]	; 0x5c
    arm_mat_init_f32(&kf->H, 1, H_MAT_SZ, kf->h_mat);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3358      	adds	r3, #88	; 0x58
 8002076:	2202      	movs	r2, #2
 8002078:	2101      	movs	r1, #1
 800207a:	f004 ff37 	bl	8006eec <arm_mat_init_f32>

    // Z Matrix pos of current axis
    for (uint8_t i = 0; i < Z_MAT_SZ; ++i) {
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002084:	e00d      	b.n	80020a2 <initKFMatrices+0x14a>
        kf->z_mat[i] = 0;
 8002086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	3318      	adds	r3, #24
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < Z_MAT_SZ; ++i) {
 8002098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800209c:	3301      	adds	r3, #1
 800209e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d9ed      	bls.n	8002086 <initKFMatrices+0x12e>
    }
    arm_mat_init_f32(&kf->Z, 1, 1, kf->z_mat);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3360      	adds	r3, #96	; 0x60
 80020b4:	2201      	movs	r2, #1
 80020b6:	2101      	movs	r1, #1
 80020b8:	f004 ff18 	bl	8006eec <arm_mat_init_f32>

    // W Matrix
    for (uint8_t i = 0; i < W_MAT_SZ; ++i) {
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80020c2:	e00e      	b.n	80020e2 <initKFMatrices+0x18a>
        kf->w_mat[i] = 0;
 80020c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	331a      	adds	r3, #26
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < W_MAT_SZ; ++i) {
 80020d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020dc:	3301      	adds	r3, #1
 80020de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80020e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d9ec      	bls.n	80020c4 <initKFMatrices+0x16c>
    }
    kf->w_mat[0] = t2d2;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	66da      	str	r2, [r3, #108]	; 0x6c
    kf->w_mat[1] = t;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	671a      	str	r2, [r3, #112]	; 0x70
    kf->w_mat[2] = t2d2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	675a      	str	r2, [r3, #116]	; 0x74
    kf->w_mat[3] = t;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	679a      	str	r2, [r3, #120]	; 0x78
    kf->w_mat[4] = t2d2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	67da      	str	r2, [r3, #124]	; 0x7c
    kf->w_mat[5] = t;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    arm_mat_init_f32(&kf->W, 2, 1, kf->w_mat);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	336c      	adds	r3, #108	; 0x6c
 800211a:	2201      	movs	r2, #1
 800211c:	2102      	movs	r1, #2
 800211e:	f004 fee5 	bl	8006eec <arm_mat_init_f32>

    // V Matrix measured accelerometer various for current axis
    for (uint8_t i = 0; i < V_MAT_SZ; ++i) kf->v_mat[i] = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002128:	e00e      	b.n	8002148 <initKFMatrices+0x1f0>
 800212a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	3320      	adds	r3, #32
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002142:	3301      	adds	r3, #1
 8002144:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800214c:	2b02      	cmp	r3, #2
 800214e:	d9ec      	bls.n	800212a <initKFMatrices+0x1d2>
//    kf->v_mat[0] = t2d2; // TODO replace if needed
//    kf->v_mat[1] = t2d2;
//    kf->v_mat[2] = t2d2;
    arm_mat_init_f32(&kf->V, 1, 1, kf->v_mat);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3384      	adds	r3, #132	; 0x84
 800215a:	2201      	movs	r2, #1
 800215c:	2101      	movs	r1, #1
 800215e:	f004 fec5 	bl	8006eec <arm_mat_init_f32>

    // P Matrix initially position is known to be true
    for(uint8_t i = 0; i < P_MAT_SZ; ++i) {
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002168:	e00d      	b.n	8002186 <initKFMatrices+0x22e>
        kf->p_mat[i] = 0;
 800216a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	3324      	adds	r3, #36	; 0x24
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < P_MAT_SZ; ++i) {
 800217c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002180:	3301      	adds	r3, #1
 8002182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800218a:	2b03      	cmp	r3, #3
 800218c:	d9ed      	bls.n	800216a <initKFMatrices+0x212>
    }
    arm_mat_init_f32(&kf->P, 2, 2, kf->p_mat);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3390      	adds	r3, #144	; 0x90
 8002198:	2202      	movs	r2, #2
 800219a:	2102      	movs	r1, #2
 800219c:	f004 fea6 	bl	8006eec <arm_mat_init_f32>

    // Q Matrix constant
    for (uint8_t i = 0; i < Q_MAT_SZ; ++i) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80021a6:	e00d      	b.n	80021c4 <initKFMatrices+0x26c>
        kf->q_mat[i] = 0;
 80021a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	3328      	adds	r3, #40	; 0x28
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < Q_MAT_SZ; ++i) {
 80021ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021be:	3301      	adds	r3, #1
 80021c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80021c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d9ed      	bls.n	80021a8 <initKFMatrices+0x250>
    }
    kf->q_mat[0] = t4d4;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    kf->q_mat[1] = t3d2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    kf->q_mat[2] = t3d2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    kf->q_mat[3] = t2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    arm_mat_init_f32(&kf->Q, 2, 2, kf->q_mat);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	33a0      	adds	r3, #160	; 0xa0
 80021f6:	2202      	movs	r2, #2
 80021f8:	2102      	movs	r1, #2
 80021fa:	f004 fe77 	bl	8006eec <arm_mat_init_f32>

    // R Matrix
    kf->r_mat[0] = R_COVAR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <initKFMatrices+0x2dc>)
 8002202:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    arm_mat_init_f32(&kf->R, 1, 1, kf->r_mat);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	33b0      	adds	r3, #176	; 0xb0
 8002210:	2201      	movs	r2, #1
 8002212:	2101      	movs	r1, #1
 8002214:	f004 fe6a 	bl	8006eec <arm_mat_init_f32>

    // Identity Matrix
    for (uint8_t i = 0; i < I_MAT_SZ; ++i) {
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800221e:	e01a      	b.n	8002256 <initKFMatrices+0x2fe>
 8002220:	3a83126f 	.word	0x3a83126f
 8002224:	368a24c3 	.word	0x368a24c3
 8002228:	368c30bf 	.word	0x368c30bf
 800222c:	3764cec4 	.word	0x3764cec4
 8002230:	3a03126f 	.word	0x3a03126f
 8002234:	3727c5ac 	.word	0x3727c5ac
        kf->i_mat[i] = 0;
 8002238:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	332c      	adds	r3, #44	; 0x2c
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < I_MAT_SZ; ++i) {
 800224c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002250:	3301      	adds	r3, #1
 8002252:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002256:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800225a:	2b03      	cmp	r3, #3
 800225c:	d9ec      	bls.n	8002238 <initKFMatrices+0x2e0>
    }
    kf->i_mat[0] = 1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002264:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    kf->i_mat[3] = 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800226e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    arm_mat_init_f32(&kf->I, 2, 2, kf->i_mat);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	33b4      	adds	r3, #180	; 0xb4
 800227c:	2202      	movs	r2, #2
 800227e:	2102      	movs	r1, #2
 8002280:	f004 fe34 	bl	8006eec <arm_mat_init_f32>
}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0000      	movs	r0, r0
	...

08002290 <kfUpdate>:

void kfUpdate(KalmanState *kf, float* acc) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b0cb      	sub	sp, #300	; 0x12c
 8002294:	af00      	add	r7, sp, #0
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	6018      	str	r0, [r3, #0]
 800229a:	463b      	mov	r3, r7
 800229c:	6019      	str	r1, [r3, #0]
    // Update Equations
    float32_t auxA_2_2_mat[4] = {0};
 800229e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
    float32_t auxB_2_2_mat[4] = {0};
 80022ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
    float32_t auxC_2_2_mat[4] = {0};
 80022ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
    float32_t auxP_2_2_mat[4] = {0};
 80022c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
    float32_t auxQ_2_2_mat[4] = {0};
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
    float32_t auxA_2_1_mat[2] = {0};
 80022e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
    float32_t auxB_2_1_mat[2] = {0};
 80022ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
    float32_t auxC_2_1_mat[2] = {0};
 80022f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
    float32_t auxD_2_1_mat[2] = {0};
 8002302:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
    float32_t auxX_2_1_mat[2] = {0};
 800230c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
    float32_t auxK_2_1_mat[2] = {0};
 8002316:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
    float32_t auxW_2_1_mat[2] = {0};
 8002320:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
    float32_t auxA_1_1_mat[1] = {0};
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t auxB_1_1_mat[1] = {0};
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t auxC_1_1_mat[1] = {0};
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    arm_matrix_instance_f32 auxA_1_1, auxB_1_1, auxC_1_1;
    arm_matrix_instance_f32 auxX_2_1, auxP_2_2;
    arm_matrix_instance_f32 auxK_2_1;
    arm_matrix_instance_f32 auxW_2_1;
    arm_matrix_instance_f32 auxQ_2_2;
    arm_mat_init_f32(&auxA_2_2, 2, 2, auxA_2_2_mat);
 8002342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002346:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800234a:	2202      	movs	r2, #2
 800234c:	2102      	movs	r1, #2
 800234e:	f004 fdcd 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_2_2, 2, 2, auxB_2_2_mat);
 8002352:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002356:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800235a:	2202      	movs	r2, #2
 800235c:	2102      	movs	r1, #2
 800235e:	f004 fdc5 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_2_2, 2, 2, auxC_2_2_mat);
 8002362:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002366:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800236a:	2202      	movs	r2, #2
 800236c:	2102      	movs	r1, #2
 800236e:	f004 fdbd 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxP_2_2, 2, 2, auxP_2_2_mat);
 8002372:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002376:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800237a:	2202      	movs	r2, #2
 800237c:	2102      	movs	r1, #2
 800237e:	f004 fdb5 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxQ_2_2, 2, 2, auxQ_2_2_mat);
 8002382:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002386:	f107 000c 	add.w	r0, r7, #12
 800238a:	2202      	movs	r2, #2
 800238c:	2102      	movs	r1, #2
 800238e:	f004 fdad 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxA_2_1, 2, 1, auxA_2_1_mat);
 8002392:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002396:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800239a:	2201      	movs	r2, #1
 800239c:	2102      	movs	r1, #2
 800239e:	f004 fda5 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_2_1, 2, 1, auxB_2_1_mat);
 80023a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023a6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80023aa:	2201      	movs	r2, #1
 80023ac:	2102      	movs	r1, #2
 80023ae:	f004 fd9d 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_2_1, 2, 1, auxC_2_1_mat);
 80023b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023b6:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80023ba:	2201      	movs	r2, #1
 80023bc:	2102      	movs	r1, #2
 80023be:	f004 fd95 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxD_2_1, 2, 1, auxD_2_1_mat);
 80023c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023c6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80023ca:	2201      	movs	r2, #1
 80023cc:	2102      	movs	r1, #2
 80023ce:	f004 fd8d 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxX_2_1, 2, 1, auxX_2_1_mat);
 80023d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023d6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80023da:	2201      	movs	r2, #1
 80023dc:	2102      	movs	r1, #2
 80023de:	f004 fd85 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxK_2_1, 2, 1, auxK_2_1_mat);
 80023e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023e6:	f107 001c 	add.w	r0, r7, #28
 80023ea:	2201      	movs	r2, #1
 80023ec:	2102      	movs	r1, #2
 80023ee:	f004 fd7d 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxW_2_1, 2, 1, auxW_2_1_mat);
 80023f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023f6:	f107 0014 	add.w	r0, r7, #20
 80023fa:	2201      	movs	r2, #1
 80023fc:	2102      	movs	r1, #2
 80023fe:	f004 fd75 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxA_1_1, 1, 1, auxA_1_1_mat);
 8002402:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002406:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800240a:	2201      	movs	r2, #1
 800240c:	2101      	movs	r1, #1
 800240e:	f004 fd6d 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxB_1_1, 1, 1, auxB_1_1_mat);
 8002412:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002416:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800241a:	2201      	movs	r2, #1
 800241c:	2101      	movs	r1, #1
 800241e:	f004 fd65 	bl	8006eec <arm_mat_init_f32>
    arm_mat_init_f32(&auxC_1_1, 1, 1, auxC_1_1_mat);
 8002422:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002426:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800242a:	2201      	movs	r2, #1
 800242c:	2101      	movs	r1, #1
 800242e:	f004 fd5d 	bl	8006eec <arm_mat_init_f32>
    for (uint8_t i = 0; i < 3; ++i) {
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002438:	e199      	b.n	800276e <kfUpdate+0x4de>
        uint8_t X_mat_offset = i*2;
 800243a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        // Predict Equations

        /* Set current state to respective coordinate axis */
        arm_mat_init_f32(&kf->X, 2, 1, kf->x_mat+X_mat_offset);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002454:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	2201      	movs	r2, #1
 800245e:	2102      	movs	r1, #2
 8002460:	f004 fd44 	bl	8006eec <arm_mat_init_f32>
        arm_mat_init_f32(&kf->V, 1, 1, kf->v_mat+i);
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8002474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	2201      	movs	r2, #1
 800247e:	2101      	movs	r1, #1
 8002480:	f004 fd34 	bl	8006eec <arm_mat_init_f32>

        /* Scale G and Q matrices with normal distribution based on acc var */
        float32_t GQ_var = box_muller(0, kf->acc_var[i]);
 8002484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002488:	1d3a      	adds	r2, r7, #4
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	3304      	adds	r3, #4
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eef0 0a67 	vmov.f32	s1, s15
 800249a:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8002790 <kfUpdate+0x500>
 800249e:	f000 fadb 	bl	8002a58 <box_muller>
 80024a2:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
        arm_mat_scale_f32(&kf->G, GQ_var, &auxW_2_1);
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	33d4      	adds	r3, #212	; 0xd4
 80024ac:	f107 0214 	add.w	r2, r7, #20
 80024b0:	4611      	mov	r1, r2
 80024b2:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 f8aa 	bl	8006610 <arm_mat_scale_f32>
        arm_mat_scale_f32(&kf->Q, GQ_var, &auxQ_2_2);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	4611      	mov	r1, r2
 80024ca:	ed97 0a46 	vldr	s0, [r7, #280]	; 0x118
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 f89e 	bl	8006610 <arm_mat_scale_f32>

        /* G*ak: Update measured acceleration disturbance matrix */
        // conversion for gs to m/s^2
        float32_t actual_acc = 0;
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (acc[i] > -kf->acc_bias[i] && acc[i] < kf->acc_bias[i]) {
 80024dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	463a      	mov	r2, r7
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024f0:	1d3a      	adds	r2, r7, #4
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	3306      	adds	r3, #6
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	eef1 7a67 	vneg.f32	s15, s15
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd26      	ble.n	800255c <kfUpdate+0x2cc>
 800250e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	463a      	mov	r2, r7
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002522:	1d3a      	adds	r2, r7, #4
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	d50f      	bpl.n	800255c <kfUpdate+0x2cc>
            actual_acc = 0;
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            kf->x_mat[X_mat_offset+1] = 0; // zero out velocity if less than acc thrshold
 8002544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002548:	3301      	adds	r3, #1
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	330a      	adds	r3, #10
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e017      	b.n	800258c <kfUpdate+0x2fc>
        } else {
            actual_acc = acc[i]*9.80665;
 800255c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	463a      	mov	r2, r7
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4413      	add	r3, r2
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f804 	bl	8000578 <__aeabi_f2d>
 8002570:	a385      	add	r3, pc, #532	; (adr r3, 8002788 <kfUpdate+0x4f8>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f857 	bl	8000628 <__aeabi_dmul>
 800257a:	4603      	mov	r3, r0
 800257c:	460c      	mov	r4, r1
 800257e:	4618      	mov	r0, r3
 8002580:	4621      	mov	r1, r4
 8002582:	f7fe fb01 	bl	8000b88 <__aeabi_d2f>
 8002586:	4603      	mov	r3, r0
 8002588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        }
        arm_mat_scale_f32(&kf->G, actual_acc, &auxA_2_1); // G*ak 3x1
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	33d4      	adds	r3, #212	; 0xd4
 8002592:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002596:	4611      	mov	r1, r2
 8002598:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f837 	bl	8006610 <arm_mat_scale_f32>

        /* A*x_k-1k-1: Update process matrix */
        arm_mat_mult_f32(&kf->A, &kf->X, &auxB_2_1); // A*X 3x1
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	33c4      	adds	r3, #196	; 0xc4
 80025b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025b4:	4619      	mov	r1, r3
 80025b6:	f004 f8e5 	bl	8006784 <arm_mat_mult_f32>

        /* sigma*W_k: Update position measurement noise matrix */
        arm_mat_scale_f32(&auxW_2_1, 1, &auxC_2_1); // W*1 3x1
 80025ba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4611      	mov	r1, r2
 80025c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 f821 	bl	8006610 <arm_mat_scale_f32>

        /* x_kk-1= A*x_k-1k-1 + G*ak + W */
        arm_mat_add_f32(&auxB_2_1, &auxA_2_1, &auxD_2_1); // A*X + G*ak
 80025ce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80025d2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80025d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fc90 	bl	8006f00 <arm_mat_add_f32>
        arm_mat_add_f32(&auxD_2_1, &auxC_2_1, &auxX_2_1); //X = A*X + G*ak + W*sigma
 80025e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025e4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80025e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fc87 	bl	8006f00 <arm_mat_add_f32>

        /*P_kk-1= APA_T + Qk */
        arm_mat_trans_f32(&kf->A, &auxA_2_2);       // A_t 3x3
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	33cc      	adds	r3, #204	; 0xcc
 80025f8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fe38 	bl	8006274 <arm_mat_trans_f32>
        arm_mat_mult_f32(&kf->P, &auxA_2_2, &auxB_2_2); // P*A_t
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	33fc      	adds	r3, #252	; 0xfc
 800260a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800260e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002612:	4618      	mov	r0, r3
 8002614:	f004 f8b6 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_mult_f32(&kf->A, &auxB_2_2, &auxC_2_2); // A*P*A_t
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	33cc      	adds	r3, #204	; 0xcc
 800261e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002622:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002626:	4618      	mov	r0, r3
 8002628:	f004 f8ac 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxC_2_2, &auxQ_2_2, &auxP_2_2);  // P = A*P*A_t + Q 3x3
 800262c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002630:	f107 010c 	add.w	r1, r7, #12
 8002634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002638:	4618      	mov	r0, r3
 800263a:	f004 fc61 	bl	8006f00 <arm_mat_add_f32>

        // Update Equations

        /* Kalman gain: K = P_kk-1*Ht_k*S^-1_k */
        arm_mat_trans_f32(&kf->H, &auxA_2_1);   // H_t
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	33dc      	adds	r3, #220	; 0xdc
 8002644:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fe12 	bl	8006274 <arm_mat_trans_f32>
        arm_mat_mult_f32(&auxP_2_2, &auxA_2_1, &auxB_2_1);   // PH_t 3x1
 8002650:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002654:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f891 	bl	8006784 <arm_mat_mult_f32>

        arm_mat_mult_f32(&kf->H, &auxB_2_1, &auxA_1_1); // HPH_t 1x1
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	33dc      	adds	r3, #220	; 0xdc
 8002668:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800266c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002670:	4618      	mov	r0, r3
 8002672:	f004 f887 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxA_1_1, &kf->R, &auxB_1_1); // S = HPH_t + R 1x1
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 7186 	add.w	r1, r3, #268	; 0x10c
 800267e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002682:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fc3a 	bl	8006f00 <arm_mat_add_f32>
        arm_mat_inverse_f32(&auxB_1_1, &auxC_1_1); // S^-1
 800268c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002690:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f004 f9b0 	bl	80069fc <arm_mat_inverse_f32>

        arm_mat_mult_f32(&auxA_2_1, &auxC_1_1, &auxC_2_1); // H_t * S^-1 3x1
 800269c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80026a0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80026a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 f86b 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_mult_f32(&auxP_2_2, &auxC_2_1, &auxK_2_1); // K = P * H^t * S^-1
 80026ae:	f107 021c 	add.w	r2, r7, #28
 80026b2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f862 	bl	8006784 <arm_mat_mult_f32>

        /* A posteriori state estimate */
        arm_mat_mult_f32(&auxK_2_1, &kf->H, &auxA_2_2); // KH
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 80026c8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4618      	mov	r0, r3
 80026d2:	f004 f857 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_sub_f32(&kf->I, &auxA_2_2, &auxB_2_2); // I-KH
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80026de:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80026e2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fe9a 	bl	8006420 <arm_mat_sub_f32>
        arm_mat_mult_f32(&auxB_2_2, &auxX_2_1, &auxA_2_1); // (I-KH)*X
 80026ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026f0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80026f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 f843 	bl	8006784 <arm_mat_mult_f32>

        arm_mat_mult_f32(&auxA_2_2, &auxX_2_1, &auxB_2_1); // KHX
 80026fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002702:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002706:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800270a:	4618      	mov	r0, r3
 800270c:	f004 f83a 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_mult_f32(&auxK_2_1, &kf->V, &auxC_2_1); // Kv
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8002718:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4618      	mov	r0, r3
 8002722:	f004 f82f 	bl	8006784 <arm_mat_mult_f32>
        arm_mat_add_f32(&auxA_2_1, &auxB_2_1, &auxD_2_1); // (I-KH)*X + KHX
 8002726:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800272a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800272e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fbe4 	bl	8006f00 <arm_mat_add_f32>
        arm_mat_add_f32(&auxD_2_1, &auxC_2_1, &kf->X); // (I-KH)*X + KHX + Kv
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8002740:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fbd9 	bl	8006f00 <arm_mat_add_f32>

        /* A posteriori estimate cov */
        arm_mat_mult_f32(&auxB_2_2, &auxP_2_2, &kf->P); // (I-KH)*P
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f103 02fc 	add.w	r2, r3, #252	; 0xfc
 8002756:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800275a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f810 	bl	8006784 <arm_mat_mult_f32>
    for (uint8_t i = 0; i < 3; ++i) {
 8002764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002768:	3301      	adds	r3, #1
 800276a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 800276e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002772:	2b02      	cmp	r3, #2
 8002774:	f67f ae61 	bls.w	800243a <kfUpdate+0x1aa>
    }
}
 8002778:	bf00      	nop
 800277a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	3a92a305 	.word	0x3a92a305
 800278c:	40239d01 	.word	0x40239d01
	...

08002798 <computeAngles>:

void computeAngles(AttitudeState *s)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
    float q0 = s->q0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float q1 = s->q1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
    float q2 = s->q2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    float q3 = s->q3;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	623b      	str	r3, [r7, #32]
    float q2q2 = q2 * q2;
 80027b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80027bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	edc7 7a07 	vstr	s15, [r7, #28]
    float t0 = -2.0 * (q2q2 + q3 * q3) + 1.0;
 80027c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80027cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80027d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80027d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7fd feca 	bl	8000578 <__aeabi_f2d>
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80027ec:	f7fd ff1c 	bl	8000628 <__aeabi_dmul>
 80027f0:	4603      	mov	r3, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	4618      	mov	r0, r3
 80027f6:	4621      	mov	r1, r4
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <computeAngles+0x218>)
 80027fe:	f7fd fd5d 	bl	80002bc <__adddf3>
 8002802:	4603      	mov	r3, r0
 8002804:	460c      	mov	r4, r1
 8002806:	4618      	mov	r0, r3
 8002808:	4621      	mov	r1, r4
 800280a:	f7fe f9bd 	bl	8000b88 <__aeabi_d2f>
 800280e:	4603      	mov	r3, r0
 8002810:	61bb      	str	r3, [r7, #24]
    float t1 = 2.0 * (q1 * q2 + q0 * q3);
 8002812:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002816:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002822:	edd7 7a08 	vldr	s15, [r7, #32]
 8002826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002832:	edc7 7a05 	vstr	s15, [r7, #20]
    float t2 = -2.0 * (q1 * q3 - q0 * q2);
 8002836:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800283a:	edd7 7a08 	vldr	s15, [r7, #32]
 800283e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002842:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002846:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800284a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002852:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285a:	edc7 7a04 	vstr	s15, [r7, #16]
    float t3 = 2.0 * (q2 * q3 + q0 * q1);
 800285e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002862:	edd7 7a08 	vldr	s15, [r7, #32]
 8002866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800286e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800287e:	edc7 7a03 	vstr	s15, [r7, #12]
    float t4 = -2.0 * (q1 * q1 + q2q2) + 1.0;
 8002882:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002886:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800288a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	ee17 0a90 	vmov	r0, s15
 800289a:	f7fd fe6d 	bl	8000578 <__aeabi_f2d>
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80028a6:	f7fd febf 	bl	8000628 <__aeabi_dmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	4618      	mov	r0, r3
 80028b0:	4621      	mov	r1, r4
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <computeAngles+0x218>)
 80028b8:	f7fd fd00 	bl	80002bc <__adddf3>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	4618      	mov	r0, r3
 80028c2:	4621      	mov	r1, r4
 80028c4:	f7fe f960 	bl	8000b88 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60bb      	str	r3, [r7, #8]

    t2 = t2 > 1.0 ? 1.0 : t2;
 80028cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	dd02      	ble.n	80028e4 <computeAngles+0x14c>
 80028de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028e2:	e000      	b.n	80028e6 <computeAngles+0x14e>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	613b      	str	r3, [r7, #16]
    t2 = t2 < -1.0 ? -1.0 : t2;
 80028e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80028f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d501      	bpl.n	80028fe <computeAngles+0x166>
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <computeAngles+0x21c>)
 80028fc:	e000      	b.n	8002900 <computeAngles+0x168>
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	613b      	str	r3, [r7, #16]

    s->pitch = asin(t2) * 57.29578;
 8002902:	6938      	ldr	r0, [r7, #16]
 8002904:	f7fd fe38 	bl	8000578 <__aeabi_f2d>
 8002908:	4603      	mov	r3, r0
 800290a:	460c      	mov	r4, r1
 800290c:	ec44 3b10 	vmov	d0, r3, r4
 8002910:	f005 fc5a 	bl	80081c8 <asin>
 8002914:	ec51 0b10 	vmov	r0, r1, d0
 8002918:	a323      	add	r3, pc, #140	; (adr r3, 80029a8 <computeAngles+0x210>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd fe83 	bl	8000628 <__aeabi_dmul>
 8002922:	4603      	mov	r3, r0
 8002924:	460c      	mov	r4, r1
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    s->roll = atan2(t3, t4) * 57.29578;
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7fd fe23 	bl	8000578 <__aeabi_f2d>
 8002932:	4604      	mov	r4, r0
 8002934:	460d      	mov	r5, r1
 8002936:	68b8      	ldr	r0, [r7, #8]
 8002938:	f7fd fe1e 	bl	8000578 <__aeabi_f2d>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	ec43 2b11 	vmov	d1, r2, r3
 8002944:	ec45 4b10 	vmov	d0, r4, r5
 8002948:	f005 fc96 	bl	8008278 <atan2>
 800294c:	ec51 0b10 	vmov	r0, r1, d0
 8002950:	a315      	add	r3, pc, #84	; (adr r3, 80029a8 <computeAngles+0x210>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fe67 	bl	8000628 <__aeabi_dmul>
 800295a:	4603      	mov	r3, r0
 800295c:	460c      	mov	r4, r1
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	e9c2 3408 	strd	r3, r4, [r2, #32]
    s->yaw = atan2(t1, t0) * 57.29578;
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	f7fd fe07 	bl	8000578 <__aeabi_f2d>
 800296a:	4604      	mov	r4, r0
 800296c:	460d      	mov	r5, r1
 800296e:	69b8      	ldr	r0, [r7, #24]
 8002970:	f7fd fe02 	bl	8000578 <__aeabi_f2d>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	ec43 2b11 	vmov	d1, r2, r3
 800297c:	ec45 4b10 	vmov	d0, r4, r5
 8002980:	f005 fc7a 	bl	8008278 <atan2>
 8002984:	ec51 0b10 	vmov	r0, r1, d0
 8002988:	a307      	add	r3, pc, #28	; (adr r3, 80029a8 <computeAngles+0x210>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fe4b 	bl	8000628 <__aeabi_dmul>
 8002992:	4603      	mov	r3, r0
 8002994:	460c      	mov	r4, r1
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdb0      	pop	{r4, r5, r7, pc}
 80029a4:	f3af 8000 	nop.w
 80029a8:	1e7967cb 	.word	0x1e7967cb
 80029ac:	404ca5dc 	.word	0x404ca5dc
 80029b0:	3ff00000 	.word	0x3ff00000
 80029b4:	bf800000 	.word	0xbf800000

080029b8 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x) {
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 80029c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ce:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	613b      	str	r3, [r7, #16]
    long i = *(long*)&y;
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i>>1);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	105a      	asrs	r2, r3, #1
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <invSqrt+0x9c>)
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 80029f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80029f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a14:	edc7 7a04 	vstr	s15, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 8002a18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3c:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	ee07 3a90 	vmov	s15, r3
}
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	5f3759df 	.word	0x5f3759df

08002a58 <box_muller>:

/* code borrowed from ftp://ftp.taygeta.com/pub/c/boxmuller.c */
float32_t box_muller(float32_t m, float32_t s)   /* normal random variate generator */
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a62:	edc7 0a00 	vstr	s1, [r7]
    /* mean m, standard deviation s */
    float32_t x1, x2, w, _y1;
    static float32_t y2;
    static int use_last = 0;

    if (use_last)               /* use value from previous call */
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <box_muller+0x16c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <box_muller+0x24>
    {
        _y1 = y2;
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <box_muller+0x170>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	61fb      	str	r3, [r7, #28]
        use_last = 0;
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <box_muller+0x16c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e08e      	b.n	8002b9a <box_muller+0x142>
    }
    else
    {
        do {
            x1 = 2.0 * drand48() - 1.0;
 8002a7c:	f004 fb58 	bl	8007130 <drand48>
 8002a80:	ec51 0b10 	vmov	r0, r1, d0
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	f7fd fc18 	bl	80002bc <__adddf3>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	4618      	mov	r0, r3
 8002a92:	4621      	mov	r1, r4
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <box_muller+0x174>)
 8002a9a:	f7fd fc0d 	bl	80002b8 <__aeabi_dsub>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	f7fe f86f 	bl	8000b88 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
            x2 = 2.0 * drand48() - 1.0;
 8002aae:	f004 fb3f 	bl	8007130 <drand48>
 8002ab2:	ec51 0b10 	vmov	r0, r1, d0
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	f7fd fbff 	bl	80002bc <__adddf3>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <box_muller+0x174>)
 8002acc:	f7fd fbf4 	bl	80002b8 <__aeabi_dsub>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	f7fe f856 	bl	8000b88 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	617b      	str	r3, [r7, #20]
            w = x1 * x1 + x2 * x2;
 8002ae0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ae4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	edd7 6a05 	vldr	s13, [r7, #20]
 8002af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afc:	edc7 7a04 	vstr	s15, [r7, #16]
        } while ( w >= 1.0 );
 8002b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	dab4      	bge.n	8002a7c <box_muller+0x24>

        w = sqrt( (-2.0 * log( w ) ) / w );
 8002b12:	6938      	ldr	r0, [r7, #16]
 8002b14:	f7fd fd30 	bl	8000578 <__aeabi_f2d>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	ec44 3b10 	vmov	d0, r3, r4
 8002b20:	f005 fbac 	bl	800827c <log>
 8002b24:	ec51 0b10 	vmov	r0, r1, d0
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002b30:	f7fd fd7a 	bl	8000628 <__aeabi_dmul>
 8002b34:	4603      	mov	r3, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	4625      	mov	r5, r4
 8002b3a:	461c      	mov	r4, r3
 8002b3c:	6938      	ldr	r0, [r7, #16]
 8002b3e:	f7fd fd1b 	bl	8000578 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd fe97 	bl	800087c <__aeabi_ddiv>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	ec44 3b17 	vmov	d7, r3, r4
 8002b56:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5a:	eef0 0a67 	vmov.f32	s1, s15
 8002b5e:	f005 fc0d 	bl	800837c <sqrt>
 8002b62:	ec54 3b10 	vmov	r3, r4, d0
 8002b66:	4618      	mov	r0, r3
 8002b68:	4621      	mov	r1, r4
 8002b6a:	f7fe f80d 	bl	8000b88 <__aeabi_d2f>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	613b      	str	r3, [r7, #16]
        _y1 = x1 * w;
 8002b72:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        y2 = x2 * w;
 8002b82:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <box_muller+0x170>)
 8002b90:	edc3 7a00 	vstr	s15, [r3]
        use_last = 1;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <box_muller+0x16c>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    }

    float32_t result = ( m + _y1 * s );
 8002b9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b9e:	edd7 7a00 	vldr	s15, [r7]
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	edc7 7a03 	vstr	s15, [r7, #12]

    return result;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	ee07 3a90 	vmov	s15, r3
}
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000094 	.word	0x20000094
 8002bc8:	20000098 	.word	0x20000098
 8002bcc:	3ff00000 	.word	0x3ff00000

08002bd0 <normalizeGravity>:

void normalizeGravity(AttitudeState *s, float* acc) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b095      	sub	sp, #84	; 0x54
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    float q0, q1, q2, q3;
    float q0q0, q1q1, q2q2, q3q3;
    float q0q1, q0q2, q0q3;
    float q1q2, q1q3;
    float q2q3;
    q0 = s->q0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
    q1 = s->q1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
    q2 = s->q2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
    q3 = s->q3;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
    q0q0 = q0*q0;
 8002bf2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002bf6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q1q1 = q1*q1;
 8002c02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002c06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q2q2 = q2*q2;
 8002c12:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002c16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q3q3 = q3*q3;
 8002c22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c26:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    q0q1 = q0*q1;
 8002c32:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c36:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    q0q2 = q0*q2;
 8002c42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    q0q3 = q0*q3;
 8002c52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c56:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    q1q2 = q1*q2;
 8002c62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002c66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6e:	edc7 7a08 	vstr	s15, [r7, #32]
    q1q3 = q1*q3;
 8002c72:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002c76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7e:	edc7 7a07 	vstr	s15, [r7, #28]
    q2q3 = q2*q3;
 8002c82:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002c86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8e:	edc7 7a06 	vstr	s15, [r7, #24]

    // rotate acceleration vector by quaternion orientation
    // essentially rotating sensor frame into inertial frame
    float r_acc[3];
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	ed93 7a00 	vldr	s14, [r3]
 8002c98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ca4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	3308      	adds	r3, #8
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	edd3 6a00 	vldr	s13, [r3]
 8002cd6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ce6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	3304      	adds	r3, #4
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cfe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	edd3 6a00 	vldr	s13, [r3]
 8002d18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    q1q1*acc[0] + 2*q1q2*acc[1] + 2*q1q3*acc[2] -
 8002d20:	ee37 7a67 	vsub.f32	s14, s14, s15
                    q3q3*acc[0] - q2q2*acc[0];
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	edd3 6a00 	vldr	s13, [r3]
 8002d2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d32:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[0] = q0q0*acc[0] + 2*q0q2*acc[2] - 2*q0q3*acc[1] +
 8002d36:	edc7 7a03 	vstr	s15, [r7, #12]
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 8002d3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d3e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	edd3 6a00 	vldr	s13, [r3]
 8002d54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	edd3 7a00 	vldr	s15, [r3]
 8002d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d74:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 8002d78:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d7c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 8002d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	edd3 6a00 	vldr	s13, [r3]
 8002d96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	3304      	adds	r3, #4
 8002da6:	edd3 6a00 	vldr	s13, [r3]
 8002daa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db2:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 8002db6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q3*acc[0] - q3q3*acc[1] + q0q0*acc[1] -
 8002dca:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q1*acc[2] - q1q1*acc[1];
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	edd3 6a00 	vldr	s13, [r3]
 8002dd6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dde:	ee77 7a67 	vsub.f32	s15, s14, s15
    r_acc[1] = 2*q1q2*acc[0] + q2q2*acc[1] + 2*q2q3*acc[2] +
 8002de2:	edc7 7a04 	vstr	s15, [r7, #16]
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002de6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dfc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3304      	adds	r3, #4
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	edd3 6a00 	vldr	s13, [r3]
 8002e18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e20:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 8002e24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002e36:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	edd3 6a00 	vldr	s13, [r3]
 8002e42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e52:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e62:	ee37 7a27 	vadd.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	edd3 6a00 	vldr	s13, [r3]
 8002e6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*q0q2*acc[0] - q2q2*acc[2] + 2*q0q1*acc[1] -
 8002e76:	ee37 7a67 	vsub.f32	s14, s14, s15
                q1q1*acc[2] + q0q0*acc[2];
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	edd3 6a00 	vldr	s13, [r3]
 8002e82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
    r_acc[2] = 2*q1q3*acc[0] + 2*q2q3*acc[1] + q3q3*acc[2] -
 8002e8e:	edc7 7a05 	vstr	s15, [r7, #20]
    acc[0] = r_acc[0];
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	601a      	str	r2, [r3, #0]
    acc[1] = r_acc[1];
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	601a      	str	r2, [r3, #0]
    acc[2] = r_acc[2] - 1; // subtract out gravity component from acc
 8002ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
}
 8002eb4:	bf00      	nop
 8002eb6:	3754      	adds	r7, #84	; 0x54
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <madgwickUpdate>:

void madgwickUpdate(AttitudeState *s, float* acc, float* gyro, uint8_t sz) {
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b0aa      	sub	sp, #168	; 0xa8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	70fb      	strb	r3, [r7, #3]
    float w_x, w_y, w_z, a_x, a_y, a_z;
    float invNorm;
    float deltat = s->step;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float beta = s->beta;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float qDot_omega_1, qDot_omega_2, qDot_omega_3, qDot_omega_4;  // quaternion derivative from gyroscopes elements
    float f_1, f_2, f_3;                                        // objective function elements
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;   // objective function Jacobian elements
    float qHatDot_1, qHatDot_2, qHatDot_3, qHatDot_4;   // estimated direction of the gyroscope error
    // Auxiliary variables to avoid repeated calculations
    w_x = gyro[0];
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    w_y = gyro[1];
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    w_z = gyro[2];
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    a_x = acc[0];
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    a_y = acc[1];
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    a_z = acc[2];
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    q_1 = s->q0;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    q_2 = s->q1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    q_3 = s->q2;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    q_4 = s->q3;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	67bb      	str	r3, [r7, #120]	; 0x78
    float halfq_1 = 0.5 * q_1;
 8002f2a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f36:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float halfq_2 = 0.5 * q_2;
 8002f3a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f46:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float halfq_3 = 0.5 * q_3;
 8002f4a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f56:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float halfq_4 = 0.5 * q_4;
 8002f5a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f66:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float twoq_1 = 2.0 * q_1;
 8002f6a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f72:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float twoq_2 = 2.0 * q_2;
 8002f76:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f7e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float twoq_3 = 2.0 * q_3;
 8002f82:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f8a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // Normalize the accelerometer measurement
    invNorm = invSqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 8002f8e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002f92:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002f9e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002faa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002fae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbe:	f7ff fcfb 	bl	80029b8 <invSqrt>
 8002fc2:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    a_x *= invNorm;
 8002fc6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002fca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    a_y *= invNorm;
 8002fd6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002fda:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    a_z *= invNorm;
 8002fe6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002fea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    // Compute the objective function and Jacobian
    f_1 = twoq_2 * q_4 - twoq_1 * q_3 - a_x;
 8002ff6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002ffa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003002:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003006:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800300a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003012:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    f_2 = twoq_1 * q_2 + twoq_3 * q_4 - a_y;
 800301e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003022:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800302e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800303a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800303e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003042:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    f_3 = 1.0 - twoq_2 * q_2 - twoq_3 * q_3 - a_z;
 8003046:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800304a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	ee17 0a90 	vmov	r0, s15
 8003056:	f7fd fa8f 	bl	8000578 <__aeabi_f2d>
 800305a:	4603      	mov	r3, r0
 800305c:	460c      	mov	r4, r1
 800305e:	461a      	mov	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	49f0      	ldr	r1, [pc, #960]	; (8003428 <madgwickUpdate+0x568>)
 8003068:	f7fd f926 	bl	80002b8 <__aeabi_dsub>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	4625      	mov	r5, r4
 8003072:	461c      	mov	r4, r3
 8003074:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003078:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800307c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003080:	ee17 0a90 	vmov	r0, s15
 8003084:	f7fd fa78 	bl	8000578 <__aeabi_f2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4620      	mov	r0, r4
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd f912 	bl	80002b8 <__aeabi_dsub>
 8003094:	4603      	mov	r3, r0
 8003096:	460c      	mov	r4, r1
 8003098:	4625      	mov	r5, r4
 800309a:	461c      	mov	r4, r3
 800309c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030a0:	f7fd fa6a 	bl	8000578 <__aeabi_f2d>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f904 	bl	80002b8 <__aeabi_dsub>
 80030b0:	4603      	mov	r3, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4618      	mov	r0, r3
 80030b6:	4621      	mov	r1, r4
 80030b8:	f7fd fd66 	bl	8000b88 <__aeabi_d2f>
 80030bc:	4603      	mov	r3, r0
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_11or24 = twoq_3;  // J_11 negated in matrix multiplication
 80030c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
    J_12or23 = 2.0 * q_4;
 80030c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80030c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030cc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_13or22 = twoq_1;  // J_12 negated in matrix multiplication
 80030d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
    J_14or21 = twoq_2;
 80030d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    J_32 = 2.0 * J_14or21;  // negated in matrix multiplication
 80030d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    J_33 = 2.0 * J_11or24;  // negated in matrix multiplication
 80030e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80030e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // Compute the gradient (matrix multiplication)
    qHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 80030f0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80030f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8003100:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8003110:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003114:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003120:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800312c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003130:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8003140:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003144:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003150:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003158:	ee37 7a67 	vsub.f32	s14, s14, s15
 800315c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8003160:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8003170:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003174:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8003180:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Normalize the gradient
    invNorm = invSqrt(qHatDot_1 * qHatDot_1 + qHatDot_2 * qHatDot_2 + qHatDot_3 * qHatDot_3 + qHatDot_4 * qHatDot_4);
 8003190:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003194:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80031a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80031b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80031b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80031c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031cc:	eeb0 0a67 	vmov.f32	s0, s15
 80031d0:	f7ff fbf2 	bl	80029b8 <invSqrt>
 80031d4:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    qHatDot_1 *= invNorm;
 80031d8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80031dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qHatDot_2 *= invNorm;
 80031e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80031ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    qHatDot_3 *= invNorm;
 80031f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    qHatDot_4 *= invNorm;
 8003208:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800320c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute the quaternion derivative measured by gyroscopes
    qDot_omega_1 = -halfq_2 * w_x - halfq_3 * w_y - halfq_4 * w_z;
 8003218:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800321c:	eeb1 7a67 	vneg.f32	s14, s15
 8003220:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003228:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800322c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003238:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800323c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003248:	edc7 7a08 	vstr	s15, [r7, #32]
    qDot_omega_2 = halfq_1 * w_x + halfq_3 * w_z - halfq_4 * w_y;
 800324c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003250:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800325c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800326c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003278:	edc7 7a07 	vstr	s15, [r7, #28]
    qDot_omega_3 = halfq_1 * w_y - halfq_2 * w_z + halfq_4 * w_x;
 800327c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003280:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003288:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800328c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003294:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003298:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800329c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80032a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a8:	edc7 7a06 	vstr	s15, [r7, #24]
    qDot_omega_4 = halfq_1 * w_z + halfq_2 * w_y - halfq_3 * w_x;
 80032ac:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80032b0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80032b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b8:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80032bc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80032cc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80032d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d8:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute then integrate the estimated quaternion derivative
    q_1 += (qDot_omega_1 - (beta * qHatDot_1)) * deltat;
 80032dc:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80032e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80032ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80032f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 += (qDot_omega_2 - (beta * qHatDot_2)) * deltat;
 8003304:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003308:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800330c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003310:	ed97 7a07 	vldr	s14, [r7, #28]
 8003314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003318:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800331c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003320:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003328:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 += (qDot_omega_3 - (beta * qHatDot_3)) * deltat;
 800332c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003330:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	ed97 7a06 	vldr	s14, [r7, #24]
 800333c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003340:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800334c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003350:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 += (qDot_omega_4 - (beta * qHatDot_4)) * deltat;
 8003354:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003358:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	ed97 7a05 	vldr	s14, [r7, #20]
 8003364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003368:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800336c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003370:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003378:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalize quaternion
    invNorm = invSqrt(q_1 * q_1 + q_2 * q_2 + q_3 * q_3 + q_4 * q_4);
 800337c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003380:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003388:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800338c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003398:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800339c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a8:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80033ac:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80033b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b8:	eeb0 0a67 	vmov.f32	s0, s15
 80033bc:	f7ff fafc 	bl	80029b8 <invSqrt>
 80033c0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    q_1 *= invNorm;
 80033c4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80033c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q_2 *= invNorm;
 80033d4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q_3 *= invNorm;
 80033e4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80033e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q_4 *= invNorm;
 80033f4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80033f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003400:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Save new quaternion to state
    s->q0 = q_1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800340a:	60da      	str	r2, [r3, #12]
    s->q1 = q_2;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003412:	611a      	str	r2, [r3, #16]
    s->q2 = q_3;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003418:	615a      	str	r2, [r3, #20]
    s->q3 = q_4;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800341e:	619a      	str	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	37a8      	adds	r7, #168	; 0xa8
 8003424:	46bd      	mov	sp, r7
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	3ff00000 	.word	0x3ff00000

0800342c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t computeAttitude = 0;
volatile uint16_t num_computations = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    computeAttitude = 1;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
    ++num_computations;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003446:	801a      	strh	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	2000009c 	.word	0x2000009c
 8003458:	2000009e 	.word	0x2000009e

0800345c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b0a4      	sub	sp, #144	; 0x90
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003462:	f000 fc93 	bl	8003d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003466:	f000 f8c5 	bl	80035f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800346a:	f000 f9c7 	bl	80037fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800346e:	f000 f99b 	bl	80037a8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003472:	f000 f92d 	bl	80036d0 <MX_SPI2_Init>
  MX_TIM6_Init();
 8003476:	f000 f961 	bl	800373c <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU9250_DATA_t mpu_data;
  MPU9250_CONFIG_t mpu_config;
  mpu_config.hspi = &hspi2;
 800347a:	4b54      	ldr	r3, [pc, #336]	; (80035cc <main+0x170>)
 800347c:	607b      	str	r3, [r7, #4]
  mpu_config.GPIOx = MPU_CS_GPIO_Port;
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <main+0x174>)
 8003480:	60bb      	str	r3, [r7, #8]
  mpu_config.GPIO_PIN = MPU_CS_Pin;
 8003482:	2308      	movs	r3, #8
 8003484:	81bb      	strh	r3, [r7, #12]
  mpu_config.ACCEL_SCALE = ACCEL_SCALE_4G;
 8003486:	2308      	movs	r3, #8
 8003488:	73bb      	strb	r3, [r7, #14]
  mpu_config.GYRO_SCALE = GYRO_SCALE_500dps;
 800348a:	2308      	movs	r3, #8
 800348c:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 3; ++i) {
 800348e:	2300      	movs	r3, #0
 8003490:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003494:	e025      	b.n	80034e2 <main+0x86>
      mpu_config.ACCEL_OFFSET[i] = 0;
 8003496:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800349a:	3308      	adds	r3, #8
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80034a2:	4413      	add	r3, r2
 80034a4:	3b8c      	subs	r3, #140	; 0x8c
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
      mpu_config.GYRO_OFFSET[i] = 0;
 80034ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034b0:	330a      	adds	r3, #10
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80034b8:	4413      	add	r3, r2
 80034ba:	3b88      	subs	r3, #136	; 0x88
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
      mpu_config.MAG_OFFSET[i] = 0;
 80034c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034c6:	330e      	adds	r3, #14
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80034ce:	4413      	add	r3, r2
 80034d0:	3b8c      	subs	r3, #140	; 0x8c
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 3; ++i) {
 80034d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034dc:	3301      	adds	r3, #1
 80034de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80034e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d9d5      	bls.n	8003496 <main+0x3a>
  }
  MPU9250_Initialize(&mpu_config);
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fd1b 	bl	8000f28 <MPU9250_Initialize>
  MPU9250_Config(&mpu_config);
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd fff1 	bl	80014dc <MPU9250_Config>
  MPU9250_Calibrate(&mpu_config);
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fc49 	bl	8001d94 <MPU9250_Calibrate>

  // Initialize attitude variables
  attitudeInit(&s, &kf);
 8003502:	4934      	ldr	r1, [pc, #208]	; (80035d4 <main+0x178>)
 8003504:	4834      	ldr	r0, [pc, #208]	; (80035d8 <main+0x17c>)
 8003506:	f7fe fd01 	bl	8001f0c <attitudeInit>
  initKFMatrices(&kf);
 800350a:	4832      	ldr	r0, [pc, #200]	; (80035d4 <main+0x178>)
 800350c:	f7fe fd24 	bl	8001f58 <initKFMatrices>
  // start timer for quaternion computations
  HAL_TIM_Base_Start_IT(&htim6);
 8003510:	4832      	ldr	r0, [pc, #200]	; (80035dc <main+0x180>)
 8003512:	f001 ff7e 	bl	8005412 <HAL_TIM_Base_Start_IT>
  while (1)
  {
      if (computeAttitude) {
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <main+0x184>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0fa      	beq.n	8003516 <main+0xba>
          MPU9250_Update6DOF(&mpu_config, &mpu_data);
 8003520:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fb2d 	bl	8001b88 <MPU9250_Update6DOF>
          madgwickUpdate(&s, mpu_data.accel, mpu_data.gyro, 3);
 800352e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003532:	f103 0214 	add.w	r2, r3, #20
 8003536:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800353a:	2303      	movs	r3, #3
 800353c:	4826      	ldr	r0, [pc, #152]	; (80035d8 <main+0x17c>)
 800353e:	f7ff fcbf 	bl	8002ec0 <madgwickUpdate>
          computeAngles(&s);
 8003542:	4825      	ldr	r0, [pc, #148]	; (80035d8 <main+0x17c>)
 8003544:	f7ff f928 	bl	8002798 <computeAngles>
          normalizeGravity(&s, mpu_data.accel);
 8003548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800354c:	4619      	mov	r1, r3
 800354e:	4822      	ldr	r0, [pc, #136]	; (80035d8 <main+0x17c>)
 8003550:	f7ff fb3e 	bl	8002bd0 <normalizeGravity>
          kfUpdate(&kf, mpu_data.accel);
 8003554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003558:	4619      	mov	r1, r3
 800355a:	481e      	ldr	r0, [pc, #120]	; (80035d4 <main+0x178>)
 800355c:	f7fe fe98 	bl	8002290 <kfUpdate>
          if (num_computations >= 10) {
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <main+0x188>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b09      	cmp	r3, #9
 8003568:	d92c      	bls.n	80035c4 <main+0x168>
              // print estimated KF position
//              printf("x: %i ", (int32_t) (kf.x_mat[0]*100)); // in units of cm
//              printf("y: %i ", (int32_t) (kf.x_mat[2]*100));
//              printf("z: %i\n\r", (int32_t) (kf.x_mat[4]*100));
                printf("%i ", (int32_t) (kf.x_mat[0]*100)); // in units of cm
 800356a:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <main+0x178>)
 800356c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003570:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80035e8 <main+0x18c>
 8003574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800357c:	ee17 1a90 	vmov	r1, s15
 8003580:	481a      	ldr	r0, [pc, #104]	; (80035ec <main+0x190>)
 8003582:	f003 feef 	bl	8007364 <iprintf>
                printf("%i ", (int32_t) (kf.x_mat[2]*100));
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <main+0x178>)
 8003588:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800358c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80035e8 <main+0x18c>
 8003590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003598:	ee17 1a90 	vmov	r1, s15
 800359c:	4813      	ldr	r0, [pc, #76]	; (80035ec <main+0x190>)
 800359e:	f003 fee1 	bl	8007364 <iprintf>
                printf("%i \r\n", (int32_t) (kf.x_mat[4]*100));
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <main+0x178>)
 80035a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80035a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80035e8 <main+0x18c>
 80035ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b4:	ee17 1a90 	vmov	r1, s15
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <main+0x194>)
 80035ba:	f003 fed3 	bl	8007364 <iprintf>
//                printf("%i ", (int32_t) (mpu_data.accel[1]*10000));
//                printf("%i \r\n", (int32_t) (mpu_data.accel[2]*10000));
//                printf("gyro x: %i, ", (int32_t) (mpu_data.gyro[0]*1000));
//                printf("gyro y: %i, ", (int32_t) (mpu_data.gyro[1]*1000));
//                printf("gyro z: %i \n\r", (int32_t) (mpu_data.gyro[2]*1000));
              num_computations = 0;
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <main+0x188>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	801a      	strh	r2, [r3, #0]
          } // prints at 1 Hz
          computeAttitude = 0;
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <main+0x184>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
      if (computeAttitude) {
 80035ca:	e7a4      	b.n	8003516 <main+0xba>
 80035cc:	200000b0 	.word	0x200000b0
 80035d0:	40020800 	.word	0x40020800
 80035d4:	20000108 	.word	0x20000108
 80035d8:	20000278 	.word	0x20000278
 80035dc:	20000234 	.word	0x20000234
 80035e0:	2000009c 	.word	0x2000009c
 80035e4:	2000009e 	.word	0x2000009e
 80035e8:	42c80000 	.word	0x42c80000
 80035ec:	08009258 	.word	0x08009258
 80035f0:	0800925c 	.word	0x0800925c

080035f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b094      	sub	sp, #80	; 0x50
 80035f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	2234      	movs	r2, #52	; 0x34
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fdfe 	bl	8007204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003608:	f107 0308 	add.w	r3, r7, #8
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	4b2a      	ldr	r3, [pc, #168]	; (80036c8 <SystemClock_Config+0xd4>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <SystemClock_Config+0xd4>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <SystemClock_Config+0xd4>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003634:	2300      	movs	r3, #0
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <SystemClock_Config+0xd8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <SystemClock_Config+0xd8>)
 8003642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b20      	ldr	r3, [pc, #128]	; (80036cc <SystemClock_Config+0xd8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003654:	2302      	movs	r3, #2
 8003656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003658:	2301      	movs	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800365c:	2310      	movs	r3, #16
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003660:	2302      	movs	r3, #2
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003664:	2300      	movs	r3, #0
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003668:	2308      	movs	r3, #8
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003670:	2302      	movs	r3, #2
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003674:	2302      	movs	r3, #2
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003678:	2302      	movs	r3, #2
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f98f 	bl	80049a4 <HAL_RCC_OscConfig>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800368c:	f000 f94a 	bl	8003924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003690:	230f      	movs	r3, #15
 8003692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003694:	2302      	movs	r3, #2
 8003696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800369c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	2104      	movs	r1, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 febe 	bl	8004430 <HAL_RCC_ClockConfig>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80036ba:	f000 f933 	bl	8003924 <Error_Handler>
  }
}
 80036be:	bf00      	nop
 80036c0:	3750      	adds	r7, #80	; 0x50
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000

080036d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <MX_SPI2_Init+0x64>)
 80036d6:	4a18      	ldr	r2, [pc, #96]	; (8003738 <MX_SPI2_Init+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <MX_SPI2_Init+0x64>)
 80036dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <MX_SPI2_Init+0x64>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_SPI2_Init+0x64>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_SPI2_Init+0x64>)
 80036f0:	2202      	movs	r2, #2
 80036f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_SPI2_Init+0x64>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <MX_SPI2_Init+0x64>)
 80036fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_SPI2_Init+0x64>)
 8003704:	2228      	movs	r2, #40	; 0x28
 8003706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <MX_SPI2_Init+0x64>)
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_SPI2_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <MX_SPI2_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_SPI2_Init+0x64>)
 800371c:	220a      	movs	r2, #10
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003720:	4804      	ldr	r0, [pc, #16]	; (8003734 <MX_SPI2_Init+0x64>)
 8003722:	f001 fb99 	bl	8004e58 <HAL_SPI_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800372c:	f000 f8fa 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200000b0 	.word	0x200000b0
 8003738:	40003800 	.word	0x40003800

0800373c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003742:	463b      	mov	r3, r7
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <MX_TIM6_Init+0x64>)
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <MX_TIM6_Init+0x68>)
 800374e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 639;
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <MX_TIM6_Init+0x64>)
 8003752:	f240 227f 	movw	r2, #639	; 0x27f
 8003756:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <MX_TIM6_Init+0x64>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <MX_TIM6_Init+0x64>)
 8003760:	2263      	movs	r2, #99	; 0x63
 8003762:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <MX_TIM6_Init+0x64>)
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800376a:	480d      	ldr	r0, [pc, #52]	; (80037a0 <MX_TIM6_Init+0x64>)
 800376c:	f001 fe26 	bl	80053bc <HAL_TIM_Base_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003776:	f000 f8d5 	bl	8003924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003782:	463b      	mov	r3, r7
 8003784:	4619      	mov	r1, r3
 8003786:	4806      	ldr	r0, [pc, #24]	; (80037a0 <MX_TIM6_Init+0x64>)
 8003788:	f002 f838 	bl	80057fc <HAL_TIMEx_MasterConfigSynchronization>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003792:	f000 f8c7 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000234 	.word	0x20000234
 80037a4:	40001000 	.word	0x40001000

080037a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <MX_USART2_UART_Init+0x50>)
 80037b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037de:	4805      	ldr	r0, [pc, #20]	; (80037f4 <MX_USART2_UART_Init+0x4c>)
 80037e0:	f002 f89c 	bl	800591c <HAL_UART_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037ea:	f000 f89b 	bl	8003924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200002b8 	.word	0x200002b8
 80037f8:	40004400 	.word	0x40004400

080037fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003802:	f107 0314 	add.w	r3, r7, #20
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <MX_GPIO_Init+0xf4>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a27      	ldr	r2, [pc, #156]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <MX_GPIO_Init+0xf4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_GPIO_Init+0xf4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <MX_GPIO_Init+0xf4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8003882:	2201      	movs	r2, #1
 8003884:	2108      	movs	r1, #8
 8003886:	481b      	ldr	r0, [pc, #108]	; (80038f4 <MX_GPIO_Init+0xf8>)
 8003888:	f000 fdb8 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800388c:	2200      	movs	r2, #0
 800388e:	2120      	movs	r1, #32
 8003890:	4819      	ldr	r0, [pc, #100]	; (80038f8 <MX_GPIO_Init+0xfc>)
 8003892:	f000 fdb3 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_GPIO_Init+0x100>)
 800389e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4619      	mov	r1, r3
 80038aa:	4812      	ldr	r0, [pc, #72]	; (80038f4 <MX_GPIO_Init+0xf8>)
 80038ac:	f000 fc14 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_CS_Pin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 80038b0:	2308      	movs	r3, #8
 80038b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038bc:	2302      	movs	r3, #2
 80038be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	480b      	ldr	r0, [pc, #44]	; (80038f4 <MX_GPIO_Init+0xf8>)
 80038c8:	f000 fc06 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80038cc:	2320      	movs	r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d0:	2301      	movs	r3, #1
 80038d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MX_GPIO_Init+0xfc>)
 80038e4:	f000 fbf8 	bl	80040d8 <HAL_GPIO_Init>

}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020800 	.word	0x40020800
 80038f8:	40020000 	.word	0x40020000
 80038fc:	10210000 	.word	0x10210000

08003900 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003908:	1d39      	adds	r1, r7, #4
 800390a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800390e:	2201      	movs	r2, #1
 8003910:	4803      	ldr	r0, [pc, #12]	; (8003920 <__io_putchar+0x20>)
 8003912:	f002 f850 	bl	80059b6 <HAL_UART_Transmit>
  return ch;
 8003916:	687b      	ldr	r3, [r7, #4]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200002b8 	.word	0x200002b8

08003924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_MspInit+0x4c>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_MspInit+0x4c>)
 8003944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003948:	6453      	str	r3, [r2, #68]	; 0x44
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_MspInit+0x4c>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_MspInit+0x4c>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a08      	ldr	r2, [pc, #32]	; (8003980 <HAL_MspInit+0x4c>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_MspInit+0x4c>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003972:	2007      	movs	r0, #7
 8003974:	f000 fb6e 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800

08003984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_SPI_MspInit+0xe0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d15a      	bne.n	8003a5c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b28      	ldr	r3, [pc, #160]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_SPI_MspInit+0xe4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039fa:	2302      	movs	r3, #2
 80039fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4815      	ldr	r0, [pc, #84]	; (8003a6c <HAL_SPI_MspInit+0xe8>)
 8003a16:	f000 fb5f 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a2a:	2305      	movs	r3, #5
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	4619      	mov	r1, r3
 8003a34:	480d      	ldr	r0, [pc, #52]	; (8003a6c <HAL_SPI_MspInit+0xe8>)
 8003a36:	f000 fb4f 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	4806      	ldr	r0, [pc, #24]	; (8003a70 <HAL_SPI_MspInit+0xec>)
 8003a58:	f000 fb3e 	bl	80040d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a5c:	bf00      	nop
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40003800 	.word	0x40003800
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020800 	.word	0x40020800
 8003a70:	40020400 	.word	0x40020400

08003a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_TIM_Base_MspInit+0x48>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d115      	bne.n	8003ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8003a90:	f043 0310 	orr.w	r3, r3, #16
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2036      	movs	r0, #54	; 0x36
 8003aa8:	f000 fadf 	bl	800406a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aac:	2036      	movs	r0, #54	; 0x36
 8003aae:	f000 faf8 	bl	80040a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40001000 	.word	0x40001000
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	; (8003b48 <HAL_UART_MspInit+0x84>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d12b      	bne.n	8003b3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_UART_MspInit+0x88>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b1e:	230c      	movs	r3, #12
 8003b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b22:	2302      	movs	r3, #2
 8003b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b2e:	2307      	movs	r3, #7
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b32:	f107 0314 	add.w	r3, r7, #20
 8003b36:	4619      	mov	r1, r3
 8003b38:	4805      	ldr	r0, [pc, #20]	; (8003b50 <HAL_UART_MspInit+0x8c>)
 8003b3a:	f000 facd 	bl	80040d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b3e:	bf00      	nop
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40004400 	.word	0x40004400
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b66:	e7fe      	b.n	8003b66 <HardFault_Handler+0x4>

08003b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <MemManage_Handler+0x4>

08003b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b72:	e7fe      	b.n	8003b72 <BusFault_Handler+0x4>

08003b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <UsageFault_Handler+0x4>

08003b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba8:	f000 f942 	bl	8003e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <TIM6_DAC_IRQHandler+0x10>)
 8003bb6:	f001 fc50 	bl	800545a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000234 	.word	0x20000234

08003bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e00a      	b.n	8003bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bd6:	f3af 8000 	nop.w
 8003bda:	4601      	mov	r1, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	60ba      	str	r2, [r7, #8]
 8003be2:	b2ca      	uxtb	r2, r1
 8003be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dbf0      	blt.n	8003bd6 <_read+0x12>
	}

return len;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e009      	b.n	8003c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	60ba      	str	r2, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fe71 	bl	8003900 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	dbf1      	blt.n	8003c10 <_write+0x12>
	}
	return len;
 8003c2c:	687b      	ldr	r3, [r7, #4]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <_close>:

int _close(int file)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_isatty>:

int _isatty(int file)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	return 1;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <_sbrk+0x5c>)
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <_sbrk+0x60>)
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <_sbrk+0x64>)
 8003cbe:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <_sbrk+0x68>)
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <_sbrk+0x64>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d207      	bcs.n	8003ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cd0:	f003 fa66 	bl	80071a0 <__errno>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cde:	e009      	b.n	8003cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <_sbrk+0x64>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <_sbrk+0x64>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <_sbrk+0x64>)
 8003cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20020000 	.word	0x20020000
 8003d00:	00000400 	.word	0x00000400
 8003d04:	200000a0 	.word	0x200000a0
 8003d08:	20000300 	.word	0x20000300

08003d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <SystemInit+0x28>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <SystemInit+0x28>)
 8003d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <SystemInit+0x28>)
 8003d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d26:	609a      	str	r2, [r3, #8]
#endif
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d3e:	e003      	b.n	8003d48 <LoopCopyDataInit>

08003d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d46:	3104      	adds	r1, #4

08003d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d48:	480b      	ldr	r0, [pc, #44]	; (8003d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d50:	d3f6      	bcc.n	8003d40 <CopyDataInit>
  ldr  r2, =_sbss
 8003d52:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d54:	e002      	b.n	8003d5c <LoopFillZerobss>

08003d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d58:	f842 3b04 	str.w	r3, [r2], #4

08003d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d60:	d3f9      	bcc.n	8003d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d62:	f7ff ffd3 	bl	8003d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d66:	f003 fa21 	bl	80071ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d6a:	f7ff fb77 	bl	800345c <main>
  bx  lr    
 8003d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d74:	08009378 	.word	0x08009378
  ldr  r0, =_sdata
 8003d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d7c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003d80:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003d84:	20000300 	.word	0x20000300

08003d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d88:	e7fe      	b.n	8003d88 <ADC_IRQHandler>
	...

08003d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_Init+0x40>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <HAL_Init+0x40>)
 8003d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <HAL_Init+0x40>)
 8003da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <HAL_Init+0x40>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db4:	2003      	movs	r0, #3
 8003db6:	f000 f94d 	bl	8004054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 f808 	bl	8003dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc0:	f7ff fdb8 	bl	8003934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00

08003dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_InitTick+0x54>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_InitTick+0x58>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f965 	bl	80040be <HAL_SYSTICK_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00e      	b.n	8003e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d80a      	bhi.n	8003e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e04:	2200      	movs	r2, #0
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e0c:	f000 f92d 	bl	800406a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <HAL_InitTick+0x5c>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	20000004 	.word	0x20000004

08003e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_IncTick+0x20>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_IncTick+0x24>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_IncTick+0x24>)
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000008 	.word	0x20000008
 8003e54:	200002f8 	.word	0x200002f8

08003e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_GetTick+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	200002f8 	.word	0x200002f8

08003e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e78:	f7ff ffee 	bl	8003e58 <HAL_GetTick>
 8003e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e88:	d005      	beq.n	8003e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_Delay+0x40>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e96:	bf00      	nop
 8003e98:	f7ff ffde 	bl	8003e58 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d8f7      	bhi.n	8003e98 <HAL_Delay+0x28>
  {
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000008 	.word	0x20000008

08003eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	60d3      	str	r3, [r2, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__NVIC_GetPriorityGrouping+0x18>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 0307 	and.w	r3, r3, #7
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	db0b      	blt.n	8003f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	f003 021f 	and.w	r2, r3, #31
 8003f30:	4907      	ldr	r1, [pc, #28]	; (8003f50 <__NVIC_EnableIRQ+0x38>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2001      	movs	r0, #1
 8003f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db0a      	blt.n	8003f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	490c      	ldr	r1, [pc, #48]	; (8003fa0 <__NVIC_SetPriority+0x4c>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	440b      	add	r3, r1
 8003f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f7c:	e00a      	b.n	8003f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <__NVIC_SetPriority+0x50>)
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	440b      	add	r3, r1
 8003f92:	761a      	strb	r2, [r3, #24]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f1c3 0307 	rsb	r3, r3, #7
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf28      	it	cs
 8003fc6:	2304      	movcs	r3, #4
 8003fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d902      	bls.n	8003fd8 <NVIC_EncodePriority+0x30>
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3b03      	subs	r3, #3
 8003fd6:	e000      	b.n	8003fda <NVIC_EncodePriority+0x32>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	401a      	ands	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	43d9      	mvns	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004000:	4313      	orrs	r3, r2
         );
}
 8004002:	4618      	mov	r0, r3
 8004004:	3724      	adds	r7, #36	; 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004020:	d301      	bcc.n	8004026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004022:	2301      	movs	r3, #1
 8004024:	e00f      	b.n	8004046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <SysTick_Config+0x40>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800402e:	210f      	movs	r1, #15
 8004030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004034:	f7ff ff8e 	bl	8003f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <SysTick_Config+0x40>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <SysTick_Config+0x40>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000e010 	.word	0xe000e010

08004054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ff29 	bl	8003eb4 <__NVIC_SetPriorityGrouping>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800407c:	f7ff ff3e 	bl	8003efc <__NVIC_GetPriorityGrouping>
 8004080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff8e 	bl	8003fa8 <NVIC_EncodePriority>
 800408c:	4602      	mov	r2, r0
 800408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff5d 	bl	8003f54 <__NVIC_SetPriority>
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ff31 	bl	8003f18 <__NVIC_EnableIRQ>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ffa2 	bl	8004010 <SysTick_Config>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e165      	b.n	80043c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8154 	bne.w	80043ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d00b      	beq.n	8004132 <HAL_GPIO_Init+0x5a>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004126:	2b11      	cmp	r3, #17
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b12      	cmp	r3, #18
 8004130:	d130      	bne.n	8004194 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004168:	2201      	movs	r2, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 0201 	and.w	r2, r3, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	2203      	movs	r2, #3
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0xfc>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b12      	cmp	r3, #18
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80ae 	beq.w	80043ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x2fc>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	4a5b      	ldr	r2, [pc, #364]	; (80043d4 <HAL_GPIO_Init+0x2fc>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_GPIO_Init+0x2fc>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427a:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_GPIO_Init+0x300>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <HAL_GPIO_Init+0x304>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x21a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4d      	ldr	r2, [pc, #308]	; (80043e0 <HAL_GPIO_Init+0x308>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x216>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	; (80043e4 <HAL_GPIO_Init+0x30c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x212>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4b      	ldr	r2, [pc, #300]	; (80043e8 <HAL_GPIO_Init+0x310>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x20e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_GPIO_Init+0x314>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x20a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_GPIO_Init+0x318>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x206>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a48      	ldr	r2, [pc, #288]	; (80043f4 <HAL_GPIO_Init+0x31c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x202>
 80042d6:	2306      	movs	r3, #6
 80042d8:	e00c      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042da:	2307      	movs	r3, #7
 80042dc:	e00a      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042de:	2305      	movs	r3, #5
 80042e0:	e008      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042f2:	2300      	movs	r3, #0
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f002 0203 	and.w	r2, r2, #3
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	4093      	lsls	r3, r2
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004304:	4934      	ldr	r1, [pc, #208]	; (80043d8 <HAL_GPIO_Init+0x300>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_GPIO_Init+0x320>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004336:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <HAL_GPIO_Init+0x320>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_GPIO_Init+0x320>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_GPIO_Init+0x320>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_GPIO_Init+0x320>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_GPIO_Init+0x320>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_GPIO_Init+0x320>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b4:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <HAL_GPIO_Init+0x320>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	f67f ae96 	bls.w	80040f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c8:	bf00      	nop
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40013800 	.word	0x40013800
 80043dc:	40020000 	.word	0x40020000
 80043e0:	40020400 	.word	0x40020400
 80043e4:	40020800 	.word	0x40020800
 80043e8:	40020c00 	.word	0x40020c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40021400 	.word	0x40021400
 80043f4:	40021800 	.word	0x40021800
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0cc      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d90c      	bls.n	800446c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b8      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a58      	ldr	r2, [pc, #352]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800449c:	4b53      	ldr	r3, [pc, #332]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a8:	4b50      	ldr	r3, [pc, #320]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	494d      	ldr	r1, [pc, #308]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d044      	beq.n	8004550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d119      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e07f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d003      	beq.n	80044ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ee:	4b3f      	ldr	r3, [pc, #252]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e067      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450e:	4b37      	ldr	r3, [pc, #220]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4934      	ldr	r1, [pc, #208]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004520:	f7ff fc9a 	bl	8003e58 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	e00a      	b.n	800453e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004528:	f7ff fc96 	bl	8003e58 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e04f      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	4b2b      	ldr	r3, [pc, #172]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 020c 	and.w	r2, r3, #12
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	429a      	cmp	r2, r3
 800454e:	d1eb      	bne.n	8004528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d20c      	bcs.n	8004578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e032      	b.n	80045de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b6:	f000 f855 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 80045ba:	4601      	mov	r1, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	091b      	lsrs	r3, r3, #4
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	5cd3      	ldrb	r3, [r2, r3]
 80045ca:	fa21 f303 	lsr.w	r3, r1, r3
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fbfa 	bl	8003dd0 <HAL_InitTick>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00
 80045ec:	40023800 	.word	0x40023800
 80045f0:	08009264 	.word	0x08009264
 80045f4:	20000000 	.word	0x20000000
 80045f8:	20000004 	.word	0x20000004

080045fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCC_GetHCLKFreq+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000000 	.word	0x20000000

08004614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004618:	f7ff fff0 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 800461c:	4601      	mov	r1, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0a9b      	lsrs	r3, r3, #10
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4a03      	ldr	r2, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	08009274 	.word	0x08009274

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004640:	f7ff ffdc 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8004644:	4601      	mov	r1, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0b5b      	lsrs	r3, r3, #13
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4a03      	ldr	r2, [pc, #12]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	08009274 	.word	0x08009274

08004664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467e:	4bc6      	ldr	r3, [pc, #792]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b0c      	cmp	r3, #12
 8004688:	f200 817e 	bhi.w	8004988 <HAL_RCC_GetSysClockFreq+0x324>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_RCC_GetSysClockFreq+0x30>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046c9 	.word	0x080046c9
 8004698:	08004989 	.word	0x08004989
 800469c:	08004989 	.word	0x08004989
 80046a0:	08004989 	.word	0x08004989
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	08004989 	.word	0x08004989
 80046ac:	08004989 	.word	0x08004989
 80046b0:	08004989 	.word	0x08004989
 80046b4:	080046d5 	.word	0x080046d5
 80046b8:	08004989 	.word	0x08004989
 80046bc:	08004989 	.word	0x08004989
 80046c0:	08004989 	.word	0x08004989
 80046c4:	08004831 	.word	0x08004831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4bb4      	ldr	r3, [pc, #720]	; (800499c <HAL_RCC_GetSysClockFreq+0x338>)
 80046ca:	613b      	str	r3, [r7, #16]
       break;
 80046cc:	e15f      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ce:	4bb4      	ldr	r3, [pc, #720]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x33c>)
 80046d0:	613b      	str	r3, [r7, #16]
      break;
 80046d2:	e15c      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d4:	4bb0      	ldr	r3, [pc, #704]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046de:	4bae      	ldr	r3, [pc, #696]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d04a      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ea:	4bab      	ldr	r3, [pc, #684]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	f04f 0400 	mov.w	r4, #0
 80046f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	ea03 0501 	and.w	r5, r3, r1
 8004700:	ea04 0602 	and.w	r6, r4, r2
 8004704:	4629      	mov	r1, r5
 8004706:	4632      	mov	r2, r6
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	f04f 0400 	mov.w	r4, #0
 8004710:	0154      	lsls	r4, r2, #5
 8004712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004716:	014b      	lsls	r3, r1, #5
 8004718:	4619      	mov	r1, r3
 800471a:	4622      	mov	r2, r4
 800471c:	1b49      	subs	r1, r1, r5
 800471e:	eb62 0206 	sbc.w	r2, r2, r6
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	f04f 0400 	mov.w	r4, #0
 800472a:	0194      	lsls	r4, r2, #6
 800472c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004730:	018b      	lsls	r3, r1, #6
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	eb64 0402 	sbc.w	r4, r4, r2
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	00e2      	lsls	r2, r4, #3
 8004742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004746:	00d9      	lsls	r1, r3, #3
 8004748:	460b      	mov	r3, r1
 800474a:	4614      	mov	r4, r2
 800474c:	195b      	adds	r3, r3, r5
 800474e:	eb44 0406 	adc.w	r4, r4, r6
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	0262      	lsls	r2, r4, #9
 800475c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004760:	0259      	lsls	r1, r3, #9
 8004762:	460b      	mov	r3, r1
 8004764:	4614      	mov	r4, r2
 8004766:	4618      	mov	r0, r3
 8004768:	4621      	mov	r1, r4
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	461a      	mov	r2, r3
 8004772:	4623      	mov	r3, r4
 8004774:	f7fc fa58 	bl	8000c28 <__aeabi_uldivmod>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e049      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	ea03 0501 	and.w	r5, r3, r1
 8004796:	ea04 0602 	and.w	r6, r4, r2
 800479a:	4629      	mov	r1, r5
 800479c:	4632      	mov	r2, r6
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	f04f 0400 	mov.w	r4, #0
 80047a6:	0154      	lsls	r4, r2, #5
 80047a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047ac:	014b      	lsls	r3, r1, #5
 80047ae:	4619      	mov	r1, r3
 80047b0:	4622      	mov	r2, r4
 80047b2:	1b49      	subs	r1, r1, r5
 80047b4:	eb62 0206 	sbc.w	r2, r2, r6
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	f04f 0400 	mov.w	r4, #0
 80047c0:	0194      	lsls	r4, r2, #6
 80047c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047c6:	018b      	lsls	r3, r1, #6
 80047c8:	1a5b      	subs	r3, r3, r1
 80047ca:	eb64 0402 	sbc.w	r4, r4, r2
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047dc:	00d9      	lsls	r1, r3, #3
 80047de:	460b      	mov	r3, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	195b      	adds	r3, r3, r5
 80047e4:	eb44 0406 	adc.w	r4, r4, r6
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	02a2      	lsls	r2, r4, #10
 80047f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047f6:	0299      	lsls	r1, r3, #10
 80047f8:	460b      	mov	r3, r1
 80047fa:	4614      	mov	r4, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	4621      	mov	r1, r4
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	461a      	mov	r2, r3
 8004808:	4623      	mov	r3, r4
 800480a:	f7fc fa0d 	bl	8000c28 <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004814:	4b60      	ldr	r3, [pc, #384]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	3301      	adds	r3, #1
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	613b      	str	r3, [r7, #16]
      break;
 800482e:	e0ae      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483a:	4b57      	ldr	r3, [pc, #348]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04a      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b54      	ldr	r3, [pc, #336]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	ea03 0501 	and.w	r5, r3, r1
 800485c:	ea04 0602 	and.w	r6, r4, r2
 8004860:	4629      	mov	r1, r5
 8004862:	4632      	mov	r2, r6
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	0154      	lsls	r4, r2, #5
 800486e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	4619      	mov	r1, r3
 8004876:	4622      	mov	r2, r4
 8004878:	1b49      	subs	r1, r1, r5
 800487a:	eb62 0206 	sbc.w	r2, r2, r6
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f04f 0400 	mov.w	r4, #0
 8004886:	0194      	lsls	r4, r2, #6
 8004888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800488c:	018b      	lsls	r3, r1, #6
 800488e:	1a5b      	subs	r3, r3, r1
 8004890:	eb64 0402 	sbc.w	r4, r4, r2
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	00e2      	lsls	r2, r4, #3
 800489e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048a2:	00d9      	lsls	r1, r3, #3
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	195b      	adds	r3, r3, r5
 80048aa:	eb44 0406 	adc.w	r4, r4, r6
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	0262      	lsls	r2, r4, #9
 80048b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048bc:	0259      	lsls	r1, r3, #9
 80048be:	460b      	mov	r3, r1
 80048c0:	4614      	mov	r4, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	4621      	mov	r1, r4
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	f7fc f9aa 	bl	8000c28 <__aeabi_uldivmod>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e049      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	f04f 0400 	mov.w	r4, #0
 80048e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	ea03 0501 	and.w	r5, r3, r1
 80048f2:	ea04 0602 	and.w	r6, r4, r2
 80048f6:	4629      	mov	r1, r5
 80048f8:	4632      	mov	r2, r6
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	f04f 0400 	mov.w	r4, #0
 8004902:	0154      	lsls	r4, r2, #5
 8004904:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004908:	014b      	lsls	r3, r1, #5
 800490a:	4619      	mov	r1, r3
 800490c:	4622      	mov	r2, r4
 800490e:	1b49      	subs	r1, r1, r5
 8004910:	eb62 0206 	sbc.w	r2, r2, r6
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	f04f 0400 	mov.w	r4, #0
 800491c:	0194      	lsls	r4, r2, #6
 800491e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004922:	018b      	lsls	r3, r1, #6
 8004924:	1a5b      	subs	r3, r3, r1
 8004926:	eb64 0402 	sbc.w	r4, r4, r2
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004938:	00d9      	lsls	r1, r3, #3
 800493a:	460b      	mov	r3, r1
 800493c:	4614      	mov	r4, r2
 800493e:	195b      	adds	r3, r3, r5
 8004940:	eb44 0406 	adc.w	r4, r4, r6
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	02a2      	lsls	r2, r4, #10
 800494e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004952:	0299      	lsls	r1, r3, #10
 8004954:	460b      	mov	r3, r1
 8004956:	4614      	mov	r4, r2
 8004958:	4618      	mov	r0, r3
 800495a:	4621      	mov	r1, r4
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	461a      	mov	r2, r3
 8004964:	4623      	mov	r3, r4
 8004966:	f7fc f95f 	bl	8000c28 <__aeabi_uldivmod>
 800496a:	4603      	mov	r3, r0
 800496c:	460c      	mov	r4, r1
 800496e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_GetSysClockFreq+0x334>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0f1b      	lsrs	r3, r3, #28
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	613b      	str	r3, [r7, #16]
      break;
 8004986:	e002      	b.n	800498e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <HAL_RCC_GetSysClockFreq+0x338>)
 800498a:	613b      	str	r3, [r7, #16]
      break;
 800498c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498e:	693b      	ldr	r3, [r7, #16]
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	007a1200 	.word	0x007a1200

080049a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049be:	4b95      	ldr	r3, [pc, #596]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d019      	beq.n	80049fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ca:	4b92      	ldr	r3, [pc, #584]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049d6:	4b8f      	ldr	r3, [pc, #572]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e2:	d00c      	beq.n	80049fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e4:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d112      	bne.n	8004a16 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f0:	4b88      	ldr	r3, [pc, #544]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fe:	4b85      	ldr	r3, [pc, #532]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d05b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x11e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d157      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e216      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCC_OscConfig+0x8a>
 8004a20:	4b7c      	ldr	r3, [pc, #496]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7b      	ldr	r2, [pc, #492]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e01d      	b.n	8004a6a <HAL_RCC_OscConfig+0xc6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_OscConfig+0xae>
 8004a38:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a75      	ldr	r2, [pc, #468]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b73      	ldr	r3, [pc, #460]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a72      	ldr	r2, [pc, #456]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	e00b      	b.n	8004a6a <HAL_RCC_OscConfig+0xc6>
 8004a52:	4b70      	ldr	r3, [pc, #448]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6f      	ldr	r2, [pc, #444]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6c      	ldr	r2, [pc, #432]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d013      	beq.n	8004a9a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7ff f9f1 	bl	8003e58 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7a:	f7ff f9ed 	bl	8003e58 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1db      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8c:	4b61      	ldr	r3, [pc, #388]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0xd6>
 8004a98:	e014      	b.n	8004ac4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7ff f9dd 	bl	8003e58 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa2:	f7ff f9d9 	bl	8003e58 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b64      	cmp	r3, #100	; 0x64
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1c7      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab4:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0xfe>
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d06f      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ad0:	4b50      	ldr	r3, [pc, #320]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004adc:	4b4d      	ldr	r3, [pc, #308]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ae8:	4b4a      	ldr	r3, [pc, #296]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af4:	4b47      	ldr	r3, [pc, #284]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d11c      	bne.n	8004b3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b00:	4b44      	ldr	r3, [pc, #272]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d116      	bne.n	8004b3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0c:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x180>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e18f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4938      	ldr	r1, [pc, #224]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b38:	e03a      	b.n	8004bb0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7ff f986 	bl	8003e58 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7ff f982 	bl	8003e58 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e170      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4925      	ldr	r1, [pc, #148]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	e015      	b.n	8004bb0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7ff f965 	bl	8003e58 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7ff f961 	bl	8003e58 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e14f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d037      	beq.n	8004c2c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <HAL_RCC_OscConfig+0x278>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7ff f945 	bl	8003e58 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7ff f941 	bl	8003e58 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e12f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x22e>
 8004bf0:	e01c      	b.n	8004c2c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_OscConfig+0x278>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7ff f92e 	bl	8003e58 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfe:	e00f      	b.n	8004c20 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7ff f92a 	bl	8003e58 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d908      	bls.n	8004c20 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e118      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	42470000 	.word	0x42470000
 8004c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b8a      	ldr	r3, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e9      	bne.n	8004c00 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8097 	beq.w	8004d68 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b83      	ldr	r3, [pc, #524]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	4b7f      	ldr	r3, [pc, #508]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a7e      	ldr	r2, [pc, #504]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	4b7c      	ldr	r3, [pc, #496]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b79      	ldr	r3, [pc, #484]	; (8004e50 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <HAL_RCC_OscConfig+0x4ac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a75      	ldr	r2, [pc, #468]	; (8004e50 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7ff f8e9 	bl	8003e58 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7ff f8e5 	bl	8003e58 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e0d3      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x31a>
 8004cb0:	4b66      	ldr	r3, [pc, #408]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	4a65      	ldr	r2, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x354>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x33c>
 8004cc6:	4b61      	ldr	r3, [pc, #388]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a60      	ldr	r2, [pc, #384]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd2:	4b5e      	ldr	r3, [pc, #376]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cde:	e00b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x354>
 8004ce0:	4b5a      	ldr	r3, [pc, #360]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a59      	ldr	r2, [pc, #356]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d015      	beq.n	8004d2c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7ff f8aa 	bl	8003e58 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7ff f8a6 	bl	8003e58 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e092      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	4b4b      	ldr	r3, [pc, #300]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0ee      	beq.n	8004d08 <HAL_RCC_OscConfig+0x364>
 8004d2a:	e014      	b.n	8004d56 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7ff f894 	bl	8003e58 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7ff f890 	bl	8003e58 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e07c      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ee      	bne.n	8004d34 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	4a3a      	ldr	r2, [pc, #232]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d068      	beq.n	8004e42 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d70:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d060      	beq.n	8004e3e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d145      	bne.n	8004e10 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d84:	4b33      	ldr	r3, [pc, #204]	; (8004e54 <HAL_RCC_OscConfig+0x4b0>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7ff f865 	bl	8003e58 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d92:	f7ff f861 	bl	8003e58 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e04f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da4:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	019b      	lsls	r3, r3, #6
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	491b      	ldr	r1, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <HAL_RCC_OscConfig+0x4b0>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7ff f836 	bl	8003e58 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df0:	f7ff f832 	bl	8003e58 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e020      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x44c>
 8004e0e:	e018      	b.n	8004e42 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_RCC_OscConfig+0x4b0>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7ff f81f 	bl	8003e58 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7ff f81b 	bl	8003e58 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e009      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_OscConfig+0x4a8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x47a>
 8004e3c:	e001      	b.n	8004e42 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42470060 	.word	0x42470060

08004e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e056      	b.n	8004f18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fe fd7d 	bl	8003984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	ea42 0103 	orr.w	r1, r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	0c1b      	lsrs	r3, r3, #16
 8004ee8:	f003 0104 	and.w	r1, r3, #4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x26>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e18a      	b.n	800525c <HAL_SPI_TransmitReceive+0x33c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f4e:	f7fe ff83 	bl	8003e58 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d00f      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x70>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f76:	d107      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x68>
 8004f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d003      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f8e:	e15b      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x82>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x82>
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fa8:	e14e      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d003      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	887a      	ldrh	r2, [r7, #2]
 8004fe6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d007      	beq.n	8005012 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501a:	d178      	bne.n	800510e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_TransmitReceive+0x10a>
 8005024:	8b7b      	ldrh	r3, [r7, #26]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d166      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	881a      	ldrh	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	1c9a      	adds	r2, r3, #2
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504e:	e053      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d11b      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x176>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d016      	beq.n	8005096 <HAL_SPI_TransmitReceive+0x176>
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d113      	bne.n	8005096 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	881a      	ldrh	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d119      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x1b8>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	b292      	uxth	r2, r2
 80050ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	1c9a      	adds	r2, r3, #2
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050d8:	f7fe febe 	bl	8003e58 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d807      	bhi.n	80050f8 <HAL_SPI_TransmitReceive+0x1d8>
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ee:	d003      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050f6:	e0a7      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1a6      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x130>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1a1      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x130>
 800510c:	e07c      	b.n	8005208 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_TransmitReceive+0x1fc>
 8005116:	8b7b      	ldrh	r3, [r7, #26]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d16b      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005142:	e057      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d11c      	bne.n	800518c <HAL_SPI_TransmitReceive+0x26c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d017      	beq.n	800518c <HAL_SPI_TransmitReceive+0x26c>
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d114      	bne.n	800518c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d119      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x2ae>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d014      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ca:	2301      	movs	r3, #1
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051ce:	f7fe fe43 	bl	8003e58 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051da:	429a      	cmp	r2, r3
 80051dc:	d803      	bhi.n	80051e6 <HAL_SPI_TransmitReceive+0x2c6>
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e4:	d102      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x2cc>
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051f2:	e029      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1a2      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x224>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d19d      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f893 	bl	8005338 <SPI_EndRxTxTransaction>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005224:	e010      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	e000      	b.n	8005248 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005246:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005258:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800525c:	4618      	mov	r0, r3
 800525e:	3730      	adds	r7, #48	; 0x30
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005274:	e04c      	b.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527c:	d048      	beq.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800527e:	f7fe fdeb 	bl	8003e58 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d902      	bls.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d13d      	bne.n	8005310 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ac:	d111      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b6:	d004      	beq.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c0:	d107      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052da:	d10f      	bne.n	80052fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d1a3      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <SPI_EndRxTxTransaction+0x7c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <SPI_EndRxTxTransaction+0x80>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0d5b      	lsrs	r3, r3, #21
 8005350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d112      	bne.n	800538a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	2180      	movs	r1, #128	; 0x80
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff ff78 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e00f      	b.n	80053aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3b01      	subs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d0f2      	beq.n	800538a <SPI_EndRxTxTransaction+0x52>
 80053a4:	e000      	b.n	80053a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80053a6:	bf00      	nop
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000000 	.word	0x20000000
 80053b8:	165e9f81 	.word	0x165e9f81

080053bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e01d      	b.n	800540a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fb46 	bl	8003a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 f95e 	bl	80056bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d007      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b02      	cmp	r3, #2
 800546e:	d122      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d11b      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f06f 0202 	mvn.w	r2, #2
 8005486:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8ee 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 80054a2:	e005      	b.n	80054b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f8e0 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8f1 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d122      	bne.n	800550a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d11b      	bne.n	800550a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f06f 0204 	mvn.w	r2, #4
 80054da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8c4 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 80054f6:	e005      	b.n	8005504 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f8b6 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8c7 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d122      	bne.n	800555e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b08      	cmp	r3, #8
 8005524:	d11b      	bne.n	800555e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0208 	mvn.w	r2, #8
 800552e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2204      	movs	r2, #4
 8005534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f89a 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 800554a:	e005      	b.n	8005558 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f88c 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f89d 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b10      	cmp	r3, #16
 800556a:	d122      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b10      	cmp	r3, #16
 8005578:	d11b      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0210 	mvn.w	r2, #16
 8005582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2208      	movs	r2, #8
 8005588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f870 	bl	800567e <HAL_TIM_IC_CaptureCallback>
 800559e:	e005      	b.n	80055ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f862 	bl	800566a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f873 	bl	8005692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10e      	bne.n	80055de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d107      	bne.n	80055de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f06f 0201 	mvn.w	r2, #1
 80055d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fd ff27 	bl	800342c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f97f 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10e      	bne.n	8005636 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f838 	bl	80056a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b20      	cmp	r3, #32
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0220 	mvn.w	r2, #32
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f949 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a40      	ldr	r2, [pc, #256]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d013      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056da:	d00f      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3d      	ldr	r2, [pc, #244]	; (80057d4 <TIM_Base_SetConfig+0x118>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00b      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <TIM_Base_SetConfig+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d007      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <TIM_Base_SetConfig+0x120>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3a      	ldr	r2, [pc, #232]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d02b      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d027      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <TIM_Base_SetConfig+0x118>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d023      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2b      	ldr	r2, [pc, #172]	; (80057d8 <TIM_Base_SetConfig+0x11c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01f      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <TIM_Base_SetConfig+0x120>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <TIM_Base_SetConfig+0x128>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <TIM_Base_SetConfig+0x12c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <TIM_Base_SetConfig+0x134>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a24      	ldr	r2, [pc, #144]	; (80057f4 <TIM_Base_SetConfig+0x138>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <TIM_Base_SetConfig+0x13c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <TIM_Base_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_Base_SetConfig+0xf8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <TIM_Base_SetConfig+0x124>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	615a      	str	r2, [r3, #20]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40014000 	.word	0x40014000
 80057e8:	40014400 	.word	0x40014400
 80057ec:	40014800 	.word	0x40014800
 80057f0:	40001800 	.word	0x40001800
 80057f4:	40001c00 	.word	0x40001c00
 80057f8:	40002000 	.word	0x40002000

080057fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e05a      	b.n	80058ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d01d      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d10c      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40001800 	.word	0x40001800

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e03f      	b.n	80059ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fe f8be 	bl	8003ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	; 0x24
 800594c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800595e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f90b 	bl	8005b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b088      	sub	sp, #32
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	f040 8083 	bne.w	8005ade <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Transmit+0x2e>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e07b      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Transmit+0x40>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e074      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2221      	movs	r2, #33	; 0x21
 8005a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a0c:	f7fe fa24 	bl	8003e58 <HAL_GetTick>
 8005a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a26:	e042      	b.n	8005aae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	d122      	bne.n	8005a86 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2180      	movs	r1, #128	; 0x80
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f84c 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e042      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3302      	adds	r3, #2
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	e017      	b.n	8005aae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	e013      	b.n	8005aae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f829 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e01f      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	60ba      	str	r2, [r7, #8]
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1b7      	bne.n	8005a28 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2140      	movs	r1, #64	; 0x40
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f810 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af8:	e02c      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b00:	d028      	beq.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b08:	f7fe f9a6 	bl	8003e58 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d21d      	bcs.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e00f      	b.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d0c3      	beq.n	8005afa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005bbe:	f023 030c 	bic.w	r3, r3, #12
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bea:	f040 818b 	bne.w	8005f04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4ac1      	ldr	r2, [pc, #772]	; (8005ef8 <UART_SetConfig+0x37c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d005      	beq.n	8005c04 <UART_SetConfig+0x88>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4abf      	ldr	r2, [pc, #764]	; (8005efc <UART_SetConfig+0x380>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f040 80bd 	bne.w	8005d7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fd1a 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	461d      	mov	r5, r3
 8005c0e:	f04f 0600 	mov.w	r6, #0
 8005c12:	46a8      	mov	r8, r5
 8005c14:	46b1      	mov	r9, r6
 8005c16:	eb18 0308 	adds.w	r3, r8, r8
 8005c1a:	eb49 0409 	adc.w	r4, r9, r9
 8005c1e:	4698      	mov	r8, r3
 8005c20:	46a1      	mov	r9, r4
 8005c22:	eb18 0805 	adds.w	r8, r8, r5
 8005c26:	eb49 0906 	adc.w	r9, r9, r6
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c3e:	4688      	mov	r8, r1
 8005c40:	4691      	mov	r9, r2
 8005c42:	eb18 0005 	adds.w	r0, r8, r5
 8005c46:	eb49 0106 	adc.w	r1, r9, r6
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	461d      	mov	r5, r3
 8005c50:	f04f 0600 	mov.w	r6, #0
 8005c54:	196b      	adds	r3, r5, r5
 8005c56:	eb46 0406 	adc.w	r4, r6, r6
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	f7fa ffe3 	bl	8000c28 <__aeabi_uldivmod>
 8005c62:	4603      	mov	r3, r0
 8005c64:	460c      	mov	r4, r1
 8005c66:	461a      	mov	r2, r3
 8005c68:	4ba5      	ldr	r3, [pc, #660]	; (8005f00 <UART_SetConfig+0x384>)
 8005c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	461d      	mov	r5, r3
 8005c78:	f04f 0600 	mov.w	r6, #0
 8005c7c:	46a9      	mov	r9, r5
 8005c7e:	46b2      	mov	sl, r6
 8005c80:	eb19 0309 	adds.w	r3, r9, r9
 8005c84:	eb4a 040a 	adc.w	r4, sl, sl
 8005c88:	4699      	mov	r9, r3
 8005c8a:	46a2      	mov	sl, r4
 8005c8c:	eb19 0905 	adds.w	r9, r9, r5
 8005c90:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca8:	4689      	mov	r9, r1
 8005caa:	4692      	mov	sl, r2
 8005cac:	eb19 0005 	adds.w	r0, r9, r5
 8005cb0:	eb4a 0106 	adc.w	r1, sl, r6
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	461d      	mov	r5, r3
 8005cba:	f04f 0600 	mov.w	r6, #0
 8005cbe:	196b      	adds	r3, r5, r5
 8005cc0:	eb46 0406 	adc.w	r4, r6, r6
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	f7fa ffae 	bl	8000c28 <__aeabi_uldivmod>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b8b      	ldr	r3, [pc, #556]	; (8005f00 <UART_SetConfig+0x384>)
 8005cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	2164      	movs	r1, #100	; 0x64
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	3332      	adds	r3, #50	; 0x32
 8005ce6:	4a86      	ldr	r2, [pc, #536]	; (8005f00 <UART_SetConfig+0x384>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cf4:	4498      	add	r8, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	f04f 0600 	mov.w	r6, #0
 8005cfe:	46a9      	mov	r9, r5
 8005d00:	46b2      	mov	sl, r6
 8005d02:	eb19 0309 	adds.w	r3, r9, r9
 8005d06:	eb4a 040a 	adc.w	r4, sl, sl
 8005d0a:	4699      	mov	r9, r3
 8005d0c:	46a2      	mov	sl, r4
 8005d0e:	eb19 0905 	adds.w	r9, r9, r5
 8005d12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d16:	f04f 0100 	mov.w	r1, #0
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d2a:	4689      	mov	r9, r1
 8005d2c:	4692      	mov	sl, r2
 8005d2e:	eb19 0005 	adds.w	r0, r9, r5
 8005d32:	eb4a 0106 	adc.w	r1, sl, r6
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	f04f 0600 	mov.w	r6, #0
 8005d40:	196b      	adds	r3, r5, r5
 8005d42:	eb46 0406 	adc.w	r4, r6, r6
 8005d46:	461a      	mov	r2, r3
 8005d48:	4623      	mov	r3, r4
 8005d4a:	f7fa ff6d 	bl	8000c28 <__aeabi_uldivmod>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	461a      	mov	r2, r3
 8005d54:	4b6a      	ldr	r3, [pc, #424]	; (8005f00 <UART_SetConfig+0x384>)
 8005d56:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2164      	movs	r1, #100	; 0x64
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	3332      	adds	r3, #50	; 0x32
 8005d68:	4a65      	ldr	r2, [pc, #404]	; (8005f00 <UART_SetConfig+0x384>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	f003 0207 	and.w	r2, r3, #7
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4442      	add	r2, r8
 8005d7a:	609a      	str	r2, [r3, #8]
 8005d7c:	e26f      	b.n	800625e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d7e:	f7fe fc49 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8005d82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	461d      	mov	r5, r3
 8005d88:	f04f 0600 	mov.w	r6, #0
 8005d8c:	46a8      	mov	r8, r5
 8005d8e:	46b1      	mov	r9, r6
 8005d90:	eb18 0308 	adds.w	r3, r8, r8
 8005d94:	eb49 0409 	adc.w	r4, r9, r9
 8005d98:	4698      	mov	r8, r3
 8005d9a:	46a1      	mov	r9, r4
 8005d9c:	eb18 0805 	adds.w	r8, r8, r5
 8005da0:	eb49 0906 	adc.w	r9, r9, r6
 8005da4:	f04f 0100 	mov.w	r1, #0
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005db0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005db4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005db8:	4688      	mov	r8, r1
 8005dba:	4691      	mov	r9, r2
 8005dbc:	eb18 0005 	adds.w	r0, r8, r5
 8005dc0:	eb49 0106 	adc.w	r1, r9, r6
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	461d      	mov	r5, r3
 8005dca:	f04f 0600 	mov.w	r6, #0
 8005dce:	196b      	adds	r3, r5, r5
 8005dd0:	eb46 0406 	adc.w	r4, r6, r6
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	f7fa ff26 	bl	8000c28 <__aeabi_uldivmod>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <UART_SetConfig+0x384>)
 8005de4:	fba3 2302 	umull	r2, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	461d      	mov	r5, r3
 8005df2:	f04f 0600 	mov.w	r6, #0
 8005df6:	46a9      	mov	r9, r5
 8005df8:	46b2      	mov	sl, r6
 8005dfa:	eb19 0309 	adds.w	r3, r9, r9
 8005dfe:	eb4a 040a 	adc.w	r4, sl, sl
 8005e02:	4699      	mov	r9, r3
 8005e04:	46a2      	mov	sl, r4
 8005e06:	eb19 0905 	adds.w	r9, r9, r5
 8005e0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e0e:	f04f 0100 	mov.w	r1, #0
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e22:	4689      	mov	r9, r1
 8005e24:	4692      	mov	sl, r2
 8005e26:	eb19 0005 	adds.w	r0, r9, r5
 8005e2a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	461d      	mov	r5, r3
 8005e34:	f04f 0600 	mov.w	r6, #0
 8005e38:	196b      	adds	r3, r5, r5
 8005e3a:	eb46 0406 	adc.w	r4, r6, r6
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4623      	mov	r3, r4
 8005e42:	f7fa fef1 	bl	8000c28 <__aeabi_uldivmod>
 8005e46:	4603      	mov	r3, r0
 8005e48:	460c      	mov	r4, r1
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <UART_SetConfig+0x384>)
 8005e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	2164      	movs	r1, #100	; 0x64
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	3332      	adds	r3, #50	; 0x32
 8005e60:	4a27      	ldr	r2, [pc, #156]	; (8005f00 <UART_SetConfig+0x384>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e6e:	4498      	add	r8, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	461d      	mov	r5, r3
 8005e74:	f04f 0600 	mov.w	r6, #0
 8005e78:	46a9      	mov	r9, r5
 8005e7a:	46b2      	mov	sl, r6
 8005e7c:	eb19 0309 	adds.w	r3, r9, r9
 8005e80:	eb4a 040a 	adc.w	r4, sl, sl
 8005e84:	4699      	mov	r9, r3
 8005e86:	46a2      	mov	sl, r4
 8005e88:	eb19 0905 	adds.w	r9, r9, r5
 8005e8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ea0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ea4:	4689      	mov	r9, r1
 8005ea6:	4692      	mov	sl, r2
 8005ea8:	eb19 0005 	adds.w	r0, r9, r5
 8005eac:	eb4a 0106 	adc.w	r1, sl, r6
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	461d      	mov	r5, r3
 8005eb6:	f04f 0600 	mov.w	r6, #0
 8005eba:	196b      	adds	r3, r5, r5
 8005ebc:	eb46 0406 	adc.w	r4, r6, r6
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	f7fa feb0 	bl	8000c28 <__aeabi_uldivmod>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <UART_SetConfig+0x384>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	; 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a07      	ldr	r2, [pc, #28]	; (8005f00 <UART_SetConfig+0x384>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 0207 	and.w	r2, r3, #7
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4442      	add	r2, r8
 8005ef4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ef6:	e1b2      	b.n	800625e <UART_SetConfig+0x6e2>
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	40011400 	.word	0x40011400
 8005f00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4ad7      	ldr	r2, [pc, #860]	; (8006268 <UART_SetConfig+0x6ec>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d005      	beq.n	8005f1a <UART_SetConfig+0x39e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4ad6      	ldr	r2, [pc, #856]	; (800626c <UART_SetConfig+0x6f0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f040 80d1 	bne.w	80060bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f1a:	f7fe fb8f 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005f1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	469a      	mov	sl, r3
 8005f24:	f04f 0b00 	mov.w	fp, #0
 8005f28:	46d0      	mov	r8, sl
 8005f2a:	46d9      	mov	r9, fp
 8005f2c:	eb18 0308 	adds.w	r3, r8, r8
 8005f30:	eb49 0409 	adc.w	r4, r9, r9
 8005f34:	4698      	mov	r8, r3
 8005f36:	46a1      	mov	r9, r4
 8005f38:	eb18 080a 	adds.w	r8, r8, sl
 8005f3c:	eb49 090b 	adc.w	r9, r9, fp
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f54:	4688      	mov	r8, r1
 8005f56:	4691      	mov	r9, r2
 8005f58:	eb1a 0508 	adds.w	r5, sl, r8
 8005f5c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	f04f 0400 	mov.w	r4, #0
 8005f72:	0094      	lsls	r4, r2, #2
 8005f74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f78:	008b      	lsls	r3, r1, #2
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4631      	mov	r1, r6
 8005f82:	f7fa fe51 	bl	8000c28 <__aeabi_uldivmod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4bb8      	ldr	r3, [pc, #736]	; (8006270 <UART_SetConfig+0x6f4>)
 8005f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	469b      	mov	fp, r3
 8005f9c:	f04f 0c00 	mov.w	ip, #0
 8005fa0:	46d9      	mov	r9, fp
 8005fa2:	46e2      	mov	sl, ip
 8005fa4:	eb19 0309 	adds.w	r3, r9, r9
 8005fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fac:	4699      	mov	r9, r3
 8005fae:	46a2      	mov	sl, r4
 8005fb0:	eb19 090b 	adds.w	r9, r9, fp
 8005fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fcc:	4689      	mov	r9, r1
 8005fce:	4692      	mov	sl, r2
 8005fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8005fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	f04f 0400 	mov.w	r4, #0
 8005fea:	0094      	lsls	r4, r2, #2
 8005fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ff0:	008b      	lsls	r3, r1, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	f7fa fe15 	bl	8000c28 <__aeabi_uldivmod>
 8005ffe:	4603      	mov	r3, r0
 8006000:	460c      	mov	r4, r1
 8006002:	461a      	mov	r2, r3
 8006004:	4b9a      	ldr	r3, [pc, #616]	; (8006270 <UART_SetConfig+0x6f4>)
 8006006:	fba3 1302 	umull	r1, r3, r3, r2
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	2164      	movs	r1, #100	; 0x64
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	3332      	adds	r3, #50	; 0x32
 8006018:	4a95      	ldr	r2, [pc, #596]	; (8006270 <UART_SetConfig+0x6f4>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006024:	4498      	add	r8, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	469b      	mov	fp, r3
 800602a:	f04f 0c00 	mov.w	ip, #0
 800602e:	46d9      	mov	r9, fp
 8006030:	46e2      	mov	sl, ip
 8006032:	eb19 0309 	adds.w	r3, r9, r9
 8006036:	eb4a 040a 	adc.w	r4, sl, sl
 800603a:	4699      	mov	r9, r3
 800603c:	46a2      	mov	sl, r4
 800603e:	eb19 090b 	adds.w	r9, r9, fp
 8006042:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006052:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006056:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800605a:	4689      	mov	r9, r1
 800605c:	4692      	mov	sl, r2
 800605e:	eb1b 0509 	adds.w	r5, fp, r9
 8006062:	eb4c 060a 	adc.w	r6, ip, sl
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4619      	mov	r1, r3
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f04f 0400 	mov.w	r4, #0
 8006078:	0094      	lsls	r4, r2, #2
 800607a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800607e:	008b      	lsls	r3, r1, #2
 8006080:	461a      	mov	r2, r3
 8006082:	4623      	mov	r3, r4
 8006084:	4628      	mov	r0, r5
 8006086:	4631      	mov	r1, r6
 8006088:	f7fa fdce 	bl	8000c28 <__aeabi_uldivmod>
 800608c:	4603      	mov	r3, r0
 800608e:	460c      	mov	r4, r1
 8006090:	461a      	mov	r2, r3
 8006092:	4b77      	ldr	r3, [pc, #476]	; (8006270 <UART_SetConfig+0x6f4>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	2164      	movs	r1, #100	; 0x64
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	3332      	adds	r3, #50	; 0x32
 80060a6:	4a72      	ldr	r2, [pc, #456]	; (8006270 <UART_SetConfig+0x6f4>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4442      	add	r2, r8
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	e0d0      	b.n	800625e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe faaa 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 80060c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	469a      	mov	sl, r3
 80060c6:	f04f 0b00 	mov.w	fp, #0
 80060ca:	46d0      	mov	r8, sl
 80060cc:	46d9      	mov	r9, fp
 80060ce:	eb18 0308 	adds.w	r3, r8, r8
 80060d2:	eb49 0409 	adc.w	r4, r9, r9
 80060d6:	4698      	mov	r8, r3
 80060d8:	46a1      	mov	r9, r4
 80060da:	eb18 080a 	adds.w	r8, r8, sl
 80060de:	eb49 090b 	adc.w	r9, r9, fp
 80060e2:	f04f 0100 	mov.w	r1, #0
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060f6:	4688      	mov	r8, r1
 80060f8:	4691      	mov	r9, r2
 80060fa:	eb1a 0508 	adds.w	r5, sl, r8
 80060fe:	eb4b 0609 	adc.w	r6, fp, r9
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	f04f 0400 	mov.w	r4, #0
 8006114:	0094      	lsls	r4, r2, #2
 8006116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800611a:	008b      	lsls	r3, r1, #2
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	4628      	mov	r0, r5
 8006122:	4631      	mov	r1, r6
 8006124:	f7fa fd80 	bl	8000c28 <__aeabi_uldivmod>
 8006128:	4603      	mov	r3, r0
 800612a:	460c      	mov	r4, r1
 800612c:	461a      	mov	r2, r3
 800612e:	4b50      	ldr	r3, [pc, #320]	; (8006270 <UART_SetConfig+0x6f4>)
 8006130:	fba3 2302 	umull	r2, r3, r3, r2
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	469b      	mov	fp, r3
 800613e:	f04f 0c00 	mov.w	ip, #0
 8006142:	46d9      	mov	r9, fp
 8006144:	46e2      	mov	sl, ip
 8006146:	eb19 0309 	adds.w	r3, r9, r9
 800614a:	eb4a 040a 	adc.w	r4, sl, sl
 800614e:	4699      	mov	r9, r3
 8006150:	46a2      	mov	sl, r4
 8006152:	eb19 090b 	adds.w	r9, r9, fp
 8006156:	eb4a 0a0c 	adc.w	sl, sl, ip
 800615a:	f04f 0100 	mov.w	r1, #0
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800616a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800616e:	4689      	mov	r9, r1
 8006170:	4692      	mov	sl, r2
 8006172:	eb1b 0509 	adds.w	r5, fp, r9
 8006176:	eb4c 060a 	adc.w	r6, ip, sl
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4619      	mov	r1, r3
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	f04f 0400 	mov.w	r4, #0
 800618c:	0094      	lsls	r4, r2, #2
 800618e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006192:	008b      	lsls	r3, r1, #2
 8006194:	461a      	mov	r2, r3
 8006196:	4623      	mov	r3, r4
 8006198:	4628      	mov	r0, r5
 800619a:	4631      	mov	r1, r6
 800619c:	f7fa fd44 	bl	8000c28 <__aeabi_uldivmod>
 80061a0:	4603      	mov	r3, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b32      	ldr	r3, [pc, #200]	; (8006270 <UART_SetConfig+0x6f4>)
 80061a8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	2164      	movs	r1, #100	; 0x64
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	3332      	adds	r3, #50	; 0x32
 80061ba:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <UART_SetConfig+0x6f4>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c6:	4498      	add	r8, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	469b      	mov	fp, r3
 80061cc:	f04f 0c00 	mov.w	ip, #0
 80061d0:	46d9      	mov	r9, fp
 80061d2:	46e2      	mov	sl, ip
 80061d4:	eb19 0309 	adds.w	r3, r9, r9
 80061d8:	eb4a 040a 	adc.w	r4, sl, sl
 80061dc:	4699      	mov	r9, r3
 80061de:	46a2      	mov	sl, r4
 80061e0:	eb19 090b 	adds.w	r9, r9, fp
 80061e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061fc:	4689      	mov	r9, r1
 80061fe:	4692      	mov	sl, r2
 8006200:	eb1b 0509 	adds.w	r5, fp, r9
 8006204:	eb4c 060a 	adc.w	r6, ip, sl
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	f04f 0400 	mov.w	r4, #0
 800621a:	0094      	lsls	r4, r2, #2
 800621c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006220:	008b      	lsls	r3, r1, #2
 8006222:	461a      	mov	r2, r3
 8006224:	4623      	mov	r3, r4
 8006226:	4628      	mov	r0, r5
 8006228:	4631      	mov	r1, r6
 800622a:	f7fa fcfd 	bl	8000c28 <__aeabi_uldivmod>
 800622e:	4603      	mov	r3, r0
 8006230:	460c      	mov	r4, r1
 8006232:	461a      	mov	r2, r3
 8006234:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <UART_SetConfig+0x6f4>)
 8006236:	fba3 1302 	umull	r1, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2164      	movs	r1, #100	; 0x64
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	3332      	adds	r3, #50	; 0x32
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <UART_SetConfig+0x6f4>)
 800624a:	fba2 2303 	umull	r2, r3, r2, r3
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	f003 020f 	and.w	r2, r3, #15
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4442      	add	r2, r8
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	e7ff      	b.n	800625e <UART_SetConfig+0x6e2>
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	40011000 	.word	0x40011000
 800626c:	40011400 	.word	0x40011400
 8006270:	51eb851f 	.word	0x51eb851f

08006274 <arm_mat_trans_f32>:
 8006274:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006278:	b086      	sub	sp, #24
 800627a:	8802      	ldrh	r2, [r0, #0]
 800627c:	884b      	ldrh	r3, [r1, #2]
 800627e:	9201      	str	r2, [sp, #4]
 8006280:	684a      	ldr	r2, [r1, #4]
 8006282:	6847      	ldr	r7, [r0, #4]
 8006284:	9202      	str	r2, [sp, #8]
 8006286:	8842      	ldrh	r2, [r0, #2]
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	4283      	cmp	r3, r0
 800628c:	f040 80c6 	bne.w	800641c <arm_mat_trans_f32+0x1a8>
 8006290:	f8b1 9000 	ldrh.w	r9, [r1]
 8006294:	4591      	cmp	r9, r2
 8006296:	f040 80c1 	bne.w	800641c <arm_mat_trans_f32+0x1a8>
 800629a:	ea4f 0a99 	mov.w	sl, r9, lsr #2
 800629e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 80062a2:	f009 0903 	and.w	r9, r9, #3
 80062a6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80062aa:	b28b      	uxth	r3, r1
 80062ac:	0086      	lsls	r6, r0, #2
 80062ae:	00c4      	lsls	r4, r0, #3
 80062b0:	b291      	uxth	r1, r2
 80062b2:	3301      	adds	r3, #1
 80062b4:	eb04 0046 	add.w	r0, r4, r6, lsl #1
 80062b8:	1c4a      	adds	r2, r1, #1
 80062ba:	0119      	lsls	r1, r3, #4
 80062bc:	fb00 f303 	mul.w	r3, r0, r3
 80062c0:	9305      	str	r3, [sp, #20]
 80062c2:	0093      	lsls	r3, r2, #2
 80062c4:	9104      	str	r1, [sp, #16]
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	f04f 0800 	mov.w	r8, #0
 80062cc:	f8cd 9000 	str.w	r9, [sp]
 80062d0:	9a02      	ldr	r2, [sp, #8]
 80062d2:	eb02 0c88 	add.w	ip, r2, r8, lsl #2
 80062d6:	f1ba 0f00 	cmp.w	sl, #0
 80062da:	d06a      	beq.n	80063b2 <arm_mat_trans_f32+0x13e>
 80062dc:	683d      	ldr	r5, [r7, #0]
 80062de:	f8cc 5000 	str.w	r5, [ip]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	eb0c 0906 	add.w	r9, ip, r6
 80062e8:	eb0c 0304 	add.w	r3, ip, r4
 80062ec:	f8c9 1000 	str.w	r1, [r9]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
 80062f8:	eb09 0204 	add.w	r2, r9, r4
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	fa1f f58b 	uxth.w	r5, fp
 8006302:	6011      	str	r1, [r2, #0]
 8006304:	f00b 0b01 	and.w	fp, fp, #1
 8006308:	f107 0310 	add.w	r3, r7, #16
 800630c:	eb0c 0200 	add.w	r2, ip, r0
 8006310:	4481      	add	r9, r0
 8006312:	2d00      	cmp	r5, #0
 8006314:	d049      	beq.n	80063aa <arm_mat_trans_f32+0x136>
 8006316:	f1bb 0f00 	cmp.w	fp, #0
 800631a:	d018      	beq.n	800634e <arm_mat_trans_f32+0xda>
 800631c:	f8d3 b000 	ldr.w	fp, [r3]
 8006320:	f8c2 b000 	str.w	fp, [r2]
 8006324:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006328:	f8c9 b000 	str.w	fp, [r9]
 800632c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006330:	1911      	adds	r1, r2, r4
 8006332:	edc1 7a00 	vstr	s15, [r1]
 8006336:	3d01      	subs	r5, #1
 8006338:	ed93 0a03 	vldr	s0, [r3, #12]
 800633c:	eb09 0104 	add.w	r1, r9, r4
 8006340:	b2ad      	uxth	r5, r5
 8006342:	ed81 0a00 	vstr	s0, [r1]
 8006346:	3310      	adds	r3, #16
 8006348:	1882      	adds	r2, r0, r2
 800634a:	4481      	add	r9, r0
 800634c:	b36d      	cbz	r5, 80063aa <arm_mat_trans_f32+0x136>
 800634e:	f8d3 b000 	ldr.w	fp, [r3]
 8006352:	f8c2 b000 	str.w	fp, [r2]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	f8c9 1000 	str.w	r1, [r9]
 800635c:	edd3 0a02 	vldr	s1, [r3, #8]
 8006360:	1911      	adds	r1, r2, r4
 8006362:	edc1 0a00 	vstr	s1, [r1]
 8006366:	ed93 1a03 	vldr	s2, [r3, #12]
 800636a:	eb09 0104 	add.w	r1, r9, r4
 800636e:	ed81 1a00 	vstr	s2, [r1]
 8006372:	1882      	adds	r2, r0, r2
 8006374:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8006378:	f8c2 b000 	str.w	fp, [r2]
 800637c:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8006380:	4481      	add	r9, r0
 8006382:	1911      	adds	r1, r2, r4
 8006384:	f8c9 b000 	str.w	fp, [r9]
 8006388:	edd3 1a06 	vldr	s3, [r3, #24]
 800638c:	edc1 1a00 	vstr	s3, [r1]
 8006390:	3d02      	subs	r5, #2
 8006392:	ed93 2a07 	vldr	s4, [r3, #28]
 8006396:	eb09 0104 	add.w	r1, r9, r4
 800639a:	b2ad      	uxth	r5, r5
 800639c:	ed81 2a00 	vstr	s4, [r1]
 80063a0:	3320      	adds	r3, #32
 80063a2:	1882      	adds	r2, r0, r2
 80063a4:	4481      	add	r9, r0
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	d1d1      	bne.n	800634e <arm_mat_trans_f32+0xda>
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	9a05      	ldr	r2, [sp, #20]
 80063ae:	18ff      	adds	r7, r7, r3
 80063b0:	4494      	add	ip, r2
 80063b2:	9900      	ldr	r1, [sp, #0]
 80063b4:	b321      	cbz	r1, 8006400 <arm_mat_trans_f32+0x18c>
 80063b6:	463b      	mov	r3, r7
 80063b8:	3901      	subs	r1, #1
 80063ba:	f853 5b04 	ldr.w	r5, [r3], #4
 80063be:	b28a      	uxth	r2, r1
 80063c0:	f8cc 5000 	str.w	r5, [ip]
 80063c4:	f001 0101 	and.w	r1, r1, #1
 80063c8:	44b4      	add	ip, r6
 80063ca:	b1ba      	cbz	r2, 80063fc <arm_mat_trans_f32+0x188>
 80063cc:	b139      	cbz	r1, 80063de <arm_mat_trans_f32+0x16a>
 80063ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80063d2:	3a01      	subs	r2, #1
 80063d4:	b292      	uxth	r2, r2
 80063d6:	f8cc 1000 	str.w	r1, [ip]
 80063da:	44b4      	add	ip, r6
 80063dc:	b172      	cbz	r2, 80063fc <arm_mat_trans_f32+0x188>
 80063de:	4619      	mov	r1, r3
 80063e0:	3a02      	subs	r2, #2
 80063e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80063e6:	f8cc 5000 	str.w	r5, [ip]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	44b4      	add	ip, r6
 80063ee:	b292      	uxth	r2, r2
 80063f0:	f8cc 3000 	str.w	r3, [ip]
 80063f4:	1d0b      	adds	r3, r1, #4
 80063f6:	44b4      	add	ip, r6
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d1f0      	bne.n	80063de <arm_mat_trans_f32+0x16a>
 80063fc:	9903      	ldr	r1, [sp, #12]
 80063fe:	187f      	adds	r7, r7, r1
 8006400:	f108 0801 	add.w	r8, r8, #1
 8006404:	9a01      	ldr	r2, [sp, #4]
 8006406:	fa1f f888 	uxth.w	r8, r8
 800640a:	4590      	cmp	r8, r2
 800640c:	f47f af60 	bne.w	80062d0 <arm_mat_trans_f32+0x5c>
 8006410:	2000      	movs	r0, #0
 8006412:	b240      	sxtb	r0, r0
 8006414:	b006      	add	sp, #24
 8006416:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800641a:	4770      	bx	lr
 800641c:	20fd      	movs	r0, #253	; 0xfd
 800641e:	e7f8      	b.n	8006412 <arm_mat_trans_f32+0x19e>

08006420 <arm_mat_sub_f32>:
 8006420:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006424:	6803      	ldr	r3, [r0, #0]
 8006426:	680c      	ldr	r4, [r1, #0]
 8006428:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800642c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006430:	6857      	ldr	r7, [r2, #4]
 8006432:	42a3      	cmp	r3, r4
 8006434:	f040 80ea 	bne.w	800660c <arm_mat_sub_f32+0x1ec>
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	4293      	cmp	r3, r2
 800643c:	f040 80e6 	bne.w	800660c <arm_mat_sub_f32+0x1ec>
 8006440:	8841      	ldrh	r1, [r0, #2]
 8006442:	f8b0 9000 	ldrh.w	r9, [r0]
 8006446:	fb09 f901 	mul.w	r9, r9, r1
 800644a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 800644e:	f000 80a1 	beq.w	8006594 <arm_mat_sub_f32+0x174>
 8006452:	eddc 6a01 	vldr	s13, [ip, #4]
 8006456:	edd8 7a01 	vldr	s15, [r8, #4]
 800645a:	ed9c 6a00 	vldr	s12, [ip]
 800645e:	ed98 7a00 	vldr	s14, [r8]
 8006462:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8006466:	ee76 0a47 	vsub.f32	s1, s12, s14
 800646a:	ed9c 1a02 	vldr	s2, [ip, #8]
 800646e:	edd8 1a02 	vldr	s3, [r8, #8]
 8006472:	edc7 0a00 	vstr	s1, [r7]
 8006476:	ed87 0a01 	vstr	s0, [r7, #4]
 800647a:	ed9c 2a03 	vldr	s4, [ip, #12]
 800647e:	edd8 2a03 	vldr	s5, [r8, #12]
 8006482:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8006486:	ee32 3a62 	vsub.f32	s6, s4, s5
 800648a:	ee71 3a61 	vsub.f32	s7, s2, s3
 800648e:	4606      	mov	r6, r0
 8006490:	edc7 3a02 	vstr	s7, [r7, #8]
 8006494:	f000 0001 	and.w	r0, r0, #1
 8006498:	ed87 3a03 	vstr	s6, [r7, #12]
 800649c:	f10c 0110 	add.w	r1, ip, #16
 80064a0:	f108 0210 	add.w	r2, r8, #16
 80064a4:	f107 0310 	add.w	r3, r7, #16
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	d06e      	beq.n	800658a <arm_mat_sub_f32+0x16a>
 80064ac:	b320      	cbz	r0, 80064f8 <arm_mat_sub_f32+0xd8>
 80064ae:	ed91 4a01 	vldr	s8, [r1, #4]
 80064b2:	edd2 4a01 	vldr	s9, [r2, #4]
 80064b6:	ed91 5a00 	vldr	s10, [r1]
 80064ba:	edd2 5a00 	vldr	s11, [r2]
 80064be:	ee74 7a64 	vsub.f32	s15, s8, s9
 80064c2:	ee75 6a65 	vsub.f32	s13, s10, s11
 80064c6:	ed91 6a02 	vldr	s12, [r1, #8]
 80064ca:	ed92 7a02 	vldr	s14, [r2, #8]
 80064ce:	edc3 6a00 	vstr	s13, [r3]
 80064d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80064d6:	ed91 0a03 	vldr	s0, [r1, #12]
 80064da:	edd2 0a03 	vldr	s1, [r2, #12]
 80064de:	ee36 1a47 	vsub.f32	s2, s12, s14
 80064e2:	ee70 1a60 	vsub.f32	s3, s0, s1
 80064e6:	ed83 1a02 	vstr	s2, [r3, #8]
 80064ea:	edc3 1a03 	vstr	s3, [r3, #12]
 80064ee:	3110      	adds	r1, #16
 80064f0:	3210      	adds	r2, #16
 80064f2:	3310      	adds	r3, #16
 80064f4:	3e01      	subs	r6, #1
 80064f6:	d048      	beq.n	800658a <arm_mat_sub_f32+0x16a>
 80064f8:	ed91 2a01 	vldr	s4, [r1, #4]
 80064fc:	edd2 2a01 	vldr	s5, [r2, #4]
 8006500:	ed91 3a00 	vldr	s6, [r1]
 8006504:	edd2 3a00 	vldr	s7, [r2]
 8006508:	ee32 4a62 	vsub.f32	s8, s4, s5
 800650c:	ee73 4a63 	vsub.f32	s9, s6, s7
 8006510:	ed91 5a02 	vldr	s10, [r1, #8]
 8006514:	edd2 5a02 	vldr	s11, [r2, #8]
 8006518:	edc3 4a00 	vstr	s9, [r3]
 800651c:	ed83 4a01 	vstr	s8, [r3, #4]
 8006520:	edd1 6a03 	vldr	s13, [r1, #12]
 8006524:	edd2 7a03 	vldr	s15, [r2, #12]
 8006528:	ee35 6a65 	vsub.f32	s12, s10, s11
 800652c:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8006530:	ed83 6a02 	vstr	s12, [r3, #8]
 8006534:	ed83 7a03 	vstr	s14, [r3, #12]
 8006538:	ed91 0a04 	vldr	s0, [r1, #16]
 800653c:	edd2 0a04 	vldr	s1, [r2, #16]
 8006540:	ed91 1a05 	vldr	s2, [r1, #20]
 8006544:	edd2 1a05 	vldr	s3, [r2, #20]
 8006548:	ee30 2a60 	vsub.f32	s4, s0, s1
 800654c:	ee71 2a61 	vsub.f32	s5, s2, s3
 8006550:	ed91 3a06 	vldr	s6, [r1, #24]
 8006554:	edd2 3a06 	vldr	s7, [r2, #24]
 8006558:	ed83 2a04 	vstr	s4, [r3, #16]
 800655c:	edc3 2a05 	vstr	s5, [r3, #20]
 8006560:	ed91 4a07 	vldr	s8, [r1, #28]
 8006564:	edd2 4a07 	vldr	s9, [r2, #28]
 8006568:	ee33 5a63 	vsub.f32	s10, s6, s7
 800656c:	ee74 5a64 	vsub.f32	s11, s8, s9
 8006570:	f101 0510 	add.w	r5, r1, #16
 8006574:	f102 0410 	add.w	r4, r2, #16
 8006578:	ed83 5a06 	vstr	s10, [r3, #24]
 800657c:	edc3 5a07 	vstr	s11, [r3, #28]
 8006580:	3120      	adds	r1, #32
 8006582:	3220      	adds	r2, #32
 8006584:	3320      	adds	r3, #32
 8006586:	3e02      	subs	r6, #2
 8006588:	d1b6      	bne.n	80064f8 <arm_mat_sub_f32+0xd8>
 800658a:	ea4f 100a 	mov.w	r0, sl, lsl #4
 800658e:	4484      	add	ip, r0
 8006590:	4480      	add	r8, r0
 8006592:	183f      	adds	r7, r7, r0
 8006594:	f019 0903 	ands.w	r9, r9, #3
 8006598:	d033      	beq.n	8006602 <arm_mat_sub_f32+0x1e2>
 800659a:	eddc 6a00 	vldr	s13, [ip]
 800659e:	edd8 7a00 	vldr	s15, [r8]
 80065a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80065a6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80065aa:	463b      	mov	r3, r7
 80065ac:	464a      	mov	r2, r9
 80065ae:	4664      	mov	r4, ip
 80065b0:	4640      	mov	r0, r8
 80065b2:	f009 0101 	and.w	r1, r9, #1
 80065b6:	eca3 6a01 	vstmia	r3!, {s12}
 80065ba:	b312      	cbz	r2, 8006602 <arm_mat_sub_f32+0x1e2>
 80065bc:	b159      	cbz	r1, 80065d6 <arm_mat_sub_f32+0x1b6>
 80065be:	3404      	adds	r4, #4
 80065c0:	3004      	adds	r0, #4
 80065c2:	ed94 7a00 	vldr	s14, [r4]
 80065c6:	ed90 0a00 	vldr	s0, [r0]
 80065ca:	ee77 0a40 	vsub.f32	s1, s14, s0
 80065ce:	3a01      	subs	r2, #1
 80065d0:	ece3 0a01 	vstmia	r3!, {s1}
 80065d4:	d015      	beq.n	8006602 <arm_mat_sub_f32+0x1e2>
 80065d6:	ed94 1a01 	vldr	s2, [r4, #4]
 80065da:	edd0 1a01 	vldr	s3, [r0, #4]
 80065de:	ee31 2a61 	vsub.f32	s4, s2, s3
 80065e2:	4619      	mov	r1, r3
 80065e4:	eca1 2a01 	vstmia	r1!, {s4}
 80065e8:	edd4 2a02 	vldr	s5, [r4, #8]
 80065ec:	ed90 3a02 	vldr	s6, [r0, #8]
 80065f0:	ee72 3ac3 	vsub.f32	s7, s5, s6
 80065f4:	3408      	adds	r4, #8
 80065f6:	edc3 3a01 	vstr	s7, [r3, #4]
 80065fa:	3008      	adds	r0, #8
 80065fc:	1d0b      	adds	r3, r1, #4
 80065fe:	3a02      	subs	r2, #2
 8006600:	d1e9      	bne.n	80065d6 <arm_mat_sub_f32+0x1b6>
 8006602:	2300      	movs	r3, #0
 8006604:	b258      	sxtb	r0, r3
 8006606:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800660a:	4770      	bx	lr
 800660c:	23fd      	movs	r3, #253	; 0xfd
 800660e:	e7f9      	b.n	8006604 <arm_mat_sub_f32+0x1e4>

08006610 <arm_mat_scale_f32>:
 8006610:	b4f0      	push	{r4, r5, r6, r7}
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	680a      	ldr	r2, [r1, #0]
 8006616:	6846      	ldr	r6, [r0, #4]
 8006618:	684d      	ldr	r5, [r1, #4]
 800661a:	4293      	cmp	r3, r2
 800661c:	f040 80b0 	bne.w	8006780 <arm_mat_scale_f32+0x170>
 8006620:	8841      	ldrh	r1, [r0, #2]
 8006622:	8807      	ldrh	r7, [r0, #0]
 8006624:	fb07 f701 	mul.w	r7, r7, r1
 8006628:	ea5f 0c97 	movs.w	ip, r7, lsr #2
 800662c:	d079      	beq.n	8006722 <arm_mat_scale_f32+0x112>
 800662e:	edd6 6a01 	vldr	s13, [r6, #4]
 8006632:	ed96 7a02 	vldr	s14, [r6, #8]
 8006636:	edd6 7a03 	vldr	s15, [r6, #12]
 800663a:	ed96 6a00 	vldr	s12, [r6]
 800663e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8006642:	ee60 0a26 	vmul.f32	s1, s0, s13
 8006646:	ee20 1a07 	vmul.f32	s2, s0, s14
 800664a:	ee60 1a27 	vmul.f32	s3, s0, s15
 800664e:	ee26 2a00 	vmul.f32	s4, s12, s0
 8006652:	4632      	mov	r2, r6
 8006654:	461c      	mov	r4, r3
 8006656:	f003 0101 	and.w	r1, r3, #1
 800665a:	3210      	adds	r2, #16
 800665c:	ed85 2a00 	vstr	s4, [r5]
 8006660:	edc5 0a01 	vstr	s1, [r5, #4]
 8006664:	ed85 1a02 	vstr	s2, [r5, #8]
 8006668:	edc5 1a03 	vstr	s3, [r5, #12]
 800666c:	f105 0310 	add.w	r3, r5, #16
 8006670:	2c00      	cmp	r4, #0
 8006672:	d052      	beq.n	800671a <arm_mat_scale_f32+0x10a>
 8006674:	b1e1      	cbz	r1, 80066b0 <arm_mat_scale_f32+0xa0>
 8006676:	4610      	mov	r0, r2
 8006678:	edd2 2a01 	vldr	s5, [r2, #4]
 800667c:	ed92 3a02 	vldr	s6, [r2, #8]
 8006680:	edd2 3a03 	vldr	s7, [r2, #12]
 8006684:	ed90 4a00 	vldr	s8, [r0]
 8006688:	ee60 4a22 	vmul.f32	s9, s0, s5
 800668c:	ee20 5a03 	vmul.f32	s10, s0, s6
 8006690:	ee60 5a23 	vmul.f32	s11, s0, s7
 8006694:	ee64 6a00 	vmul.f32	s13, s8, s0
 8006698:	3210      	adds	r2, #16
 800669a:	edc3 4a01 	vstr	s9, [r3, #4]
 800669e:	edc3 6a00 	vstr	s13, [r3]
 80066a2:	ed83 5a02 	vstr	s10, [r3, #8]
 80066a6:	edc3 5a03 	vstr	s11, [r3, #12]
 80066aa:	3310      	adds	r3, #16
 80066ac:	3c01      	subs	r4, #1
 80066ae:	d034      	beq.n	800671a <arm_mat_scale_f32+0x10a>
 80066b0:	ed92 6a01 	vldr	s12, [r2, #4]
 80066b4:	edd2 0a00 	vldr	s1, [r2]
 80066b8:	ed92 7a02 	vldr	s14, [r2, #8]
 80066bc:	edd2 7a03 	vldr	s15, [r2, #12]
 80066c0:	ee20 1a06 	vmul.f32	s2, s0, s12
 80066c4:	ee60 1a07 	vmul.f32	s3, s0, s14
 80066c8:	ee20 2a27 	vmul.f32	s4, s0, s15
 80066cc:	ee60 2a80 	vmul.f32	s5, s1, s0
 80066d0:	ed83 1a01 	vstr	s2, [r3, #4]
 80066d4:	edc3 2a00 	vstr	s5, [r3]
 80066d8:	edc3 1a02 	vstr	s3, [r3, #8]
 80066dc:	ed83 2a03 	vstr	s4, [r3, #12]
 80066e0:	ed92 3a04 	vldr	s6, [r2, #16]
 80066e4:	edd2 3a05 	vldr	s7, [r2, #20]
 80066e8:	ed92 4a06 	vldr	s8, [r2, #24]
 80066ec:	edd2 4a07 	vldr	s9, [r2, #28]
 80066f0:	ee20 5a23 	vmul.f32	s10, s0, s7
 80066f4:	ee60 5a04 	vmul.f32	s11, s0, s8
 80066f8:	ee60 6a24 	vmul.f32	s13, s0, s9
 80066fc:	ee23 6a00 	vmul.f32	s12, s6, s0
 8006700:	ed83 5a05 	vstr	s10, [r3, #20]
 8006704:	ed83 6a04 	vstr	s12, [r3, #16]
 8006708:	edc3 5a06 	vstr	s11, [r3, #24]
 800670c:	edc3 6a07 	vstr	s13, [r3, #28]
 8006710:	3320      	adds	r3, #32
 8006712:	3c02      	subs	r4, #2
 8006714:	f102 0220 	add.w	r2, r2, #32
 8006718:	d1ca      	bne.n	80066b0 <arm_mat_scale_f32+0xa0>
 800671a:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800671e:	18b6      	adds	r6, r6, r2
 8006720:	18ad      	adds	r5, r5, r2
 8006722:	f017 0703 	ands.w	r7, r7, #3
 8006726:	d027      	beq.n	8006778 <arm_mat_scale_f32+0x168>
 8006728:	edd6 0a00 	vldr	s1, [r6]
 800672c:	3f01      	subs	r7, #1
 800672e:	ee20 7a80 	vmul.f32	s14, s1, s0
 8006732:	462b      	mov	r3, r5
 8006734:	463a      	mov	r2, r7
 8006736:	4630      	mov	r0, r6
 8006738:	f007 0701 	and.w	r7, r7, #1
 800673c:	eca3 7a01 	vstmia	r3!, {s14}
 8006740:	b1d2      	cbz	r2, 8006778 <arm_mat_scale_f32+0x168>
 8006742:	b147      	cbz	r7, 8006756 <arm_mat_scale_f32+0x146>
 8006744:	1d30      	adds	r0, r6, #4
 8006746:	edd0 7a00 	vldr	s15, [r0]
 800674a:	ee27 1a80 	vmul.f32	s2, s15, s0
 800674e:	3a01      	subs	r2, #1
 8006750:	eca3 1a01 	vstmia	r3!, {s2}
 8006754:	d010      	beq.n	8006778 <arm_mat_scale_f32+0x168>
 8006756:	edd0 1a01 	vldr	s3, [r0, #4]
 800675a:	ee21 2a80 	vmul.f32	s4, s3, s0
 800675e:	4619      	mov	r1, r3
 8006760:	eca1 2a01 	vstmia	r1!, {s4}
 8006764:	edd0 2a02 	vldr	s5, [r0, #8]
 8006768:	ee22 3a80 	vmul.f32	s6, s5, s0
 800676c:	3008      	adds	r0, #8
 800676e:	ed83 3a01 	vstr	s6, [r3, #4]
 8006772:	1d0b      	adds	r3, r1, #4
 8006774:	3a02      	subs	r2, #2
 8006776:	d1ee      	bne.n	8006756 <arm_mat_scale_f32+0x146>
 8006778:	2300      	movs	r3, #0
 800677a:	b258      	sxtb	r0, r3
 800677c:	bcf0      	pop	{r4, r5, r6, r7}
 800677e:	4770      	bx	lr
 8006780:	23fd      	movs	r3, #253	; 0xfd
 8006782:	e7fa      	b.n	800677a <arm_mat_scale_f32+0x16a>

08006784 <arm_mat_mult_f32>:
 8006784:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006788:	b08a      	sub	sp, #40	; 0x28
 800678a:	8844      	ldrh	r4, [r0, #2]
 800678c:	9101      	str	r1, [sp, #4]
 800678e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006792:	8809      	ldrh	r1, [r1, #0]
 8006794:	6853      	ldr	r3, [r2, #4]
 8006796:	f8bc c002 	ldrh.w	ip, [ip, #2]
 800679a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	42a1      	cmp	r1, r4
 80067a2:	8800      	ldrh	r0, [r0, #0]
 80067a4:	f8cd c008 	str.w	ip, [sp, #8]
 80067a8:	f040 8123 	bne.w	80069f2 <arm_mat_mult_f32+0x26e>
 80067ac:	8815      	ldrh	r5, [r2, #0]
 80067ae:	4285      	cmp	r5, r0
 80067b0:	f040 811f 	bne.w	80069f2 <arm_mat_mult_f32+0x26e>
 80067b4:	8852      	ldrh	r2, [r2, #2]
 80067b6:	4562      	cmp	r2, ip
 80067b8:	f040 811b 	bne.w	80069f2 <arm_mat_mult_f32+0x26e>
 80067bc:	ea4f 0991 	mov.w	r9, r1, lsr #2
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	9505      	str	r5, [sp, #20]
 80067c4:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80067c8:	b2bf      	uxth	r7, r7
 80067ca:	ea4f 068c 	mov.w	r6, ip, lsl #2
 80067ce:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80067d2:	013a      	lsls	r2, r7, #4
 80067d4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80067d8:	eb04 0046 	add.w	r0, r4, r6, lsl #1
 80067dc:	f001 0303 	and.w	r3, r1, #3
 80067e0:	fb07 0700 	mla	r7, r7, r0, r0
 80067e4:	0089      	lsls	r1, r1, #2
 80067e6:	f04f 0c00 	mov.w	ip, #0
 80067ea:	3210      	adds	r2, #16
 80067ec:	ed9f 6a82 	vldr	s12, [pc, #520]	; 80069f8 <arm_mat_mult_f32+0x274>
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	9108      	str	r1, [sp, #32]
 80067f4:	9704      	str	r7, [sp, #16]
 80067f6:	f8cd c018 	str.w	ip, [sp, #24]
 80067fa:	9209      	str	r2, [sp, #36]	; 0x24
 80067fc:	4643      	mov	r3, r8
 80067fe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006802:	9907      	ldr	r1, [sp, #28]
 8006804:	9a06      	ldr	r2, [sp, #24]
 8006806:	44d4      	add	ip, sl
 8006808:	f8cd c00c 	str.w	ip, [sp, #12]
 800680c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006810:	461f      	mov	r7, r3
 8006812:	f04f 0c00 	mov.w	ip, #0
 8006816:	f1b9 0f00 	cmp.w	r9, #0
 800681a:	f000 80e6 	beq.w	80069ea <arm_mat_mult_f32+0x266>
 800681e:	edd7 7a00 	vldr	s15, [r7]
 8006822:	ed9a 7a00 	vldr	s14, [sl]
 8006826:	eef0 6a46 	vmov.f32	s13, s12
 800682a:	ee47 6a27 	vmla.f32	s13, s14, s15
 800682e:	19ba      	adds	r2, r7, r6
 8006830:	edd2 0a00 	vldr	s1, [r2]
 8006834:	ed9a 0a01 	vldr	s0, [sl, #4]
 8006838:	eef0 7a66 	vmov.f32	s15, s13
 800683c:	193d      	adds	r5, r7, r4
 800683e:	ee40 7a20 	vmla.f32	s15, s0, s1
 8006842:	edd5 1a00 	vldr	s3, [r5]
 8006846:	ed9a 1a02 	vldr	s2, [sl, #8]
 800684a:	1911      	adds	r1, r2, r4
 800684c:	ee41 7a21 	vmla.f32	s15, s2, s3
 8006850:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006854:	edd1 2a00 	vldr	s5, [r1]
 8006858:	ed9a 2a03 	vldr	s4, [sl, #12]
 800685c:	fa1f f58b 	uxth.w	r5, fp
 8006860:	1839      	adds	r1, r7, r0
 8006862:	f00b 0b01 	and.w	fp, fp, #1
 8006866:	ee42 7a22 	vmla.f32	s15, s4, s5
 800686a:	f10a 0310 	add.w	r3, sl, #16
 800686e:	1812      	adds	r2, r2, r0
 8006870:	2d00      	cmp	r5, #0
 8006872:	d066      	beq.n	8006942 <arm_mat_mult_f32+0x1be>
 8006874:	f1bb 0f00 	cmp.w	fp, #0
 8006878:	d022      	beq.n	80068c0 <arm_mat_mult_f32+0x13c>
 800687a:	ed93 3a00 	vldr	s6, [r3]
 800687e:	edd1 3a00 	vldr	s7, [r1]
 8006882:	ee43 7a23 	vmla.f32	s15, s6, s7
 8006886:	ed93 4a01 	vldr	s8, [r3, #4]
 800688a:	edd2 4a00 	vldr	s9, [r2]
 800688e:	eb01 0b04 	add.w	fp, r1, r4
 8006892:	ee44 7a24 	vmla.f32	s15, s8, s9
 8006896:	ed93 5a02 	vldr	s10, [r3, #8]
 800689a:	eddb 5a00 	vldr	s11, [fp]
 800689e:	eb02 0b04 	add.w	fp, r2, r4
 80068a2:	ee45 7a25 	vmla.f32	s15, s10, s11
 80068a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80068aa:	ed9b 7a00 	vldr	s14, [fp]
 80068ae:	3d01      	subs	r5, #1
 80068b0:	b2ad      	uxth	r5, r5
 80068b2:	1841      	adds	r1, r0, r1
 80068b4:	ee46 7a87 	vmla.f32	s15, s13, s14
 80068b8:	3310      	adds	r3, #16
 80068ba:	1812      	adds	r2, r2, r0
 80068bc:	2d00      	cmp	r5, #0
 80068be:	d040      	beq.n	8006942 <arm_mat_mult_f32+0x1be>
 80068c0:	ed93 0a00 	vldr	s0, [r3]
 80068c4:	edd1 0a00 	vldr	s1, [r1]
 80068c8:	ee40 7a20 	vmla.f32	s15, s0, s1
 80068cc:	ed93 1a01 	vldr	s2, [r3, #4]
 80068d0:	edd2 1a00 	vldr	s3, [r2]
 80068d4:	eb01 0b04 	add.w	fp, r1, r4
 80068d8:	ee41 7a21 	vmla.f32	s15, s2, s3
 80068dc:	ed93 2a02 	vldr	s4, [r3, #8]
 80068e0:	eddb 2a00 	vldr	s5, [fp]
 80068e4:	eb02 0b04 	add.w	fp, r2, r4
 80068e8:	ee42 7a22 	vmla.f32	s15, s4, s5
 80068ec:	ed93 3a03 	vldr	s6, [r3, #12]
 80068f0:	eddb 3a00 	vldr	s7, [fp]
 80068f4:	1841      	adds	r1, r0, r1
 80068f6:	ee43 7a23 	vmla.f32	s15, s6, s7
 80068fa:	ed93 4a04 	vldr	s8, [r3, #16]
 80068fe:	edd1 4a00 	vldr	s9, [r1]
 8006902:	1812      	adds	r2, r2, r0
 8006904:	ee44 7a24 	vmla.f32	s15, s8, s9
 8006908:	ed93 5a05 	vldr	s10, [r3, #20]
 800690c:	edd2 5a00 	vldr	s11, [r2]
 8006910:	eb01 0b04 	add.w	fp, r1, r4
 8006914:	ee45 7a25 	vmla.f32	s15, s10, s11
 8006918:	edd3 6a06 	vldr	s13, [r3, #24]
 800691c:	ed9b 7a00 	vldr	s14, [fp]
 8006920:	eb02 0b04 	add.w	fp, r2, r4
 8006924:	ee46 7a87 	vmla.f32	s15, s13, s14
 8006928:	ed93 0a07 	vldr	s0, [r3, #28]
 800692c:	eddb 0a00 	vldr	s1, [fp]
 8006930:	3d02      	subs	r5, #2
 8006932:	b2ad      	uxth	r5, r5
 8006934:	1841      	adds	r1, r0, r1
 8006936:	ee40 7a20 	vmla.f32	s15, s0, s1
 800693a:	3320      	adds	r3, #32
 800693c:	1812      	adds	r2, r2, r0
 800693e:	2d00      	cmp	r5, #0
 8006940:	d1be      	bne.n	80068c0 <arm_mat_mult_f32+0x13c>
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	18ff      	adds	r7, r7, r3
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	9900      	ldr	r1, [sp, #0]
 800694a:	b351      	cbz	r1, 80069a2 <arm_mat_mult_f32+0x21e>
 800694c:	3901      	subs	r1, #1
 800694e:	edd7 1a00 	vldr	s3, [r7]
 8006952:	ecb3 1a01 	vldmia	r3!, {s2}
 8006956:	b28a      	uxth	r2, r1
 8006958:	ee41 7a21 	vmla.f32	s15, s2, s3
 800695c:	f001 0101 	and.w	r1, r1, #1
 8006960:	19bf      	adds	r7, r7, r6
 8006962:	b1f2      	cbz	r2, 80069a2 <arm_mat_mult_f32+0x21e>
 8006964:	b149      	cbz	r1, 800697a <arm_mat_mult_f32+0x1f6>
 8006966:	ed97 2a00 	vldr	s4, [r7]
 800696a:	ecf3 2a01 	vldmia	r3!, {s5}
 800696e:	3a01      	subs	r2, #1
 8006970:	b292      	uxth	r2, r2
 8006972:	ee42 7a82 	vmla.f32	s15, s5, s4
 8006976:	19bf      	adds	r7, r7, r6
 8006978:	b19a      	cbz	r2, 80069a2 <arm_mat_mult_f32+0x21e>
 800697a:	4619      	mov	r1, r3
 800697c:	ecb1 3a01 	vldmia	r1!, {s6}
 8006980:	edd7 3a00 	vldr	s7, [r7]
 8006984:	19bf      	adds	r7, r7, r6
 8006986:	ee43 7a23 	vmla.f32	s15, s6, s7
 800698a:	ed93 4a01 	vldr	s8, [r3, #4]
 800698e:	edd7 4a00 	vldr	s9, [r7]
 8006992:	1e93      	subs	r3, r2, #2
 8006994:	b29a      	uxth	r2, r3
 8006996:	ee44 7a24 	vmla.f32	s15, s8, s9
 800699a:	1d0b      	adds	r3, r1, #4
 800699c:	19bf      	adds	r7, r7, r6
 800699e:	2a00      	cmp	r2, #0
 80069a0:	d1eb      	bne.n	800697a <arm_mat_mult_f32+0x1f6>
 80069a2:	ece8 7a01 	vstmia	r8!, {s15}
 80069a6:	9a01      	ldr	r2, [sp, #4]
 80069a8:	9902      	ldr	r1, [sp, #8]
 80069aa:	6853      	ldr	r3, [r2, #4]
 80069ac:	f10c 0c01 	add.w	ip, ip, #1
 80069b0:	fa1f fc8c 	uxth.w	ip, ip
 80069b4:	458c      	cmp	ip, r1
 80069b6:	eb03 078c 	add.w	r7, r3, ip, lsl #2
 80069ba:	f47f af2c 	bne.w	8006816 <arm_mat_mult_f32+0x92>
 80069be:	9a05      	ldr	r2, [sp, #20]
 80069c0:	9906      	ldr	r1, [sp, #24]
 80069c2:	3a01      	subs	r2, #1
 80069c4:	b292      	uxth	r2, r2
 80069c6:	9205      	str	r2, [sp, #20]
 80069c8:	448c      	add	ip, r1
 80069ca:	9a05      	ldr	r2, [sp, #20]
 80069cc:	9908      	ldr	r1, [sp, #32]
 80069ce:	fa1f fc8c 	uxth.w	ip, ip
 80069d2:	f8cd c018 	str.w	ip, [sp, #24]
 80069d6:	448a      	add	sl, r1
 80069d8:	2a00      	cmp	r2, #0
 80069da:	f47f af10 	bne.w	80067fe <arm_mat_mult_f32+0x7a>
 80069de:	4610      	mov	r0, r2
 80069e0:	b240      	sxtb	r0, r0
 80069e2:	b00a      	add	sp, #40	; 0x28
 80069e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069e8:	4770      	bx	lr
 80069ea:	eddf 7a03 	vldr	s15, [pc, #12]	; 80069f8 <arm_mat_mult_f32+0x274>
 80069ee:	4653      	mov	r3, sl
 80069f0:	e7aa      	b.n	8006948 <arm_mat_mult_f32+0x1c4>
 80069f2:	20fd      	movs	r0, #253	; 0xfd
 80069f4:	e7f4      	b.n	80069e0 <arm_mat_mult_f32+0x25c>
 80069f6:	bf00      	nop
 80069f8:	00000000 	.word	0x00000000

080069fc <arm_mat_inverse_f32>:
 80069fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a00:	8807      	ldrh	r7, [r0, #0]
 8006a02:	8843      	ldrh	r3, [r0, #2]
 8006a04:	684a      	ldr	r2, [r1, #4]
 8006a06:	6840      	ldr	r0, [r0, #4]
 8006a08:	b08c      	sub	sp, #48	; 0x30
 8006a0a:	42bb      	cmp	r3, r7
 8006a0c:	9003      	str	r0, [sp, #12]
 8006a0e:	9208      	str	r2, [sp, #32]
 8006a10:	f040 826a 	bne.w	8006ee8 <arm_mat_inverse_f32+0x4ec>
 8006a14:	8808      	ldrh	r0, [r1, #0]
 8006a16:	8849      	ldrh	r1, [r1, #2]
 8006a18:	4281      	cmp	r1, r0
 8006a1a:	f040 8265 	bne.w	8006ee8 <arm_mat_inverse_f32+0x4ec>
 8006a1e:	428f      	cmp	r7, r1
 8006a20:	f040 8262 	bne.w	8006ee8 <arm_mat_inverse_f32+0x4ec>
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	f000 825d 	beq.w	8006ee4 <arm_mat_inverse_f32+0x4e8>
 8006a2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a2e:	1e7a      	subs	r2, r7, #1
 8006a30:	46c1      	mov	r9, r8
 8006a32:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8006a36:	4615      	mov	r5, r2
 8006a38:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8006a3c:	2601      	movs	r6, #1
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f849 ab04 	str.w	sl, [r9], #4
 8006a44:	2d00      	cmp	r5, #0
 8006a46:	d037      	beq.n	8006ab8 <arm_mat_inverse_f32+0xbc>
 8006a48:	1e6c      	subs	r4, r5, #1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f004 0101 	and.w	r1, r4, #1
 8006a50:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a54:	f109 0404 	add.w	r4, r9, #4
 8006a58:	b160      	cbz	r0, 8006a74 <arm_mat_inverse_f32+0x78>
 8006a5a:	b121      	cbz	r1, 8006a66 <arm_mat_inverse_f32+0x6a>
 8006a5c:	3404      	adds	r4, #4
 8006a5e:	3801      	subs	r0, #1
 8006a60:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a64:	d006      	beq.n	8006a74 <arm_mat_inverse_f32+0x78>
 8006a66:	4621      	mov	r1, r4
 8006a68:	f841 3b04 	str.w	r3, [r1], #4
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	1d0c      	adds	r4, r1, #4
 8006a70:	3802      	subs	r0, #2
 8006a72:	d1f8      	bne.n	8006a66 <arm_mat_inverse_f32+0x6a>
 8006a74:	eb09 080c 	add.w	r8, r9, ip
 8006a78:	b1ae      	cbz	r6, 8006aa6 <arm_mat_inverse_f32+0xaa>
 8006a7a:	1e71      	subs	r1, r6, #1
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	460c      	mov	r4, r1
 8006a80:	f840 3b04 	str.w	r3, [r0], #4
 8006a84:	f001 0101 	and.w	r1, r1, #1
 8006a88:	b15c      	cbz	r4, 8006aa2 <arm_mat_inverse_f32+0xa6>
 8006a8a:	b119      	cbz	r1, 8006a94 <arm_mat_inverse_f32+0x98>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	f840 3b04 	str.w	r3, [r0], #4
 8006a92:	d006      	beq.n	8006aa2 <arm_mat_inverse_f32+0xa6>
 8006a94:	4601      	mov	r1, r0
 8006a96:	f841 3b04 	str.w	r3, [r1], #4
 8006a9a:	6043      	str	r3, [r0, #4]
 8006a9c:	1d08      	adds	r0, r1, #4
 8006a9e:	3c02      	subs	r4, #2
 8006aa0:	d1f8      	bne.n	8006a94 <arm_mat_inverse_f32+0x98>
 8006aa2:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 8006aa6:	46c1      	mov	r9, r8
 8006aa8:	3d01      	subs	r5, #1
 8006aaa:	3601      	adds	r6, #1
 8006aac:	f1ac 0c04 	sub.w	ip, ip, #4
 8006ab0:	f849 ab04 	str.w	sl, [r9], #4
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	d1c7      	bne.n	8006a48 <arm_mat_inverse_f32+0x4c>
 8006ab8:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8006abc:	fb07 f607 	mul.w	r6, r7, r7
 8006ac0:	fb0c f007 	mul.w	r0, ip, r7
 8006ac4:	eba0 0086 	sub.w	r0, r0, r6, lsl #2
 8006ac8:	9507      	str	r5, [sp, #28]
 8006aca:	9e03      	ldr	r6, [sp, #12]
 8006acc:	9205      	str	r2, [sp, #20]
 8006ace:	00fb      	lsls	r3, r7, #3
 8006ad0:	f10c 0504 	add.w	r5, ip, #4
 8006ad4:	9a07      	ldr	r2, [sp, #28]
 8006ad6:	9509      	str	r5, [sp, #36]	; 0x24
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	9d08      	ldr	r5, [sp, #32]
 8006adc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ade:	1833      	adds	r3, r6, r0
 8006ae0:	edd6 7a00 	vldr	s15, [r6]
 8006ae4:	910a      	str	r1, [sp, #40]	; 0x28
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	46b0      	mov	r8, r6
 8006aea:	f8cd c008 	str.w	ip, [sp, #8]
 8006aee:	46b9      	mov	r9, r7
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	edd8 6a00 	vldr	s13, [r8]
 8006af6:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8006df0 <arm_mat_inverse_f32+0x3f4>
 8006afa:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006afe:	1e78      	subs	r0, r7, #1
 8006b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b04:	f000 0101 	and.w	r1, r0, #1
 8006b08:	f340 8168 	ble.w	8006ddc <arm_mat_inverse_f32+0x3e0>
 8006b0c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b14:	bfc8      	it	gt
 8006b16:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	429f      	cmp	r7, r3
 8006b1e:	eb08 020c 	add.w	r2, r8, ip
 8006b22:	d938      	bls.n	8006b96 <arm_mat_inverse_f32+0x19a>
 8006b24:	b189      	cbz	r1, 8006b4a <arm_mat_inverse_f32+0x14e>
 8006b26:	edd2 6a00 	vldr	s13, [r2]
 8006b2a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b32:	dd23      	ble.n	8006b7c <arm_mat_inverse_f32+0x180>
 8006b34:	eef4 6a47 	vcmp.f32	s13, s14
 8006b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3c:	bfc8      	it	gt
 8006b3e:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006b42:	3301      	adds	r3, #1
 8006b44:	429f      	cmp	r7, r3
 8006b46:	4462      	add	r2, ip
 8006b48:	d925      	bls.n	8006b96 <arm_mat_inverse_f32+0x19a>
 8006b4a:	ed92 2a00 	vldr	s4, [r2]
 8006b4e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	4462      	add	r2, ip
 8006b58:	bfd8      	it	le
 8006b5a:	eeb1 2a42 	vnegle.f32	s4, s4
 8006b5e:	edd2 6a00 	vldr	s13, [r2]
 8006b62:	eeb4 2a47 	vcmp.f32	s4, s14
 8006b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006b6e:	bfc8      	it	gt
 8006b70:	eeb0 7a42 	vmovgt.f32	s14, s4
 8006b74:	3301      	adds	r3, #1
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	dcdb      	bgt.n	8006b34 <arm_mat_inverse_f32+0x138>
 8006b7c:	eef1 6a66 	vneg.f32	s13, s13
 8006b80:	eef4 6a47 	vcmp.f32	s13, s14
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	bfc8      	it	gt
 8006b8a:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006b8e:	3301      	adds	r3, #1
 8006b90:	429f      	cmp	r7, r3
 8006b92:	4462      	add	r2, ip
 8006b94:	d8d9      	bhi.n	8006b4a <arm_mat_inverse_f32+0x14e>
 8006b96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9e:	f000 818f 	beq.w	8006ec0 <arm_mat_inverse_f32+0x4c4>
 8006ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	bfd4      	ite	le
 8006bac:	eef1 6a67 	vnegle.f32	s13, s15
 8006bb0:	eef0 6a67 	vmovgt.f32	s13, s15
 8006bb4:	eeb4 7a66 	vcmp.f32	s14, s13
 8006bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbc:	d013      	beq.n	8006be6 <arm_mat_inverse_f32+0x1ea>
 8006bbe:	9805      	ldr	r0, [sp, #20]
 8006bc0:	b188      	cbz	r0, 8006be6 <arm_mat_inverse_f32+0x1ea>
 8006bc2:	9904      	ldr	r1, [sp, #16]
 8006bc4:	ed91 0a00 	vldr	s0, [r1]
 8006bc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd0:	eeb1 6a40 	vneg.f32	s12, s0
 8006bd4:	bfc8      	it	gt
 8006bd6:	eeb0 6a40 	vmovgt.f32	s12, s0
 8006bda:	eeb4 7a46 	vcmp.f32	s14, s12
 8006bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be2:	f000 8107 	beq.w	8006df4 <arm_mat_inverse_f32+0x3f8>
 8006be6:	9b07      	ldr	r3, [sp, #28]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	f000 8177 	beq.w	8006edc <arm_mat_inverse_f32+0x4e0>
 8006bee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	f000 8175 	beq.w	8006ee4 <arm_mat_inverse_f32+0x4e8>
 8006bfa:	2400      	movs	r4, #0
 8006bfc:	eb05 000c 	add.w	r0, r5, ip
 8006c00:	9407      	str	r4, [sp, #28]
 8006c02:	9006      	str	r0, [sp, #24]
 8006c04:	f1b9 0f00 	cmp.w	r9, #0
 8006c08:	d025      	beq.n	8006c56 <arm_mat_inverse_f32+0x25a>
 8006c0a:	edd6 0a00 	vldr	s1, [r6]
 8006c0e:	ee80 1aa7 	vdiv.f32	s2, s1, s15
 8006c12:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
 8006c16:	4633      	mov	r3, r6
 8006c18:	460a      	mov	r2, r1
 8006c1a:	f001 0401 	and.w	r4, r1, #1
 8006c1e:	eca3 1a01 	vstmia	r3!, {s2}
 8006c22:	b1c1      	cbz	r1, 8006c56 <arm_mat_inverse_f32+0x25a>
 8006c24:	b13c      	cbz	r4, 8006c36 <arm_mat_inverse_f32+0x23a>
 8006c26:	edd3 1a00 	vldr	s3, [r3]
 8006c2a:	ee81 2aa7 	vdiv.f32	s4, s3, s15
 8006c2e:	1e4a      	subs	r2, r1, #1
 8006c30:	eca3 2a01 	vstmia	r3!, {s4}
 8006c34:	d00f      	beq.n	8006c56 <arm_mat_inverse_f32+0x25a>
 8006c36:	edd3 2a00 	vldr	s5, [r3]
 8006c3a:	ee82 3aa7 	vdiv.f32	s6, s5, s15
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3a02      	subs	r2, #2
 8006c42:	eca0 3a01 	vstmia	r0!, {s6}
 8006c46:	edd3 3a01 	vldr	s7, [r3, #4]
 8006c4a:	ee83 4aa7 	vdiv.f32	s8, s7, s15
 8006c4e:	4603      	mov	r3, r0
 8006c50:	eca3 4a01 	vstmia	r3!, {s8}
 8006c54:	d1ef      	bne.n	8006c36 <arm_mat_inverse_f32+0x23a>
 8006c56:	edd5 4a00 	vldr	s9, [r5]
 8006c5a:	ee84 5aa7 	vdiv.f32	s10, s9, s15
 8006c5e:	1e79      	subs	r1, r7, #1
 8006c60:	462b      	mov	r3, r5
 8006c62:	460a      	mov	r2, r1
 8006c64:	f001 0401 	and.w	r4, r1, #1
 8006c68:	eca3 5a01 	vstmia	r3!, {s10}
 8006c6c:	b1c1      	cbz	r1, 8006ca0 <arm_mat_inverse_f32+0x2a4>
 8006c6e:	b13c      	cbz	r4, 8006c80 <arm_mat_inverse_f32+0x284>
 8006c70:	edd3 5a00 	vldr	s11, [r3]
 8006c74:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006c78:	1e4a      	subs	r2, r1, #1
 8006c7a:	eca3 7a01 	vstmia	r3!, {s14}
 8006c7e:	d00f      	beq.n	8006ca0 <arm_mat_inverse_f32+0x2a4>
 8006c80:	edd3 6a00 	vldr	s13, [r3]
 8006c84:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3a02      	subs	r2, #2
 8006c8c:	eca0 0a01 	vstmia	r0!, {s0}
 8006c90:	ed93 6a01 	vldr	s12, [r3, #4]
 8006c94:	eec6 0a27 	vdiv.f32	s1, s12, s15
 8006c98:	4603      	mov	r3, r0
 8006c9a:	ece3 0a01 	vstmia	r3!, {s1}
 8006c9e:	d1ef      	bne.n	8006c80 <arm_mat_inverse_f32+0x284>
 8006ca0:	9901      	ldr	r1, [sp, #4]
 8006ca2:	9c08      	ldr	r4, [sp, #32]
 8006ca4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8006ca8:	9903      	ldr	r1, [sp, #12]
 8006caa:	2000      	movs	r0, #0
 8006cac:	9b01      	ldr	r3, [sp, #4]
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	f000 8090 	beq.w	8006dd4 <arm_mat_inverse_f32+0x3d8>
 8006cb4:	edd1 7a00 	vldr	s15, [r1]
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	d036      	beq.n	8006d2c <arm_mat_inverse_f32+0x330>
 8006cbe:	ed96 1a00 	vldr	s2, [r6]
 8006cc2:	eef0 1a67 	vmov.f32	s3, s15
 8006cc6:	ee47 1ac1 	vmls.f32	s3, s15, s2
 8006cca:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	46b3      	mov	fp, r6
 8006cd4:	f00a 0a01 	and.w	sl, sl, #1
 8006cd8:	ece3 1a01 	vstmia	r3!, {s3}
 8006cdc:	b322      	cbz	r2, 8006d28 <arm_mat_inverse_f32+0x32c>
 8006cde:	f1ba 0f00 	cmp.w	sl, #0
 8006ce2:	d00b      	beq.n	8006cfc <arm_mat_inverse_f32+0x300>
 8006ce4:	edd3 2a00 	vldr	s5, [r3]
 8006ce8:	ed96 3a01 	vldr	s6, [r6, #4]
 8006cec:	ee47 2ac3 	vmls.f32	s5, s15, s6
 8006cf0:	3a01      	subs	r2, #1
 8006cf2:	f106 0b04 	add.w	fp, r6, #4
 8006cf6:	ece3 2a01 	vstmia	r3!, {s5}
 8006cfa:	d015      	beq.n	8006d28 <arm_mat_inverse_f32+0x32c>
 8006cfc:	edd3 3a00 	vldr	s7, [r3]
 8006d00:	ed9b 4a01 	vldr	s8, [fp, #4]
 8006d04:	ee47 3ac4 	vmls.f32	s7, s15, s8
 8006d08:	469a      	mov	sl, r3
 8006d0a:	ecea 3a01 	vstmia	sl!, {s7}
 8006d0e:	ed9b 5a02 	vldr	s10, [fp, #8]
 8006d12:	edd3 4a01 	vldr	s9, [r3, #4]
 8006d16:	ee47 4ac5 	vmls.f32	s9, s15, s10
 8006d1a:	4653      	mov	r3, sl
 8006d1c:	3a02      	subs	r2, #2
 8006d1e:	ece3 4a01 	vstmia	r3!, {s9}
 8006d22:	f10b 0b08 	add.w	fp, fp, #8
 8006d26:	d1e9      	bne.n	8006cfc <arm_mat_inverse_f32+0x300>
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	18c9      	adds	r1, r1, r3
 8006d2c:	edd4 5a00 	vldr	s11, [r4]
 8006d30:	ed95 7a00 	vldr	s14, [r5]
 8006d34:	ee47 5ac7 	vmls.f32	s11, s15, s14
 8006d38:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	465a      	mov	r2, fp
 8006d40:	f00b 0a01 	and.w	sl, fp, #1
 8006d44:	ece3 5a01 	vstmia	r3!, {s11}
 8006d48:	46ab      	mov	fp, r5
 8006d4a:	b322      	cbz	r2, 8006d96 <arm_mat_inverse_f32+0x39a>
 8006d4c:	f1ba 0f00 	cmp.w	sl, #0
 8006d50:	d00b      	beq.n	8006d6a <arm_mat_inverse_f32+0x36e>
 8006d52:	ed93 0a00 	vldr	s0, [r3]
 8006d56:	edd5 6a01 	vldr	s13, [r5, #4]
 8006d5a:	ee07 0ae6 	vmls.f32	s0, s15, s13
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	f105 0b04 	add.w	fp, r5, #4
 8006d64:	eca3 0a01 	vstmia	r3!, {s0}
 8006d68:	d015      	beq.n	8006d96 <arm_mat_inverse_f32+0x39a>
 8006d6a:	ed93 6a00 	vldr	s12, [r3]
 8006d6e:	eddb 0a01 	vldr	s1, [fp, #4]
 8006d72:	ee07 6ae0 	vmls.f32	s12, s15, s1
 8006d76:	469a      	mov	sl, r3
 8006d78:	ecaa 6a01 	vstmia	sl!, {s12}
 8006d7c:	eddb 1a02 	vldr	s3, [fp, #8]
 8006d80:	ed93 1a01 	vldr	s2, [r3, #4]
 8006d84:	ee07 1ae1 	vmls.f32	s2, s15, s3
 8006d88:	4653      	mov	r3, sl
 8006d8a:	3a02      	subs	r2, #2
 8006d8c:	eca3 1a01 	vstmia	r3!, {s2}
 8006d90:	f10b 0b08 	add.w	fp, fp, #8
 8006d94:	d1e9      	bne.n	8006d6a <arm_mat_inverse_f32+0x36e>
 8006d96:	4464      	add	r4, ip
 8006d98:	3001      	adds	r0, #1
 8006d9a:	4287      	cmp	r7, r0
 8006d9c:	4441      	add	r1, r8
 8006d9e:	d185      	bne.n	8006cac <arm_mat_inverse_f32+0x2b0>
 8006da0:	9d03      	ldr	r5, [sp, #12]
 8006da2:	9b01      	ldr	r3, [sp, #4]
 8006da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006da6:	1d2a      	adds	r2, r5, #4
 8006da8:	1c58      	adds	r0, r3, #1
 8006daa:	9203      	str	r2, [sp, #12]
 8006dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	9001      	str	r0, [sp, #4]
 8006db2:	1876      	adds	r6, r6, r1
 8006db4:	18d0      	adds	r0, r2, r3
 8006db6:	9905      	ldr	r1, [sp, #20]
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	9004      	str	r0, [sp, #16]
 8006dbc:	1e4a      	subs	r2, r1, #1
 8006dbe:	1f18      	subs	r0, r3, #4
 8006dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dc4:	9d06      	ldr	r5, [sp, #24]
 8006dc6:	9205      	str	r2, [sp, #20]
 8006dc8:	9002      	str	r0, [sp, #8]
 8006dca:	d079      	beq.n	8006ec0 <arm_mat_inverse_f32+0x4c4>
 8006dcc:	46b0      	mov	r8, r6
 8006dce:	edd6 7a00 	vldr	s15, [r6]
 8006dd2:	e68e      	b.n	8006af2 <arm_mat_inverse_f32+0xf6>
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	4464      	add	r4, ip
 8006dd8:	18c9      	adds	r1, r1, r3
 8006dda:	e7dd      	b.n	8006d98 <arm_mat_inverse_f32+0x39c>
 8006ddc:	eef1 6a66 	vneg.f32	s13, s13
 8006de0:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de8:	bfc8      	it	gt
 8006dea:	eeb0 7a66 	vmovgt.f32	s14, s13
 8006dee:	e694      	b.n	8006b1a <arm_mat_inverse_f32+0x11e>
 8006df0:	00000000 	.word	0x00000000
 8006df4:	f1b9 0f00 	cmp.w	r9, #0
 8006df8:	d02e      	beq.n	8006e58 <arm_mat_inverse_f32+0x45c>
 8006dfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	1931      	adds	r1, r6, r4
 8006e00:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8006e04:	f8d1 a000 	ldr.w	sl, [r1]
 8006e08:	460a      	mov	r2, r1
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f843 ab04 	str.w	sl, [r3], #4
 8006e10:	f000 0001 	and.w	r0, r0, #1
 8006e14:	eca2 0a01 	vstmia	r2!, {s0}
 8006e18:	b1f4      	cbz	r4, 8006e58 <arm_mat_inverse_f32+0x45c>
 8006e1a:	b138      	cbz	r0, 8006e2c <arm_mat_inverse_f32+0x430>
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	6849      	ldr	r1, [r1, #4]
 8006e20:	3c01      	subs	r4, #1
 8006e22:	f843 1b04 	str.w	r1, [r3], #4
 8006e26:	f842 0b04 	str.w	r0, [r2], #4
 8006e2a:	d015      	beq.n	8006e58 <arm_mat_inverse_f32+0x45c>
 8006e2c:	f8d3 a000 	ldr.w	sl, [r3]
 8006e30:	f8d2 b000 	ldr.w	fp, [r2]
 8006e34:	4618      	mov	r0, r3
 8006e36:	4611      	mov	r1, r2
 8006e38:	f840 bb04 	str.w	fp, [r0], #4
 8006e3c:	f841 ab04 	str.w	sl, [r1], #4
 8006e40:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006e44:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006e48:	4603      	mov	r3, r0
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	3c02      	subs	r4, #2
 8006e4e:	f843 ab04 	str.w	sl, [r3], #4
 8006e52:	f842 bb04 	str.w	fp, [r2], #4
 8006e56:	d1e9      	bne.n	8006e2c <arm_mat_inverse_f32+0x430>
 8006e58:	eb05 020c 	add.w	r2, r5, ip
 8006e5c:	1e78      	subs	r0, r7, #1
 8006e5e:	6814      	ldr	r4, [r2, #0]
 8006e60:	f8d5 a000 	ldr.w	sl, [r5]
 8006e64:	9206      	str	r2, [sp, #24]
 8006e66:	462b      	mov	r3, r5
 8006e68:	4601      	mov	r1, r0
 8006e6a:	f842 ab04 	str.w	sl, [r2], #4
 8006e6e:	f000 0001 	and.w	r0, r0, #1
 8006e72:	f843 4b04 	str.w	r4, [r3], #4
 8006e76:	b1f1      	cbz	r1, 8006eb6 <arm_mat_inverse_f32+0x4ba>
 8006e78:	b138      	cbz	r0, 8006e8a <arm_mat_inverse_f32+0x48e>
 8006e7a:	6810      	ldr	r0, [r2, #0]
 8006e7c:	681c      	ldr	r4, [r3, #0]
 8006e7e:	3901      	subs	r1, #1
 8006e80:	f842 4b04 	str.w	r4, [r2], #4
 8006e84:	f843 0b04 	str.w	r0, [r3], #4
 8006e88:	d015      	beq.n	8006eb6 <arm_mat_inverse_f32+0x4ba>
 8006e8a:	f8d2 a000 	ldr.w	sl, [r2]
 8006e8e:	f8d3 b000 	ldr.w	fp, [r3]
 8006e92:	4614      	mov	r4, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f844 bb04 	str.w	fp, [r4], #4
 8006e9a:	f840 ab04 	str.w	sl, [r0], #4
 8006e9e:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006ea2:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	3902      	subs	r1, #2
 8006eac:	f842 bb04 	str.w	fp, [r2], #4
 8006eb0:	f843 ab04 	str.w	sl, [r3], #4
 8006eb4:	d1e9      	bne.n	8006e8a <arm_mat_inverse_f32+0x48e>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	edd8 7a00 	vldr	s15, [r8]
 8006ebc:	9207      	str	r2, [sp, #28]
 8006ebe:	e6a1      	b.n	8006c04 <arm_mat_inverse_f32+0x208>
 8006ec0:	9907      	ldr	r1, [sp, #28]
 8006ec2:	2901      	cmp	r1, #1
 8006ec4:	d004      	beq.n	8006ed0 <arm_mat_inverse_f32+0x4d4>
 8006ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ece:	d009      	beq.n	8006ee4 <arm_mat_inverse_f32+0x4e8>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	b250      	sxtb	r0, r2
 8006ed4:	b00c      	add	sp, #48	; 0x30
 8006ed6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006eda:	4770      	bx	lr
 8006edc:	eb05 010c 	add.w	r1, r5, ip
 8006ee0:	9106      	str	r1, [sp, #24]
 8006ee2:	e68f      	b.n	8006c04 <arm_mat_inverse_f32+0x208>
 8006ee4:	22fb      	movs	r2, #251	; 0xfb
 8006ee6:	e7f4      	b.n	8006ed2 <arm_mat_inverse_f32+0x4d6>
 8006ee8:	22fd      	movs	r2, #253	; 0xfd
 8006eea:	e7f2      	b.n	8006ed2 <arm_mat_inverse_f32+0x4d6>

08006eec <arm_mat_init_f32>:
 8006eec:	b410      	push	{r4}
 8006eee:	2400      	movs	r4, #0
 8006ef0:	f361 040f 	bfi	r4, r1, #0, #16
 8006ef4:	f362 441f 	bfi	r4, r2, #16, #16
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	6043      	str	r3, [r0, #4]
 8006efc:	bc10      	pop	{r4}
 8006efe:	4770      	bx	lr

08006f00 <arm_mat_add_f32>:
 8006f00:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006f04:	6803      	ldr	r3, [r0, #0]
 8006f06:	680c      	ldr	r4, [r1, #0]
 8006f08:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006f0c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006f10:	6857      	ldr	r7, [r2, #4]
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	f040 80ea 	bne.w	80070ec <arm_mat_add_f32+0x1ec>
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f040 80e6 	bne.w	80070ec <arm_mat_add_f32+0x1ec>
 8006f20:	8841      	ldrh	r1, [r0, #2]
 8006f22:	f8b0 9000 	ldrh.w	r9, [r0]
 8006f26:	fb09 f901 	mul.w	r9, r9, r1
 8006f2a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8006f2e:	f000 80a1 	beq.w	8007074 <arm_mat_add_f32+0x174>
 8006f32:	eddc 6a01 	vldr	s13, [ip, #4]
 8006f36:	edd8 7a01 	vldr	s15, [r8, #4]
 8006f3a:	ed9c 6a00 	vldr	s12, [ip]
 8006f3e:	ed98 7a00 	vldr	s14, [r8]
 8006f42:	ee36 0aa7 	vadd.f32	s0, s13, s15
 8006f46:	ee76 0a07 	vadd.f32	s1, s12, s14
 8006f4a:	ed9c 1a02 	vldr	s2, [ip, #8]
 8006f4e:	edd8 1a02 	vldr	s3, [r8, #8]
 8006f52:	edc7 0a00 	vstr	s1, [r7]
 8006f56:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f5a:	ed9c 2a03 	vldr	s4, [ip, #12]
 8006f5e:	edd8 2a03 	vldr	s5, [r8, #12]
 8006f62:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8006f66:	ee32 3a22 	vadd.f32	s6, s4, s5
 8006f6a:	ee71 3a21 	vadd.f32	s7, s2, s3
 8006f6e:	4606      	mov	r6, r0
 8006f70:	edc7 3a02 	vstr	s7, [r7, #8]
 8006f74:	f000 0001 	and.w	r0, r0, #1
 8006f78:	ed87 3a03 	vstr	s6, [r7, #12]
 8006f7c:	f10c 0110 	add.w	r1, ip, #16
 8006f80:	f108 0210 	add.w	r2, r8, #16
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	2e00      	cmp	r6, #0
 8006f8a:	d06e      	beq.n	800706a <arm_mat_add_f32+0x16a>
 8006f8c:	b320      	cbz	r0, 8006fd8 <arm_mat_add_f32+0xd8>
 8006f8e:	ed91 4a01 	vldr	s8, [r1, #4]
 8006f92:	edd2 4a01 	vldr	s9, [r2, #4]
 8006f96:	ed91 5a00 	vldr	s10, [r1]
 8006f9a:	edd2 5a00 	vldr	s11, [r2]
 8006f9e:	ee74 7a24 	vadd.f32	s15, s8, s9
 8006fa2:	ee75 6a25 	vadd.f32	s13, s10, s11
 8006fa6:	ed91 6a02 	vldr	s12, [r1, #8]
 8006faa:	ed92 7a02 	vldr	s14, [r2, #8]
 8006fae:	edc3 6a00 	vstr	s13, [r3]
 8006fb2:	edc3 7a01 	vstr	s15, [r3, #4]
 8006fb6:	ed91 0a03 	vldr	s0, [r1, #12]
 8006fba:	edd2 0a03 	vldr	s1, [r2, #12]
 8006fbe:	ee36 1a07 	vadd.f32	s2, s12, s14
 8006fc2:	ee70 1a20 	vadd.f32	s3, s0, s1
 8006fc6:	ed83 1a02 	vstr	s2, [r3, #8]
 8006fca:	edc3 1a03 	vstr	s3, [r3, #12]
 8006fce:	3110      	adds	r1, #16
 8006fd0:	3210      	adds	r2, #16
 8006fd2:	3310      	adds	r3, #16
 8006fd4:	3e01      	subs	r6, #1
 8006fd6:	d048      	beq.n	800706a <arm_mat_add_f32+0x16a>
 8006fd8:	ed91 2a01 	vldr	s4, [r1, #4]
 8006fdc:	edd2 2a01 	vldr	s5, [r2, #4]
 8006fe0:	ed91 3a00 	vldr	s6, [r1]
 8006fe4:	edd2 3a00 	vldr	s7, [r2]
 8006fe8:	ee32 4a22 	vadd.f32	s8, s4, s5
 8006fec:	ee73 4a23 	vadd.f32	s9, s6, s7
 8006ff0:	ed91 5a02 	vldr	s10, [r1, #8]
 8006ff4:	edd2 5a02 	vldr	s11, [r2, #8]
 8006ff8:	edc3 4a00 	vstr	s9, [r3]
 8006ffc:	ed83 4a01 	vstr	s8, [r3, #4]
 8007000:	edd1 6a03 	vldr	s13, [r1, #12]
 8007004:	edd2 7a03 	vldr	s15, [r2, #12]
 8007008:	ee35 6a25 	vadd.f32	s12, s10, s11
 800700c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8007010:	ed83 6a02 	vstr	s12, [r3, #8]
 8007014:	ed83 7a03 	vstr	s14, [r3, #12]
 8007018:	ed91 0a04 	vldr	s0, [r1, #16]
 800701c:	edd2 0a04 	vldr	s1, [r2, #16]
 8007020:	ed91 1a05 	vldr	s2, [r1, #20]
 8007024:	edd2 1a05 	vldr	s3, [r2, #20]
 8007028:	ee30 2a20 	vadd.f32	s4, s0, s1
 800702c:	ee71 2a21 	vadd.f32	s5, s2, s3
 8007030:	ed91 3a06 	vldr	s6, [r1, #24]
 8007034:	edd2 3a06 	vldr	s7, [r2, #24]
 8007038:	ed83 2a04 	vstr	s4, [r3, #16]
 800703c:	edc3 2a05 	vstr	s5, [r3, #20]
 8007040:	ed91 4a07 	vldr	s8, [r1, #28]
 8007044:	edd2 4a07 	vldr	s9, [r2, #28]
 8007048:	ee33 5a23 	vadd.f32	s10, s6, s7
 800704c:	ee74 5a24 	vadd.f32	s11, s8, s9
 8007050:	f101 0510 	add.w	r5, r1, #16
 8007054:	f102 0410 	add.w	r4, r2, #16
 8007058:	ed83 5a06 	vstr	s10, [r3, #24]
 800705c:	edc3 5a07 	vstr	s11, [r3, #28]
 8007060:	3120      	adds	r1, #32
 8007062:	3220      	adds	r2, #32
 8007064:	3320      	adds	r3, #32
 8007066:	3e02      	subs	r6, #2
 8007068:	d1b6      	bne.n	8006fd8 <arm_mat_add_f32+0xd8>
 800706a:	ea4f 100a 	mov.w	r0, sl, lsl #4
 800706e:	4484      	add	ip, r0
 8007070:	4480      	add	r8, r0
 8007072:	183f      	adds	r7, r7, r0
 8007074:	f019 0903 	ands.w	r9, r9, #3
 8007078:	d033      	beq.n	80070e2 <arm_mat_add_f32+0x1e2>
 800707a:	eddc 6a00 	vldr	s13, [ip]
 800707e:	edd8 7a00 	vldr	s15, [r8]
 8007082:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007086:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800708a:	463b      	mov	r3, r7
 800708c:	464a      	mov	r2, r9
 800708e:	4664      	mov	r4, ip
 8007090:	4640      	mov	r0, r8
 8007092:	f009 0101 	and.w	r1, r9, #1
 8007096:	eca3 6a01 	vstmia	r3!, {s12}
 800709a:	b312      	cbz	r2, 80070e2 <arm_mat_add_f32+0x1e2>
 800709c:	b159      	cbz	r1, 80070b6 <arm_mat_add_f32+0x1b6>
 800709e:	3404      	adds	r4, #4
 80070a0:	3004      	adds	r0, #4
 80070a2:	ed94 7a00 	vldr	s14, [r4]
 80070a6:	ed90 0a00 	vldr	s0, [r0]
 80070aa:	ee77 0a00 	vadd.f32	s1, s14, s0
 80070ae:	3a01      	subs	r2, #1
 80070b0:	ece3 0a01 	vstmia	r3!, {s1}
 80070b4:	d015      	beq.n	80070e2 <arm_mat_add_f32+0x1e2>
 80070b6:	ed94 1a01 	vldr	s2, [r4, #4]
 80070ba:	edd0 1a01 	vldr	s3, [r0, #4]
 80070be:	ee31 2a21 	vadd.f32	s4, s2, s3
 80070c2:	4619      	mov	r1, r3
 80070c4:	eca1 2a01 	vstmia	r1!, {s4}
 80070c8:	edd4 2a02 	vldr	s5, [r4, #8]
 80070cc:	ed90 3a02 	vldr	s6, [r0, #8]
 80070d0:	ee72 3a83 	vadd.f32	s7, s5, s6
 80070d4:	3408      	adds	r4, #8
 80070d6:	edc3 3a01 	vstr	s7, [r3, #4]
 80070da:	3008      	adds	r0, #8
 80070dc:	1d0b      	adds	r3, r1, #4
 80070de:	3a02      	subs	r2, #2
 80070e0:	d1e9      	bne.n	80070b6 <arm_mat_add_f32+0x1b6>
 80070e2:	2300      	movs	r3, #0
 80070e4:	b258      	sxtb	r0, r3
 80070e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80070ea:	4770      	bx	lr
 80070ec:	23fd      	movs	r3, #253	; 0xfd
 80070ee:	e7f9      	b.n	80070e4 <arm_mat_add_f32+0x1e4>

080070f0 <_drand48_r>:
 80070f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80070f2:	b510      	push	{r4, lr}
 80070f4:	4604      	mov	r4, r0
 80070f6:	b97b      	cbnz	r3, 8007118 <_drand48_r+0x28>
 80070f8:	2018      	movs	r0, #24
 80070fa:	f000 f87b 	bl	80071f4 <malloc>
 80070fe:	4a09      	ldr	r2, [pc, #36]	; (8007124 <_drand48_r+0x34>)
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <_drand48_r+0x38>)
 8007102:	63a0      	str	r0, [r4, #56]	; 0x38
 8007104:	e9c0 2300 	strd	r2, r3, [r0]
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <_drand48_r+0x3c>)
 800710a:	6083      	str	r3, [r0, #8]
 800710c:	230b      	movs	r3, #11
 800710e:	8183      	strh	r3, [r0, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	2300      	movs	r3, #0
 8007114:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007118:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800711a:	4620      	mov	r0, r4
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f000 b80c 	b.w	800713c <_erand48_r>
 8007124:	abcd330e 	.word	0xabcd330e
 8007128:	e66d1234 	.word	0xe66d1234
 800712c:	0005deec 	.word	0x0005deec

08007130 <drand48>:
 8007130:	4b01      	ldr	r3, [pc, #4]	; (8007138 <drand48+0x8>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	f7ff bfdc 	b.w	80070f0 <_drand48_r>
 8007138:	2000000c 	.word	0x2000000c

0800713c <_erand48_r>:
 800713c:	b5d0      	push	{r4, r6, r7, lr}
 800713e:	460c      	mov	r4, r1
 8007140:	f000 f928 	bl	8007394 <__dorand48>
 8007144:	8820      	ldrh	r0, [r4, #0]
 8007146:	f7f9 f9f5 	bl	8000534 <__aeabi_ui2d>
 800714a:	ec41 0b10 	vmov	d0, r0, r1
 800714e:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8007152:	f000 f957 	bl	8007404 <ldexp>
 8007156:	8860      	ldrh	r0, [r4, #2]
 8007158:	ec57 6b10 	vmov	r6, r7, d0
 800715c:	f7f9 f9ea 	bl	8000534 <__aeabi_ui2d>
 8007160:	ec41 0b10 	vmov	d0, r0, r1
 8007164:	f06f 001f 	mvn.w	r0, #31
 8007168:	f000 f94c 	bl	8007404 <ldexp>
 800716c:	4630      	mov	r0, r6
 800716e:	ec53 2b10 	vmov	r2, r3, d0
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 f8a2 	bl	80002bc <__adddf3>
 8007178:	4606      	mov	r6, r0
 800717a:	88a0      	ldrh	r0, [r4, #4]
 800717c:	460f      	mov	r7, r1
 800717e:	f7f9 f9d9 	bl	8000534 <__aeabi_ui2d>
 8007182:	ec41 0b10 	vmov	d0, r0, r1
 8007186:	f06f 000f 	mvn.w	r0, #15
 800718a:	f000 f93b 	bl	8007404 <ldexp>
 800718e:	4630      	mov	r0, r6
 8007190:	ec53 2b10 	vmov	r2, r3, d0
 8007194:	4639      	mov	r1, r7
 8007196:	f7f9 f891 	bl	80002bc <__adddf3>
 800719a:	ec41 0b10 	vmov	d0, r0, r1
 800719e:	bdd0      	pop	{r4, r6, r7, pc}

080071a0 <__errno>:
 80071a0:	4b01      	ldr	r3, [pc, #4]	; (80071a8 <__errno+0x8>)
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	2000000c 	.word	0x2000000c

080071ac <__libc_init_array>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	4e0d      	ldr	r6, [pc, #52]	; (80071e4 <__libc_init_array+0x38>)
 80071b0:	4c0d      	ldr	r4, [pc, #52]	; (80071e8 <__libc_init_array+0x3c>)
 80071b2:	1ba4      	subs	r4, r4, r6
 80071b4:	10a4      	asrs	r4, r4, #2
 80071b6:	2500      	movs	r5, #0
 80071b8:	42a5      	cmp	r5, r4
 80071ba:	d109      	bne.n	80071d0 <__libc_init_array+0x24>
 80071bc:	4e0b      	ldr	r6, [pc, #44]	; (80071ec <__libc_init_array+0x40>)
 80071be:	4c0c      	ldr	r4, [pc, #48]	; (80071f0 <__libc_init_array+0x44>)
 80071c0:	f002 f83e 	bl	8009240 <_init>
 80071c4:	1ba4      	subs	r4, r4, r6
 80071c6:	10a4      	asrs	r4, r4, #2
 80071c8:	2500      	movs	r5, #0
 80071ca:	42a5      	cmp	r5, r4
 80071cc:	d105      	bne.n	80071da <__libc_init_array+0x2e>
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071d4:	4798      	blx	r3
 80071d6:	3501      	adds	r5, #1
 80071d8:	e7ee      	b.n	80071b8 <__libc_init_array+0xc>
 80071da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071de:	4798      	blx	r3
 80071e0:	3501      	adds	r5, #1
 80071e2:	e7f2      	b.n	80071ca <__libc_init_array+0x1e>
 80071e4:	08009370 	.word	0x08009370
 80071e8:	08009370 	.word	0x08009370
 80071ec:	08009370 	.word	0x08009370
 80071f0:	08009374 	.word	0x08009374

080071f4 <malloc>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <malloc+0xc>)
 80071f6:	4601      	mov	r1, r0
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f000 b859 	b.w	80072b0 <_malloc_r>
 80071fe:	bf00      	nop
 8007200:	2000000c 	.word	0x2000000c

08007204 <memset>:
 8007204:	4402      	add	r2, r0
 8007206:	4603      	mov	r3, r0
 8007208:	4293      	cmp	r3, r2
 800720a:	d100      	bne.n	800720e <memset+0xa>
 800720c:	4770      	bx	lr
 800720e:	f803 1b01 	strb.w	r1, [r3], #1
 8007212:	e7f9      	b.n	8007208 <memset+0x4>

08007214 <_free_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4605      	mov	r5, r0
 8007218:	2900      	cmp	r1, #0
 800721a:	d045      	beq.n	80072a8 <_free_r+0x94>
 800721c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007220:	1f0c      	subs	r4, r1, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfb8      	it	lt
 8007226:	18e4      	addlt	r4, r4, r3
 8007228:	f000 fa6e 	bl	8007708 <__malloc_lock>
 800722c:	4a1f      	ldr	r2, [pc, #124]	; (80072ac <_free_r+0x98>)
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	4610      	mov	r0, r2
 8007232:	b933      	cbnz	r3, 8007242 <_free_r+0x2e>
 8007234:	6063      	str	r3, [r4, #4]
 8007236:	6014      	str	r4, [r2, #0]
 8007238:	4628      	mov	r0, r5
 800723a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800723e:	f000 ba64 	b.w	800770a <__malloc_unlock>
 8007242:	42a3      	cmp	r3, r4
 8007244:	d90c      	bls.n	8007260 <_free_r+0x4c>
 8007246:	6821      	ldr	r1, [r4, #0]
 8007248:	1862      	adds	r2, r4, r1
 800724a:	4293      	cmp	r3, r2
 800724c:	bf04      	itt	eq
 800724e:	681a      	ldreq	r2, [r3, #0]
 8007250:	685b      	ldreq	r3, [r3, #4]
 8007252:	6063      	str	r3, [r4, #4]
 8007254:	bf04      	itt	eq
 8007256:	1852      	addeq	r2, r2, r1
 8007258:	6022      	streq	r2, [r4, #0]
 800725a:	6004      	str	r4, [r0, #0]
 800725c:	e7ec      	b.n	8007238 <_free_r+0x24>
 800725e:	4613      	mov	r3, r2
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	b10a      	cbz	r2, 8007268 <_free_r+0x54>
 8007264:	42a2      	cmp	r2, r4
 8007266:	d9fa      	bls.n	800725e <_free_r+0x4a>
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	1858      	adds	r0, r3, r1
 800726c:	42a0      	cmp	r0, r4
 800726e:	d10b      	bne.n	8007288 <_free_r+0x74>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	4401      	add	r1, r0
 8007274:	1858      	adds	r0, r3, r1
 8007276:	4282      	cmp	r2, r0
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	d1dd      	bne.n	8007238 <_free_r+0x24>
 800727c:	6810      	ldr	r0, [r2, #0]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	605a      	str	r2, [r3, #4]
 8007282:	4401      	add	r1, r0
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e7d7      	b.n	8007238 <_free_r+0x24>
 8007288:	d902      	bls.n	8007290 <_free_r+0x7c>
 800728a:	230c      	movs	r3, #12
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	e7d3      	b.n	8007238 <_free_r+0x24>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	1821      	adds	r1, r4, r0
 8007294:	428a      	cmp	r2, r1
 8007296:	bf04      	itt	eq
 8007298:	6811      	ldreq	r1, [r2, #0]
 800729a:	6852      	ldreq	r2, [r2, #4]
 800729c:	6062      	str	r2, [r4, #4]
 800729e:	bf04      	itt	eq
 80072a0:	1809      	addeq	r1, r1, r0
 80072a2:	6021      	streq	r1, [r4, #0]
 80072a4:	605c      	str	r4, [r3, #4]
 80072a6:	e7c7      	b.n	8007238 <_free_r+0x24>
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	200000a4 	.word	0x200000a4

080072b0 <_malloc_r>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	1ccd      	adds	r5, r1, #3
 80072b4:	f025 0503 	bic.w	r5, r5, #3
 80072b8:	3508      	adds	r5, #8
 80072ba:	2d0c      	cmp	r5, #12
 80072bc:	bf38      	it	cc
 80072be:	250c      	movcc	r5, #12
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	4606      	mov	r6, r0
 80072c4:	db01      	blt.n	80072ca <_malloc_r+0x1a>
 80072c6:	42a9      	cmp	r1, r5
 80072c8:	d903      	bls.n	80072d2 <_malloc_r+0x22>
 80072ca:	230c      	movs	r3, #12
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	2000      	movs	r0, #0
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
 80072d2:	f000 fa19 	bl	8007708 <__malloc_lock>
 80072d6:	4a21      	ldr	r2, [pc, #132]	; (800735c <_malloc_r+0xac>)
 80072d8:	6814      	ldr	r4, [r2, #0]
 80072da:	4621      	mov	r1, r4
 80072dc:	b991      	cbnz	r1, 8007304 <_malloc_r+0x54>
 80072de:	4c20      	ldr	r4, [pc, #128]	; (8007360 <_malloc_r+0xb0>)
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	b91b      	cbnz	r3, 80072ec <_malloc_r+0x3c>
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 f935 	bl	8007554 <_sbrk_r>
 80072ea:	6020      	str	r0, [r4, #0]
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 f930 	bl	8007554 <_sbrk_r>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d124      	bne.n	8007342 <_malloc_r+0x92>
 80072f8:	230c      	movs	r3, #12
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	4630      	mov	r0, r6
 80072fe:	f000 fa04 	bl	800770a <__malloc_unlock>
 8007302:	e7e4      	b.n	80072ce <_malloc_r+0x1e>
 8007304:	680b      	ldr	r3, [r1, #0]
 8007306:	1b5b      	subs	r3, r3, r5
 8007308:	d418      	bmi.n	800733c <_malloc_r+0x8c>
 800730a:	2b0b      	cmp	r3, #11
 800730c:	d90f      	bls.n	800732e <_malloc_r+0x7e>
 800730e:	600b      	str	r3, [r1, #0]
 8007310:	50cd      	str	r5, [r1, r3]
 8007312:	18cc      	adds	r4, r1, r3
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f9f8 	bl	800770a <__malloc_unlock>
 800731a:	f104 000b 	add.w	r0, r4, #11
 800731e:	1d23      	adds	r3, r4, #4
 8007320:	f020 0007 	bic.w	r0, r0, #7
 8007324:	1ac3      	subs	r3, r0, r3
 8007326:	d0d3      	beq.n	80072d0 <_malloc_r+0x20>
 8007328:	425a      	negs	r2, r3
 800732a:	50e2      	str	r2, [r4, r3]
 800732c:	e7d0      	b.n	80072d0 <_malloc_r+0x20>
 800732e:	428c      	cmp	r4, r1
 8007330:	684b      	ldr	r3, [r1, #4]
 8007332:	bf16      	itet	ne
 8007334:	6063      	strne	r3, [r4, #4]
 8007336:	6013      	streq	r3, [r2, #0]
 8007338:	460c      	movne	r4, r1
 800733a:	e7eb      	b.n	8007314 <_malloc_r+0x64>
 800733c:	460c      	mov	r4, r1
 800733e:	6849      	ldr	r1, [r1, #4]
 8007340:	e7cc      	b.n	80072dc <_malloc_r+0x2c>
 8007342:	1cc4      	adds	r4, r0, #3
 8007344:	f024 0403 	bic.w	r4, r4, #3
 8007348:	42a0      	cmp	r0, r4
 800734a:	d005      	beq.n	8007358 <_malloc_r+0xa8>
 800734c:	1a21      	subs	r1, r4, r0
 800734e:	4630      	mov	r0, r6
 8007350:	f000 f900 	bl	8007554 <_sbrk_r>
 8007354:	3001      	adds	r0, #1
 8007356:	d0cf      	beq.n	80072f8 <_malloc_r+0x48>
 8007358:	6025      	str	r5, [r4, #0]
 800735a:	e7db      	b.n	8007314 <_malloc_r+0x64>
 800735c:	200000a4 	.word	0x200000a4
 8007360:	200000a8 	.word	0x200000a8

08007364 <iprintf>:
 8007364:	b40f      	push	{r0, r1, r2, r3}
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <iprintf+0x2c>)
 8007368:	b513      	push	{r0, r1, r4, lr}
 800736a:	681c      	ldr	r4, [r3, #0]
 800736c:	b124      	cbz	r4, 8007378 <iprintf+0x14>
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	b913      	cbnz	r3, 8007378 <iprintf+0x14>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f93e 	bl	80075f4 <__sinit>
 8007378:	ab05      	add	r3, sp, #20
 800737a:	9a04      	ldr	r2, [sp, #16]
 800737c:	68a1      	ldr	r1, [r4, #8]
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 f9ed 	bl	8007760 <_vfiprintf_r>
 8007386:	b002      	add	sp, #8
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	b004      	add	sp, #16
 800738e:	4770      	bx	lr
 8007390:	2000000c 	.word	0x2000000c

08007394 <__dorand48>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007398:	4605      	mov	r5, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b97b      	cbnz	r3, 80073be <__dorand48+0x2a>
 800739e:	2018      	movs	r0, #24
 80073a0:	f7ff ff28 	bl	80071f4 <malloc>
 80073a4:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <__dorand48+0x64>)
 80073a6:	4b15      	ldr	r3, [pc, #84]	; (80073fc <__dorand48+0x68>)
 80073a8:	63a8      	str	r0, [r5, #56]	; 0x38
 80073aa:	e9c0 2300 	strd	r2, r3, [r0]
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <__dorand48+0x6c>)
 80073b0:	6083      	str	r3, [r0, #8]
 80073b2:	230b      	movs	r3, #11
 80073b4:	8183      	strh	r3, [r0, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	2300      	movs	r3, #0
 80073ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80073be:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80073c0:	8826      	ldrh	r6, [r4, #0]
 80073c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80073c6:	88c7      	ldrh	r7, [r0, #6]
 80073c8:	8865      	ldrh	r5, [r4, #2]
 80073ca:	88a2      	ldrh	r2, [r4, #4]
 80073cc:	8981      	ldrh	r1, [r0, #12]
 80073ce:	fb06 f30c 	mul.w	r3, r6, ip
 80073d2:	fb07 3305 	mla	r3, r7, r5, r3
 80073d6:	fb05 f50c 	mul.w	r5, r5, ip
 80073da:	fb07 5502 	mla	r5, r7, r2, r5
 80073de:	8942      	ldrh	r2, [r0, #10]
 80073e0:	fb06 1107 	mla	r1, r6, r7, r1
 80073e4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80073e8:	fb06 5202 	mla	r2, r6, r2, r5
 80073ec:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80073f0:	8021      	strh	r1, [r4, #0]
 80073f2:	8063      	strh	r3, [r4, #2]
 80073f4:	80a2      	strh	r2, [r4, #4]
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	abcd330e 	.word	0xabcd330e
 80073fc:	e66d1234 	.word	0xe66d1234
 8007400:	0005deec 	.word	0x0005deec

08007404 <ldexp>:
 8007404:	b510      	push	{r4, lr}
 8007406:	ed2d 8b02 	vpush	{d8}
 800740a:	eeb0 8a40 	vmov.f32	s16, s0
 800740e:	eef0 8a60 	vmov.f32	s17, s1
 8007412:	4604      	mov	r4, r0
 8007414:	f000 fc51 	bl	8007cba <finite>
 8007418:	b1f8      	cbz	r0, 800745a <ldexp+0x56>
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	ec51 0b18 	vmov	r0, r1, d8
 8007422:	f7f9 fb69 	bl	8000af8 <__aeabi_dcmpeq>
 8007426:	b9c0      	cbnz	r0, 800745a <ldexp+0x56>
 8007428:	eeb0 0a48 	vmov.f32	s0, s16
 800742c:	eef0 0a68 	vmov.f32	s1, s17
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f819 	bl	8007468 <scalbn>
 8007436:	eeb0 8a40 	vmov.f32	s16, s0
 800743a:	eef0 8a60 	vmov.f32	s17, s1
 800743e:	f000 fc3c 	bl	8007cba <finite>
 8007442:	b130      	cbz	r0, 8007452 <ldexp+0x4e>
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	ec51 0b18 	vmov	r0, r1, d8
 800744c:	f7f9 fb54 	bl	8000af8 <__aeabi_dcmpeq>
 8007450:	b118      	cbz	r0, 800745a <ldexp+0x56>
 8007452:	f7ff fea5 	bl	80071a0 <__errno>
 8007456:	2322      	movs	r3, #34	; 0x22
 8007458:	6003      	str	r3, [r0, #0]
 800745a:	eeb0 0a48 	vmov.f32	s0, s16
 800745e:	eef0 0a68 	vmov.f32	s1, s17
 8007462:	ecbd 8b02 	vpop	{d8}
 8007466:	bd10      	pop	{r4, pc}

08007468 <scalbn>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	ec55 4b10 	vmov	r4, r5, d0
 800746e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007472:	4606      	mov	r6, r0
 8007474:	462b      	mov	r3, r5
 8007476:	b9aa      	cbnz	r2, 80074a4 <scalbn+0x3c>
 8007478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800747c:	4323      	orrs	r3, r4
 800747e:	d03b      	beq.n	80074f8 <scalbn+0x90>
 8007480:	4b31      	ldr	r3, [pc, #196]	; (8007548 <scalbn+0xe0>)
 8007482:	4629      	mov	r1, r5
 8007484:	2200      	movs	r2, #0
 8007486:	ee10 0a10 	vmov	r0, s0
 800748a:	f7f9 f8cd 	bl	8000628 <__aeabi_dmul>
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <scalbn+0xe4>)
 8007490:	429e      	cmp	r6, r3
 8007492:	4604      	mov	r4, r0
 8007494:	460d      	mov	r5, r1
 8007496:	da12      	bge.n	80074be <scalbn+0x56>
 8007498:	a327      	add	r3, pc, #156	; (adr r3, 8007538 <scalbn+0xd0>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f8c3 	bl	8000628 <__aeabi_dmul>
 80074a2:	e009      	b.n	80074b8 <scalbn+0x50>
 80074a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80074a8:	428a      	cmp	r2, r1
 80074aa:	d10c      	bne.n	80074c6 <scalbn+0x5e>
 80074ac:	ee10 2a10 	vmov	r2, s0
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f8 ff02 	bl	80002bc <__adddf3>
 80074b8:	4604      	mov	r4, r0
 80074ba:	460d      	mov	r5, r1
 80074bc:	e01c      	b.n	80074f8 <scalbn+0x90>
 80074be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074c2:	460b      	mov	r3, r1
 80074c4:	3a36      	subs	r2, #54	; 0x36
 80074c6:	4432      	add	r2, r6
 80074c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074cc:	428a      	cmp	r2, r1
 80074ce:	dd0b      	ble.n	80074e8 <scalbn+0x80>
 80074d0:	ec45 4b11 	vmov	d1, r4, r5
 80074d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007540 <scalbn+0xd8>
 80074d8:	f000 fbe0 	bl	8007c9c <copysign>
 80074dc:	a318      	add	r3, pc, #96	; (adr r3, 8007540 <scalbn+0xd8>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	ec51 0b10 	vmov	r0, r1, d0
 80074e6:	e7da      	b.n	800749e <scalbn+0x36>
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	dd08      	ble.n	80074fe <scalbn+0x96>
 80074ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074f8:	ec45 4b10 	vmov	d0, r4, r5
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007502:	da0d      	bge.n	8007520 <scalbn+0xb8>
 8007504:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007508:	429e      	cmp	r6, r3
 800750a:	ec45 4b11 	vmov	d1, r4, r5
 800750e:	dce1      	bgt.n	80074d4 <scalbn+0x6c>
 8007510:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007538 <scalbn+0xd0>
 8007514:	f000 fbc2 	bl	8007c9c <copysign>
 8007518:	a307      	add	r3, pc, #28	; (adr r3, 8007538 <scalbn+0xd0>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	e7e0      	b.n	80074e2 <scalbn+0x7a>
 8007520:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007524:	3236      	adds	r2, #54	; 0x36
 8007526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800752a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800752e:	4620      	mov	r0, r4
 8007530:	4629      	mov	r1, r5
 8007532:	2200      	movs	r2, #0
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <scalbn+0xe8>)
 8007536:	e7b2      	b.n	800749e <scalbn+0x36>
 8007538:	c2f8f359 	.word	0xc2f8f359
 800753c:	01a56e1f 	.word	0x01a56e1f
 8007540:	8800759c 	.word	0x8800759c
 8007544:	7e37e43c 	.word	0x7e37e43c
 8007548:	43500000 	.word	0x43500000
 800754c:	ffff3cb0 	.word	0xffff3cb0
 8007550:	3c900000 	.word	0x3c900000

08007554 <_sbrk_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4c06      	ldr	r4, [pc, #24]	; (8007570 <_sbrk_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4605      	mov	r5, r0
 800755c:	4608      	mov	r0, r1
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	f7fc fb9e 	bl	8003ca0 <_sbrk>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_sbrk_r+0x1a>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	b103      	cbz	r3, 800756e <_sbrk_r+0x1a>
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	200002fc 	.word	0x200002fc

08007574 <std>:
 8007574:	2300      	movs	r3, #0
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	e9c0 3300 	strd	r3, r3, [r0]
 800757e:	6083      	str	r3, [r0, #8]
 8007580:	8181      	strh	r1, [r0, #12]
 8007582:	6643      	str	r3, [r0, #100]	; 0x64
 8007584:	81c2      	strh	r2, [r0, #14]
 8007586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800758a:	6183      	str	r3, [r0, #24]
 800758c:	4619      	mov	r1, r3
 800758e:	2208      	movs	r2, #8
 8007590:	305c      	adds	r0, #92	; 0x5c
 8007592:	f7ff fe37 	bl	8007204 <memset>
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <std+0x38>)
 8007598:	6263      	str	r3, [r4, #36]	; 0x24
 800759a:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <std+0x3c>)
 800759c:	62a3      	str	r3, [r4, #40]	; 0x28
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <std+0x40>)
 80075a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <std+0x44>)
 80075a4:	6224      	str	r4, [r4, #32]
 80075a6:	6323      	str	r3, [r4, #48]	; 0x30
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	bf00      	nop
 80075ac:	08007ccb 	.word	0x08007ccb
 80075b0:	08007ced 	.word	0x08007ced
 80075b4:	08007d25 	.word	0x08007d25
 80075b8:	08007d49 	.word	0x08007d49

080075bc <_cleanup_r>:
 80075bc:	4901      	ldr	r1, [pc, #4]	; (80075c4 <_cleanup_r+0x8>)
 80075be:	f000 b885 	b.w	80076cc <_fwalk_reent>
 80075c2:	bf00      	nop
 80075c4:	08008021 	.word	0x08008021

080075c8 <__sfmoreglue>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	1e4a      	subs	r2, r1, #1
 80075cc:	2568      	movs	r5, #104	; 0x68
 80075ce:	4355      	muls	r5, r2
 80075d0:	460e      	mov	r6, r1
 80075d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075d6:	f7ff fe6b 	bl	80072b0 <_malloc_r>
 80075da:	4604      	mov	r4, r0
 80075dc:	b140      	cbz	r0, 80075f0 <__sfmoreglue+0x28>
 80075de:	2100      	movs	r1, #0
 80075e0:	e9c0 1600 	strd	r1, r6, [r0]
 80075e4:	300c      	adds	r0, #12
 80075e6:	60a0      	str	r0, [r4, #8]
 80075e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075ec:	f7ff fe0a 	bl	8007204 <memset>
 80075f0:	4620      	mov	r0, r4
 80075f2:	bd70      	pop	{r4, r5, r6, pc}

080075f4 <__sinit>:
 80075f4:	6983      	ldr	r3, [r0, #24]
 80075f6:	b510      	push	{r4, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	bb33      	cbnz	r3, 800764a <__sinit+0x56>
 80075fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007600:	6503      	str	r3, [r0, #80]	; 0x50
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <__sinit+0x58>)
 8007604:	4a12      	ldr	r2, [pc, #72]	; (8007650 <__sinit+0x5c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6282      	str	r2, [r0, #40]	; 0x28
 800760a:	4298      	cmp	r0, r3
 800760c:	bf04      	itt	eq
 800760e:	2301      	moveq	r3, #1
 8007610:	6183      	streq	r3, [r0, #24]
 8007612:	f000 f81f 	bl	8007654 <__sfp>
 8007616:	6060      	str	r0, [r4, #4]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f81b 	bl	8007654 <__sfp>
 800761e:	60a0      	str	r0, [r4, #8]
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f817 	bl	8007654 <__sfp>
 8007626:	2200      	movs	r2, #0
 8007628:	60e0      	str	r0, [r4, #12]
 800762a:	2104      	movs	r1, #4
 800762c:	6860      	ldr	r0, [r4, #4]
 800762e:	f7ff ffa1 	bl	8007574 <std>
 8007632:	2201      	movs	r2, #1
 8007634:	2109      	movs	r1, #9
 8007636:	68a0      	ldr	r0, [r4, #8]
 8007638:	f7ff ff9c 	bl	8007574 <std>
 800763c:	2202      	movs	r2, #2
 800763e:	2112      	movs	r1, #18
 8007640:	68e0      	ldr	r0, [r4, #12]
 8007642:	f7ff ff97 	bl	8007574 <std>
 8007646:	2301      	movs	r3, #1
 8007648:	61a3      	str	r3, [r4, #24]
 800764a:	bd10      	pop	{r4, pc}
 800764c:	0800927c 	.word	0x0800927c
 8007650:	080075bd 	.word	0x080075bd

08007654 <__sfp>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <__sfp+0x70>)
 8007658:	681e      	ldr	r6, [r3, #0]
 800765a:	69b3      	ldr	r3, [r6, #24]
 800765c:	4607      	mov	r7, r0
 800765e:	b913      	cbnz	r3, 8007666 <__sfp+0x12>
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ffc7 	bl	80075f4 <__sinit>
 8007666:	3648      	adds	r6, #72	; 0x48
 8007668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800766c:	3b01      	subs	r3, #1
 800766e:	d503      	bpl.n	8007678 <__sfp+0x24>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	b133      	cbz	r3, 8007682 <__sfp+0x2e>
 8007674:	6836      	ldr	r6, [r6, #0]
 8007676:	e7f7      	b.n	8007668 <__sfp+0x14>
 8007678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800767c:	b16d      	cbz	r5, 800769a <__sfp+0x46>
 800767e:	3468      	adds	r4, #104	; 0x68
 8007680:	e7f4      	b.n	800766c <__sfp+0x18>
 8007682:	2104      	movs	r1, #4
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff9f 	bl	80075c8 <__sfmoreglue>
 800768a:	6030      	str	r0, [r6, #0]
 800768c:	2800      	cmp	r0, #0
 800768e:	d1f1      	bne.n	8007674 <__sfp+0x20>
 8007690:	230c      	movs	r3, #12
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4604      	mov	r4, r0
 8007696:	4620      	mov	r0, r4
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <__sfp+0x74>)
 800769c:	6665      	str	r5, [r4, #100]	; 0x64
 800769e:	e9c4 5500 	strd	r5, r5, [r4]
 80076a2:	60a5      	str	r5, [r4, #8]
 80076a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80076a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80076ac:	2208      	movs	r2, #8
 80076ae:	4629      	mov	r1, r5
 80076b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076b4:	f7ff fda6 	bl	8007204 <memset>
 80076b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076c0:	e7e9      	b.n	8007696 <__sfp+0x42>
 80076c2:	bf00      	nop
 80076c4:	0800927c 	.word	0x0800927c
 80076c8:	ffff0001 	.word	0xffff0001

080076cc <_fwalk_reent>:
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076d8:	2600      	movs	r6, #0
 80076da:	b914      	cbnz	r4, 80076e2 <_fwalk_reent+0x16>
 80076dc:	4630      	mov	r0, r6
 80076de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80076e6:	3f01      	subs	r7, #1
 80076e8:	d501      	bpl.n	80076ee <_fwalk_reent+0x22>
 80076ea:	6824      	ldr	r4, [r4, #0]
 80076ec:	e7f5      	b.n	80076da <_fwalk_reent+0xe>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d907      	bls.n	8007704 <_fwalk_reent+0x38>
 80076f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d003      	beq.n	8007704 <_fwalk_reent+0x38>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4640      	mov	r0, r8
 8007700:	47c8      	blx	r9
 8007702:	4306      	orrs	r6, r0
 8007704:	3568      	adds	r5, #104	; 0x68
 8007706:	e7ee      	b.n	80076e6 <_fwalk_reent+0x1a>

08007708 <__malloc_lock>:
 8007708:	4770      	bx	lr

0800770a <__malloc_unlock>:
 800770a:	4770      	bx	lr

0800770c <__sfputc_r>:
 800770c:	6893      	ldr	r3, [r2, #8]
 800770e:	3b01      	subs	r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	b410      	push	{r4}
 8007714:	6093      	str	r3, [r2, #8]
 8007716:	da08      	bge.n	800772a <__sfputc_r+0x1e>
 8007718:	6994      	ldr	r4, [r2, #24]
 800771a:	42a3      	cmp	r3, r4
 800771c:	db01      	blt.n	8007722 <__sfputc_r+0x16>
 800771e:	290a      	cmp	r1, #10
 8007720:	d103      	bne.n	800772a <__sfputc_r+0x1e>
 8007722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007726:	f000 bb13 	b.w	8007d50 <__swbuf_r>
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	1c58      	adds	r0, r3, #1
 800772e:	6010      	str	r0, [r2, #0]
 8007730:	7019      	strb	r1, [r3, #0]
 8007732:	4608      	mov	r0, r1
 8007734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007738:	4770      	bx	lr

0800773a <__sfputs_r>:
 800773a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	4614      	mov	r4, r2
 8007742:	18d5      	adds	r5, r2, r3
 8007744:	42ac      	cmp	r4, r5
 8007746:	d101      	bne.n	800774c <__sfputs_r+0x12>
 8007748:	2000      	movs	r0, #0
 800774a:	e007      	b.n	800775c <__sfputs_r+0x22>
 800774c:	463a      	mov	r2, r7
 800774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ffda 	bl	800770c <__sfputc_r>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d1f3      	bne.n	8007744 <__sfputs_r+0xa>
 800775c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007760 <_vfiprintf_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	460c      	mov	r4, r1
 8007766:	b09d      	sub	sp, #116	; 0x74
 8007768:	4617      	mov	r7, r2
 800776a:	461d      	mov	r5, r3
 800776c:	4606      	mov	r6, r0
 800776e:	b118      	cbz	r0, 8007778 <_vfiprintf_r+0x18>
 8007770:	6983      	ldr	r3, [r0, #24]
 8007772:	b90b      	cbnz	r3, 8007778 <_vfiprintf_r+0x18>
 8007774:	f7ff ff3e 	bl	80075f4 <__sinit>
 8007778:	4b7c      	ldr	r3, [pc, #496]	; (800796c <_vfiprintf_r+0x20c>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d158      	bne.n	8007830 <_vfiprintf_r+0xd0>
 800777e:	6874      	ldr	r4, [r6, #4]
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	0718      	lsls	r0, r3, #28
 8007784:	d55e      	bpl.n	8007844 <_vfiprintf_r+0xe4>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d05b      	beq.n	8007844 <_vfiprintf_r+0xe4>
 800778c:	2300      	movs	r3, #0
 800778e:	9309      	str	r3, [sp, #36]	; 0x24
 8007790:	2320      	movs	r3, #32
 8007792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007796:	2330      	movs	r3, #48	; 0x30
 8007798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800779c:	9503      	str	r5, [sp, #12]
 800779e:	f04f 0b01 	mov.w	fp, #1
 80077a2:	46b8      	mov	r8, r7
 80077a4:	4645      	mov	r5, r8
 80077a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077aa:	b10b      	cbz	r3, 80077b0 <_vfiprintf_r+0x50>
 80077ac:	2b25      	cmp	r3, #37	; 0x25
 80077ae:	d154      	bne.n	800785a <_vfiprintf_r+0xfa>
 80077b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80077b4:	d00b      	beq.n	80077ce <_vfiprintf_r+0x6e>
 80077b6:	4653      	mov	r3, sl
 80077b8:	463a      	mov	r2, r7
 80077ba:	4621      	mov	r1, r4
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff ffbc 	bl	800773a <__sfputs_r>
 80077c2:	3001      	adds	r0, #1
 80077c4:	f000 80c2 	beq.w	800794c <_vfiprintf_r+0x1ec>
 80077c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ca:	4453      	add	r3, sl
 80077cc:	9309      	str	r3, [sp, #36]	; 0x24
 80077ce:	f898 3000 	ldrb.w	r3, [r8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80ba 	beq.w	800794c <_vfiprintf_r+0x1ec>
 80077d8:	2300      	movs	r3, #0
 80077da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	9307      	str	r3, [sp, #28]
 80077e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ea:	931a      	str	r3, [sp, #104]	; 0x68
 80077ec:	46a8      	mov	r8, r5
 80077ee:	2205      	movs	r2, #5
 80077f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80077f4:	485e      	ldr	r0, [pc, #376]	; (8007970 <_vfiprintf_r+0x210>)
 80077f6:	f7f8 fd0b 	bl	8000210 <memchr>
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	bb78      	cbnz	r0, 800785e <_vfiprintf_r+0xfe>
 80077fe:	06d9      	lsls	r1, r3, #27
 8007800:	bf44      	itt	mi
 8007802:	2220      	movmi	r2, #32
 8007804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007808:	071a      	lsls	r2, r3, #28
 800780a:	bf44      	itt	mi
 800780c:	222b      	movmi	r2, #43	; 0x2b
 800780e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007812:	782a      	ldrb	r2, [r5, #0]
 8007814:	2a2a      	cmp	r2, #42	; 0x2a
 8007816:	d02a      	beq.n	800786e <_vfiprintf_r+0x10e>
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	46a8      	mov	r8, r5
 800781c:	2000      	movs	r0, #0
 800781e:	250a      	movs	r5, #10
 8007820:	4641      	mov	r1, r8
 8007822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007826:	3b30      	subs	r3, #48	; 0x30
 8007828:	2b09      	cmp	r3, #9
 800782a:	d969      	bls.n	8007900 <_vfiprintf_r+0x1a0>
 800782c:	b360      	cbz	r0, 8007888 <_vfiprintf_r+0x128>
 800782e:	e024      	b.n	800787a <_vfiprintf_r+0x11a>
 8007830:	4b50      	ldr	r3, [pc, #320]	; (8007974 <_vfiprintf_r+0x214>)
 8007832:	429c      	cmp	r4, r3
 8007834:	d101      	bne.n	800783a <_vfiprintf_r+0xda>
 8007836:	68b4      	ldr	r4, [r6, #8]
 8007838:	e7a2      	b.n	8007780 <_vfiprintf_r+0x20>
 800783a:	4b4f      	ldr	r3, [pc, #316]	; (8007978 <_vfiprintf_r+0x218>)
 800783c:	429c      	cmp	r4, r3
 800783e:	bf08      	it	eq
 8007840:	68f4      	ldreq	r4, [r6, #12]
 8007842:	e79d      	b.n	8007780 <_vfiprintf_r+0x20>
 8007844:	4621      	mov	r1, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f000 fae6 	bl	8007e18 <__swsetup_r>
 800784c:	2800      	cmp	r0, #0
 800784e:	d09d      	beq.n	800778c <_vfiprintf_r+0x2c>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007854:	b01d      	add	sp, #116	; 0x74
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	46a8      	mov	r8, r5
 800785c:	e7a2      	b.n	80077a4 <_vfiprintf_r+0x44>
 800785e:	4a44      	ldr	r2, [pc, #272]	; (8007970 <_vfiprintf_r+0x210>)
 8007860:	1a80      	subs	r0, r0, r2
 8007862:	fa0b f000 	lsl.w	r0, fp, r0
 8007866:	4318      	orrs	r0, r3
 8007868:	9004      	str	r0, [sp, #16]
 800786a:	4645      	mov	r5, r8
 800786c:	e7be      	b.n	80077ec <_vfiprintf_r+0x8c>
 800786e:	9a03      	ldr	r2, [sp, #12]
 8007870:	1d11      	adds	r1, r2, #4
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	9103      	str	r1, [sp, #12]
 8007876:	2a00      	cmp	r2, #0
 8007878:	db01      	blt.n	800787e <_vfiprintf_r+0x11e>
 800787a:	9207      	str	r2, [sp, #28]
 800787c:	e004      	b.n	8007888 <_vfiprintf_r+0x128>
 800787e:	4252      	negs	r2, r2
 8007880:	f043 0302 	orr.w	r3, r3, #2
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	f898 3000 	ldrb.w	r3, [r8]
 800788c:	2b2e      	cmp	r3, #46	; 0x2e
 800788e:	d10e      	bne.n	80078ae <_vfiprintf_r+0x14e>
 8007890:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007894:	2b2a      	cmp	r3, #42	; 0x2a
 8007896:	d138      	bne.n	800790a <_vfiprintf_r+0x1aa>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9203      	str	r2, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfb8      	it	lt
 80078a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078a8:	f108 0802 	add.w	r8, r8, #2
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	4d33      	ldr	r5, [pc, #204]	; (800797c <_vfiprintf_r+0x21c>)
 80078b0:	f898 1000 	ldrb.w	r1, [r8]
 80078b4:	2203      	movs	r2, #3
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7f8 fcaa 	bl	8000210 <memchr>
 80078bc:	b140      	cbz	r0, 80078d0 <_vfiprintf_r+0x170>
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	1b40      	subs	r0, r0, r5
 80078c2:	fa03 f000 	lsl.w	r0, r3, r0
 80078c6:	9b04      	ldr	r3, [sp, #16]
 80078c8:	4303      	orrs	r3, r0
 80078ca:	f108 0801 	add.w	r8, r8, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	f898 1000 	ldrb.w	r1, [r8]
 80078d4:	482a      	ldr	r0, [pc, #168]	; (8007980 <_vfiprintf_r+0x220>)
 80078d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078da:	2206      	movs	r2, #6
 80078dc:	f108 0701 	add.w	r7, r8, #1
 80078e0:	f7f8 fc96 	bl	8000210 <memchr>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d037      	beq.n	8007958 <_vfiprintf_r+0x1f8>
 80078e8:	4b26      	ldr	r3, [pc, #152]	; (8007984 <_vfiprintf_r+0x224>)
 80078ea:	bb1b      	cbnz	r3, 8007934 <_vfiprintf_r+0x1d4>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	3307      	adds	r3, #7
 80078f0:	f023 0307 	bic.w	r3, r3, #7
 80078f4:	3308      	adds	r3, #8
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	444b      	add	r3, r9
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	e750      	b.n	80077a2 <_vfiprintf_r+0x42>
 8007900:	fb05 3202 	mla	r2, r5, r2, r3
 8007904:	2001      	movs	r0, #1
 8007906:	4688      	mov	r8, r1
 8007908:	e78a      	b.n	8007820 <_vfiprintf_r+0xc0>
 800790a:	2300      	movs	r3, #0
 800790c:	f108 0801 	add.w	r8, r8, #1
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	4619      	mov	r1, r3
 8007914:	250a      	movs	r5, #10
 8007916:	4640      	mov	r0, r8
 8007918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791c:	3a30      	subs	r2, #48	; 0x30
 800791e:	2a09      	cmp	r2, #9
 8007920:	d903      	bls.n	800792a <_vfiprintf_r+0x1ca>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0c3      	beq.n	80078ae <_vfiprintf_r+0x14e>
 8007926:	9105      	str	r1, [sp, #20]
 8007928:	e7c1      	b.n	80078ae <_vfiprintf_r+0x14e>
 800792a:	fb05 2101 	mla	r1, r5, r1, r2
 800792e:	2301      	movs	r3, #1
 8007930:	4680      	mov	r8, r0
 8007932:	e7f0      	b.n	8007916 <_vfiprintf_r+0x1b6>
 8007934:	ab03      	add	r3, sp, #12
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	4622      	mov	r2, r4
 800793a:	4b13      	ldr	r3, [pc, #76]	; (8007988 <_vfiprintf_r+0x228>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	4630      	mov	r0, r6
 8007940:	f3af 8000 	nop.w
 8007944:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007948:	4681      	mov	r9, r0
 800794a:	d1d5      	bne.n	80078f8 <_vfiprintf_r+0x198>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	065b      	lsls	r3, r3, #25
 8007950:	f53f af7e 	bmi.w	8007850 <_vfiprintf_r+0xf0>
 8007954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007956:	e77d      	b.n	8007854 <_vfiprintf_r+0xf4>
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4622      	mov	r2, r4
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <_vfiprintf_r+0x228>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f888 	bl	8007a78 <_printf_i>
 8007968:	e7ec      	b.n	8007944 <_vfiprintf_r+0x1e4>
 800796a:	bf00      	nop
 800796c:	080092a0 	.word	0x080092a0
 8007970:	080092e0 	.word	0x080092e0
 8007974:	080092c0 	.word	0x080092c0
 8007978:	08009280 	.word	0x08009280
 800797c:	080092e6 	.word	0x080092e6
 8007980:	080092ea 	.word	0x080092ea
 8007984:	00000000 	.word	0x00000000
 8007988:	0800773b 	.word	0x0800773b

0800798c <_printf_common>:
 800798c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007990:	4691      	mov	r9, r2
 8007992:	461f      	mov	r7, r3
 8007994:	688a      	ldr	r2, [r1, #8]
 8007996:	690b      	ldr	r3, [r1, #16]
 8007998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800799c:	4293      	cmp	r3, r2
 800799e:	bfb8      	it	lt
 80079a0:	4613      	movlt	r3, r2
 80079a2:	f8c9 3000 	str.w	r3, [r9]
 80079a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079aa:	4606      	mov	r6, r0
 80079ac:	460c      	mov	r4, r1
 80079ae:	b112      	cbz	r2, 80079b6 <_printf_common+0x2a>
 80079b0:	3301      	adds	r3, #1
 80079b2:	f8c9 3000 	str.w	r3, [r9]
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	0699      	lsls	r1, r3, #26
 80079ba:	bf42      	ittt	mi
 80079bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079c0:	3302      	addmi	r3, #2
 80079c2:	f8c9 3000 	strmi.w	r3, [r9]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d107      	bne.n	80079de <_printf_common+0x52>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	f8d9 2000 	ldr.w	r2, [r9]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	42ab      	cmp	r3, r5
 80079dc:	dc28      	bgt.n	8007a30 <_printf_common+0xa4>
 80079de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	3300      	adds	r3, #0
 80079e6:	bf18      	it	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	0692      	lsls	r2, r2, #26
 80079ec:	d42d      	bmi.n	8007a4a <_printf_common+0xbe>
 80079ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f2:	4639      	mov	r1, r7
 80079f4:	4630      	mov	r0, r6
 80079f6:	47c0      	blx	r8
 80079f8:	3001      	adds	r0, #1
 80079fa:	d020      	beq.n	8007a3e <_printf_common+0xb2>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	68e5      	ldr	r5, [r4, #12]
 8007a00:	f8d9 2000 	ldr.w	r2, [r9]
 8007a04:	f003 0306 	and.w	r3, r3, #6
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	bf08      	it	eq
 8007a0c:	1aad      	subeq	r5, r5, r2
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	bf0c      	ite	eq
 8007a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a18:	2500      	movne	r5, #0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfc4      	itt	gt
 8007a1e:	1a9b      	subgt	r3, r3, r2
 8007a20:	18ed      	addgt	r5, r5, r3
 8007a22:	f04f 0900 	mov.w	r9, #0
 8007a26:	341a      	adds	r4, #26
 8007a28:	454d      	cmp	r5, r9
 8007a2a:	d11a      	bne.n	8007a62 <_printf_common+0xd6>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e008      	b.n	8007a42 <_printf_common+0xb6>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4652      	mov	r2, sl
 8007a34:	4639      	mov	r1, r7
 8007a36:	4630      	mov	r0, r6
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d103      	bne.n	8007a46 <_printf_common+0xba>
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	3501      	adds	r5, #1
 8007a48:	e7c3      	b.n	80079d2 <_printf_common+0x46>
 8007a4a:	18e1      	adds	r1, r4, r3
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	2030      	movs	r0, #48	; 0x30
 8007a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a54:	4422      	add	r2, r4
 8007a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a5e:	3302      	adds	r3, #2
 8007a60:	e7c5      	b.n	80079ee <_printf_common+0x62>
 8007a62:	2301      	movs	r3, #1
 8007a64:	4622      	mov	r2, r4
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	47c0      	blx	r8
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d0e6      	beq.n	8007a3e <_printf_common+0xb2>
 8007a70:	f109 0901 	add.w	r9, r9, #1
 8007a74:	e7d8      	b.n	8007a28 <_printf_common+0x9c>
	...

08007a78 <_printf_i>:
 8007a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a80:	460c      	mov	r4, r1
 8007a82:	7e09      	ldrb	r1, [r1, #24]
 8007a84:	b085      	sub	sp, #20
 8007a86:	296e      	cmp	r1, #110	; 0x6e
 8007a88:	4617      	mov	r7, r2
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	4698      	mov	r8, r3
 8007a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a90:	f000 80b3 	beq.w	8007bfa <_printf_i+0x182>
 8007a94:	d822      	bhi.n	8007adc <_printf_i+0x64>
 8007a96:	2963      	cmp	r1, #99	; 0x63
 8007a98:	d036      	beq.n	8007b08 <_printf_i+0x90>
 8007a9a:	d80a      	bhi.n	8007ab2 <_printf_i+0x3a>
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	f000 80b9 	beq.w	8007c14 <_printf_i+0x19c>
 8007aa2:	2958      	cmp	r1, #88	; 0x58
 8007aa4:	f000 8083 	beq.w	8007bae <_printf_i+0x136>
 8007aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ab0:	e032      	b.n	8007b18 <_printf_i+0xa0>
 8007ab2:	2964      	cmp	r1, #100	; 0x64
 8007ab4:	d001      	beq.n	8007aba <_printf_i+0x42>
 8007ab6:	2969      	cmp	r1, #105	; 0x69
 8007ab8:	d1f6      	bne.n	8007aa8 <_printf_i+0x30>
 8007aba:	6820      	ldr	r0, [r4, #0]
 8007abc:	6813      	ldr	r3, [r2, #0]
 8007abe:	0605      	lsls	r5, r0, #24
 8007ac0:	f103 0104 	add.w	r1, r3, #4
 8007ac4:	d52a      	bpl.n	8007b1c <_printf_i+0xa4>
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6011      	str	r1, [r2, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da03      	bge.n	8007ad6 <_printf_i+0x5e>
 8007ace:	222d      	movs	r2, #45	; 0x2d
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ad6:	486f      	ldr	r0, [pc, #444]	; (8007c94 <_printf_i+0x21c>)
 8007ad8:	220a      	movs	r2, #10
 8007ada:	e039      	b.n	8007b50 <_printf_i+0xd8>
 8007adc:	2973      	cmp	r1, #115	; 0x73
 8007ade:	f000 809d 	beq.w	8007c1c <_printf_i+0x1a4>
 8007ae2:	d808      	bhi.n	8007af6 <_printf_i+0x7e>
 8007ae4:	296f      	cmp	r1, #111	; 0x6f
 8007ae6:	d020      	beq.n	8007b2a <_printf_i+0xb2>
 8007ae8:	2970      	cmp	r1, #112	; 0x70
 8007aea:	d1dd      	bne.n	8007aa8 <_printf_i+0x30>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	f043 0320 	orr.w	r3, r3, #32
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	e003      	b.n	8007afe <_printf_i+0x86>
 8007af6:	2975      	cmp	r1, #117	; 0x75
 8007af8:	d017      	beq.n	8007b2a <_printf_i+0xb2>
 8007afa:	2978      	cmp	r1, #120	; 0x78
 8007afc:	d1d4      	bne.n	8007aa8 <_printf_i+0x30>
 8007afe:	2378      	movs	r3, #120	; 0x78
 8007b00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b04:	4864      	ldr	r0, [pc, #400]	; (8007c98 <_printf_i+0x220>)
 8007b06:	e055      	b.n	8007bb4 <_printf_i+0x13c>
 8007b08:	6813      	ldr	r3, [r2, #0]
 8007b0a:	1d19      	adds	r1, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6011      	str	r1, [r2, #0]
 8007b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e08c      	b.n	8007c36 <_printf_i+0x1be>
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6011      	str	r1, [r2, #0]
 8007b20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b24:	bf18      	it	ne
 8007b26:	b21b      	sxthne	r3, r3
 8007b28:	e7cf      	b.n	8007aca <_printf_i+0x52>
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	6825      	ldr	r5, [r4, #0]
 8007b2e:	1d18      	adds	r0, r3, #4
 8007b30:	6010      	str	r0, [r2, #0]
 8007b32:	0628      	lsls	r0, r5, #24
 8007b34:	d501      	bpl.n	8007b3a <_printf_i+0xc2>
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	e002      	b.n	8007b40 <_printf_i+0xc8>
 8007b3a:	0668      	lsls	r0, r5, #25
 8007b3c:	d5fb      	bpl.n	8007b36 <_printf_i+0xbe>
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	4854      	ldr	r0, [pc, #336]	; (8007c94 <_printf_i+0x21c>)
 8007b42:	296f      	cmp	r1, #111	; 0x6f
 8007b44:	bf14      	ite	ne
 8007b46:	220a      	movne	r2, #10
 8007b48:	2208      	moveq	r2, #8
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b50:	6865      	ldr	r5, [r4, #4]
 8007b52:	60a5      	str	r5, [r4, #8]
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	f2c0 8095 	blt.w	8007c84 <_printf_i+0x20c>
 8007b5a:	6821      	ldr	r1, [r4, #0]
 8007b5c:	f021 0104 	bic.w	r1, r1, #4
 8007b60:	6021      	str	r1, [r4, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d13d      	bne.n	8007be2 <_printf_i+0x16a>
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	f040 808e 	bne.w	8007c88 <_printf_i+0x210>
 8007b6c:	4665      	mov	r5, ip
 8007b6e:	2a08      	cmp	r2, #8
 8007b70:	d10b      	bne.n	8007b8a <_printf_i+0x112>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	07db      	lsls	r3, r3, #31
 8007b76:	d508      	bpl.n	8007b8a <_printf_i+0x112>
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bfde      	ittt	le
 8007b80:	2330      	movle	r3, #48	; 0x30
 8007b82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b8a:	ebac 0305 	sub.w	r3, ip, r5
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	f8cd 8000 	str.w	r8, [sp]
 8007b94:	463b      	mov	r3, r7
 8007b96:	aa03      	add	r2, sp, #12
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f7ff fef6 	bl	800798c <_printf_common>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d14d      	bne.n	8007c40 <_printf_i+0x1c8>
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ba8:	b005      	add	sp, #20
 8007baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bae:	4839      	ldr	r0, [pc, #228]	; (8007c94 <_printf_i+0x21c>)
 8007bb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bb4:	6813      	ldr	r3, [r2, #0]
 8007bb6:	6821      	ldr	r1, [r4, #0]
 8007bb8:	1d1d      	adds	r5, r3, #4
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6015      	str	r5, [r2, #0]
 8007bbe:	060a      	lsls	r2, r1, #24
 8007bc0:	d50b      	bpl.n	8007bda <_printf_i+0x162>
 8007bc2:	07ca      	lsls	r2, r1, #31
 8007bc4:	bf44      	itt	mi
 8007bc6:	f041 0120 	orrmi.w	r1, r1, #32
 8007bca:	6021      	strmi	r1, [r4, #0]
 8007bcc:	b91b      	cbnz	r3, 8007bd6 <_printf_i+0x15e>
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	f022 0220 	bic.w	r2, r2, #32
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	2210      	movs	r2, #16
 8007bd8:	e7b7      	b.n	8007b4a <_printf_i+0xd2>
 8007bda:	064d      	lsls	r5, r1, #25
 8007bdc:	bf48      	it	mi
 8007bde:	b29b      	uxthmi	r3, r3
 8007be0:	e7ef      	b.n	8007bc2 <_printf_i+0x14a>
 8007be2:	4665      	mov	r5, ip
 8007be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007be8:	fb02 3311 	mls	r3, r2, r1, r3
 8007bec:	5cc3      	ldrb	r3, [r0, r3]
 8007bee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	d1f5      	bne.n	8007be4 <_printf_i+0x16c>
 8007bf8:	e7b9      	b.n	8007b6e <_printf_i+0xf6>
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	6825      	ldr	r5, [r4, #0]
 8007bfe:	6961      	ldr	r1, [r4, #20]
 8007c00:	1d18      	adds	r0, r3, #4
 8007c02:	6010      	str	r0, [r2, #0]
 8007c04:	0628      	lsls	r0, r5, #24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	d501      	bpl.n	8007c0e <_printf_i+0x196>
 8007c0a:	6019      	str	r1, [r3, #0]
 8007c0c:	e002      	b.n	8007c14 <_printf_i+0x19c>
 8007c0e:	066a      	lsls	r2, r5, #25
 8007c10:	d5fb      	bpl.n	8007c0a <_printf_i+0x192>
 8007c12:	8019      	strh	r1, [r3, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	4665      	mov	r5, ip
 8007c1a:	e7b9      	b.n	8007b90 <_printf_i+0x118>
 8007c1c:	6813      	ldr	r3, [r2, #0]
 8007c1e:	1d19      	adds	r1, r3, #4
 8007c20:	6011      	str	r1, [r2, #0]
 8007c22:	681d      	ldr	r5, [r3, #0]
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	2100      	movs	r1, #0
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f7f8 faf1 	bl	8000210 <memchr>
 8007c2e:	b108      	cbz	r0, 8007c34 <_printf_i+0x1bc>
 8007c30:	1b40      	subs	r0, r0, r5
 8007c32:	6060      	str	r0, [r4, #4]
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3e:	e7a7      	b.n	8007b90 <_printf_i+0x118>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	462a      	mov	r2, r5
 8007c44:	4639      	mov	r1, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	47c0      	blx	r8
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d0aa      	beq.n	8007ba4 <_printf_i+0x12c>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	079b      	lsls	r3, r3, #30
 8007c52:	d413      	bmi.n	8007c7c <_printf_i+0x204>
 8007c54:	68e0      	ldr	r0, [r4, #12]
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	bfb8      	it	lt
 8007c5c:	4618      	movlt	r0, r3
 8007c5e:	e7a3      	b.n	8007ba8 <_printf_i+0x130>
 8007c60:	2301      	movs	r3, #1
 8007c62:	464a      	mov	r2, r9
 8007c64:	4639      	mov	r1, r7
 8007c66:	4630      	mov	r0, r6
 8007c68:	47c0      	blx	r8
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d09a      	beq.n	8007ba4 <_printf_i+0x12c>
 8007c6e:	3501      	adds	r5, #1
 8007c70:	68e3      	ldr	r3, [r4, #12]
 8007c72:	9a03      	ldr	r2, [sp, #12]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	dcf2      	bgt.n	8007c60 <_printf_i+0x1e8>
 8007c7a:	e7eb      	b.n	8007c54 <_printf_i+0x1dc>
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	f104 0919 	add.w	r9, r4, #25
 8007c82:	e7f5      	b.n	8007c70 <_printf_i+0x1f8>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1ac      	bne.n	8007be2 <_printf_i+0x16a>
 8007c88:	7803      	ldrb	r3, [r0, #0]
 8007c8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c92:	e76c      	b.n	8007b6e <_printf_i+0xf6>
 8007c94:	080092f1 	.word	0x080092f1
 8007c98:	08009302 	.word	0x08009302

08007c9c <copysign>:
 8007c9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ca0:	ee11 0a90 	vmov	r0, s3
 8007ca4:	ee10 2a10 	vmov	r2, s0
 8007ca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007cac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007cb0:	ea41 0300 	orr.w	r3, r1, r0
 8007cb4:	ec43 2b10 	vmov	d0, r2, r3
 8007cb8:	4770      	bx	lr

08007cba <finite>:
 8007cba:	ee10 3a90 	vmov	r3, s1
 8007cbe:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8007cc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007cc6:	0fc0      	lsrs	r0, r0, #31
 8007cc8:	4770      	bx	lr

08007cca <__sread>:
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 fa45 	bl	8008160 <_read_r>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	bfab      	itete	ge
 8007cda:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cdc:	89a3      	ldrhlt	r3, [r4, #12]
 8007cde:	181b      	addge	r3, r3, r0
 8007ce0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ce4:	bfac      	ite	ge
 8007ce6:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ce8:	81a3      	strhlt	r3, [r4, #12]
 8007cea:	bd10      	pop	{r4, pc}

08007cec <__swrite>:
 8007cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf0:	461f      	mov	r7, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	05db      	lsls	r3, r3, #23
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4616      	mov	r6, r2
 8007cfc:	d505      	bpl.n	8007d0a <__swrite+0x1e>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	2200      	movs	r2, #0
 8007d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d06:	f000 f9b5 	bl	8008074 <_lseek_r>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	4632      	mov	r2, r6
 8007d18:	463b      	mov	r3, r7
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	f000 b868 	b.w	8007df4 <_write_r>

08007d24 <__sseek>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	460c      	mov	r4, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	f000 f9a2 	bl	8008074 <_lseek_r>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	bf15      	itete	ne
 8007d36:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d38:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d3c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d40:	81a3      	strheq	r3, [r4, #12]
 8007d42:	bf18      	it	ne
 8007d44:	81a3      	strhne	r3, [r4, #12]
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <__sclose>:
 8007d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4c:	f000 b8d2 	b.w	8007ef4 <_close_r>

08007d50 <__swbuf_r>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	4605      	mov	r5, r0
 8007d58:	b118      	cbz	r0, 8007d62 <__swbuf_r+0x12>
 8007d5a:	6983      	ldr	r3, [r0, #24]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <__swbuf_r+0x12>
 8007d5e:	f7ff fc49 	bl	80075f4 <__sinit>
 8007d62:	4b21      	ldr	r3, [pc, #132]	; (8007de8 <__swbuf_r+0x98>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d12a      	bne.n	8007dbe <__swbuf_r+0x6e>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	69a3      	ldr	r3, [r4, #24]
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	071a      	lsls	r2, r3, #28
 8007d72:	d52e      	bpl.n	8007dd2 <__swbuf_r+0x82>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	b363      	cbz	r3, 8007dd2 <__swbuf_r+0x82>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	1ac0      	subs	r0, r0, r3
 8007d7e:	6963      	ldr	r3, [r4, #20]
 8007d80:	b2f6      	uxtb	r6, r6
 8007d82:	4283      	cmp	r3, r0
 8007d84:	4637      	mov	r7, r6
 8007d86:	dc04      	bgt.n	8007d92 <__swbuf_r+0x42>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f948 	bl	8008020 <_fflush_r>
 8007d90:	bb28      	cbnz	r0, 8007dde <__swbuf_r+0x8e>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	701e      	strb	r6, [r3, #0]
 8007da0:	6963      	ldr	r3, [r4, #20]
 8007da2:	3001      	adds	r0, #1
 8007da4:	4283      	cmp	r3, r0
 8007da6:	d004      	beq.n	8007db2 <__swbuf_r+0x62>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	07db      	lsls	r3, r3, #31
 8007dac:	d519      	bpl.n	8007de2 <__swbuf_r+0x92>
 8007dae:	2e0a      	cmp	r6, #10
 8007db0:	d117      	bne.n	8007de2 <__swbuf_r+0x92>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f933 	bl	8008020 <_fflush_r>
 8007dba:	b190      	cbz	r0, 8007de2 <__swbuf_r+0x92>
 8007dbc:	e00f      	b.n	8007dde <__swbuf_r+0x8e>
 8007dbe:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <__swbuf_r+0x9c>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d101      	bne.n	8007dc8 <__swbuf_r+0x78>
 8007dc4:	68ac      	ldr	r4, [r5, #8]
 8007dc6:	e7d0      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <__swbuf_r+0xa0>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	bf08      	it	eq
 8007dce:	68ec      	ldreq	r4, [r5, #12]
 8007dd0:	e7cb      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 f81f 	bl	8007e18 <__swsetup_r>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0cc      	beq.n	8007d78 <__swbuf_r+0x28>
 8007dde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007de2:	4638      	mov	r0, r7
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	080092a0 	.word	0x080092a0
 8007dec:	080092c0 	.word	0x080092c0
 8007df0:	08009280 	.word	0x08009280

08007df4 <_write_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4c07      	ldr	r4, [pc, #28]	; (8007e14 <_write_r+0x20>)
 8007df8:	4605      	mov	r5, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6022      	str	r2, [r4, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7fb fefb 	bl	8003bfe <_write>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_write_r+0x1e>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_write_r+0x1e>
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	200002fc 	.word	0x200002fc

08007e18 <__swsetup_r>:
 8007e18:	4b32      	ldr	r3, [pc, #200]	; (8007ee4 <__swsetup_r+0xcc>)
 8007e1a:	b570      	push	{r4, r5, r6, lr}
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460c      	mov	r4, r1
 8007e22:	b125      	cbz	r5, 8007e2e <__swsetup_r+0x16>
 8007e24:	69ab      	ldr	r3, [r5, #24]
 8007e26:	b913      	cbnz	r3, 8007e2e <__swsetup_r+0x16>
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f7ff fbe3 	bl	80075f4 <__sinit>
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <__swsetup_r+0xd0>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d10f      	bne.n	8007e54 <__swsetup_r+0x3c>
 8007e34:	686c      	ldr	r4, [r5, #4]
 8007e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	0715      	lsls	r5, r2, #28
 8007e3e:	d42c      	bmi.n	8007e9a <__swsetup_r+0x82>
 8007e40:	06d0      	lsls	r0, r2, #27
 8007e42:	d411      	bmi.n	8007e68 <__swsetup_r+0x50>
 8007e44:	2209      	movs	r2, #9
 8007e46:	6032      	str	r2, [r6, #0]
 8007e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e52:	e03e      	b.n	8007ed2 <__swsetup_r+0xba>
 8007e54:	4b25      	ldr	r3, [pc, #148]	; (8007eec <__swsetup_r+0xd4>)
 8007e56:	429c      	cmp	r4, r3
 8007e58:	d101      	bne.n	8007e5e <__swsetup_r+0x46>
 8007e5a:	68ac      	ldr	r4, [r5, #8]
 8007e5c:	e7eb      	b.n	8007e36 <__swsetup_r+0x1e>
 8007e5e:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <__swsetup_r+0xd8>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	bf08      	it	eq
 8007e64:	68ec      	ldreq	r4, [r5, #12]
 8007e66:	e7e6      	b.n	8007e36 <__swsetup_r+0x1e>
 8007e68:	0751      	lsls	r1, r2, #29
 8007e6a:	d512      	bpl.n	8007e92 <__swsetup_r+0x7a>
 8007e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e6e:	b141      	cbz	r1, 8007e82 <__swsetup_r+0x6a>
 8007e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e74:	4299      	cmp	r1, r3
 8007e76:	d002      	beq.n	8007e7e <__swsetup_r+0x66>
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff f9cb 	bl	8007214 <_free_r>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	6363      	str	r3, [r4, #52]	; 0x34
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6063      	str	r3, [r4, #4]
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f043 0308 	orr.w	r3, r3, #8
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	b94b      	cbnz	r3, 8007eb2 <__swsetup_r+0x9a>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea8:	d003      	beq.n	8007eb2 <__swsetup_r+0x9a>
 8007eaa:	4621      	mov	r1, r4
 8007eac:	4630      	mov	r0, r6
 8007eae:	f000 f917 	bl	80080e0 <__smakebuf_r>
 8007eb2:	89a2      	ldrh	r2, [r4, #12]
 8007eb4:	f012 0301 	ands.w	r3, r2, #1
 8007eb8:	d00c      	beq.n	8007ed4 <__swsetup_r+0xbc>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60a3      	str	r3, [r4, #8]
 8007ebe:	6963      	ldr	r3, [r4, #20]
 8007ec0:	425b      	negs	r3, r3
 8007ec2:	61a3      	str	r3, [r4, #24]
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	b953      	cbnz	r3, 8007ede <__swsetup_r+0xc6>
 8007ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ecc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ed0:	d1ba      	bne.n	8007e48 <__swsetup_r+0x30>
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	0792      	lsls	r2, r2, #30
 8007ed6:	bf58      	it	pl
 8007ed8:	6963      	ldrpl	r3, [r4, #20]
 8007eda:	60a3      	str	r3, [r4, #8]
 8007edc:	e7f2      	b.n	8007ec4 <__swsetup_r+0xac>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e7f7      	b.n	8007ed2 <__swsetup_r+0xba>
 8007ee2:	bf00      	nop
 8007ee4:	2000000c 	.word	0x2000000c
 8007ee8:	080092a0 	.word	0x080092a0
 8007eec:	080092c0 	.word	0x080092c0
 8007ef0:	08009280 	.word	0x08009280

08007ef4 <_close_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4c06      	ldr	r4, [pc, #24]	; (8007f10 <_close_r+0x1c>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4605      	mov	r5, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	6023      	str	r3, [r4, #0]
 8007f00:	f7fb fe99 	bl	8003c36 <_close>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_close_r+0x1a>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_close_r+0x1a>
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	200002fc 	.word	0x200002fc

08007f14 <__sflush_r>:
 8007f14:	898a      	ldrh	r2, [r1, #12]
 8007f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	0710      	lsls	r0, r2, #28
 8007f1e:	460c      	mov	r4, r1
 8007f20:	d458      	bmi.n	8007fd4 <__sflush_r+0xc0>
 8007f22:	684b      	ldr	r3, [r1, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dc05      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dc02      	bgt.n	8007f34 <__sflush_r+0x20>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	d0f9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f40:	682f      	ldr	r7, [r5, #0]
 8007f42:	6a21      	ldr	r1, [r4, #32]
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	d032      	beq.n	8007fae <__sflush_r+0x9a>
 8007f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	075a      	lsls	r2, r3, #29
 8007f4e:	d505      	bpl.n	8007f5c <__sflush_r+0x48>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	1ac0      	subs	r0, r0, r3
 8007f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f56:	b10b      	cbz	r3, 8007f5c <__sflush_r+0x48>
 8007f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f5a:	1ac0      	subs	r0, r0, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f62:	6a21      	ldr	r1, [r4, #32]
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b0      	blx	r6
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	d106      	bne.n	8007f7c <__sflush_r+0x68>
 8007f6e:	6829      	ldr	r1, [r5, #0]
 8007f70:	291d      	cmp	r1, #29
 8007f72:	d848      	bhi.n	8008006 <__sflush_r+0xf2>
 8007f74:	4a29      	ldr	r2, [pc, #164]	; (800801c <__sflush_r+0x108>)
 8007f76:	40ca      	lsrs	r2, r1
 8007f78:	07d6      	lsls	r6, r2, #31
 8007f7a:	d544      	bpl.n	8008006 <__sflush_r+0xf2>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	6062      	str	r2, [r4, #4]
 8007f80:	04d9      	lsls	r1, r3, #19
 8007f82:	6922      	ldr	r2, [r4, #16]
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	d504      	bpl.n	8007f92 <__sflush_r+0x7e>
 8007f88:	1c42      	adds	r2, r0, #1
 8007f8a:	d101      	bne.n	8007f90 <__sflush_r+0x7c>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b903      	cbnz	r3, 8007f92 <__sflush_r+0x7e>
 8007f90:	6560      	str	r0, [r4, #84]	; 0x54
 8007f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f94:	602f      	str	r7, [r5, #0]
 8007f96:	2900      	cmp	r1, #0
 8007f98:	d0c9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9e:	4299      	cmp	r1, r3
 8007fa0:	d002      	beq.n	8007fa8 <__sflush_r+0x94>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7ff f936 	bl	8007214 <_free_r>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	6360      	str	r0, [r4, #52]	; 0x34
 8007fac:	e7c0      	b.n	8007f30 <__sflush_r+0x1c>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	47b0      	blx	r6
 8007fb4:	1c41      	adds	r1, r0, #1
 8007fb6:	d1c8      	bne.n	8007f4a <__sflush_r+0x36>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0c5      	beq.n	8007f4a <__sflush_r+0x36>
 8007fbe:	2b1d      	cmp	r3, #29
 8007fc0:	d001      	beq.n	8007fc6 <__sflush_r+0xb2>
 8007fc2:	2b16      	cmp	r3, #22
 8007fc4:	d101      	bne.n	8007fca <__sflush_r+0xb6>
 8007fc6:	602f      	str	r7, [r5, #0]
 8007fc8:	e7b1      	b.n	8007f2e <__sflush_r+0x1a>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e7ad      	b.n	8007f30 <__sflush_r+0x1c>
 8007fd4:	690f      	ldr	r7, [r1, #16]
 8007fd6:	2f00      	cmp	r7, #0
 8007fd8:	d0a9      	beq.n	8007f2e <__sflush_r+0x1a>
 8007fda:	0793      	lsls	r3, r2, #30
 8007fdc:	680e      	ldr	r6, [r1, #0]
 8007fde:	bf08      	it	eq
 8007fe0:	694b      	ldreq	r3, [r1, #20]
 8007fe2:	600f      	str	r7, [r1, #0]
 8007fe4:	bf18      	it	ne
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	eba6 0807 	sub.w	r8, r6, r7
 8007fec:	608b      	str	r3, [r1, #8]
 8007fee:	f1b8 0f00 	cmp.w	r8, #0
 8007ff2:	dd9c      	ble.n	8007f2e <__sflush_r+0x1a>
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	6a21      	ldr	r1, [r4, #32]
 8007ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b0      	blx	r6
 8008000:	2800      	cmp	r0, #0
 8008002:	dc06      	bgt.n	8008012 <__sflush_r+0xfe>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008010:	e78e      	b.n	8007f30 <__sflush_r+0x1c>
 8008012:	4407      	add	r7, r0
 8008014:	eba8 0800 	sub.w	r8, r8, r0
 8008018:	e7e9      	b.n	8007fee <__sflush_r+0xda>
 800801a:	bf00      	nop
 800801c:	20400001 	.word	0x20400001

08008020 <_fflush_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	690b      	ldr	r3, [r1, #16]
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	b1db      	cbz	r3, 8008062 <_fflush_r+0x42>
 800802a:	b118      	cbz	r0, 8008034 <_fflush_r+0x14>
 800802c:	6983      	ldr	r3, [r0, #24]
 800802e:	b90b      	cbnz	r3, 8008034 <_fflush_r+0x14>
 8008030:	f7ff fae0 	bl	80075f4 <__sinit>
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <_fflush_r+0x48>)
 8008036:	429c      	cmp	r4, r3
 8008038:	d109      	bne.n	800804e <_fflush_r+0x2e>
 800803a:	686c      	ldr	r4, [r5, #4]
 800803c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008040:	b17b      	cbz	r3, 8008062 <_fflush_r+0x42>
 8008042:	4621      	mov	r1, r4
 8008044:	4628      	mov	r0, r5
 8008046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804a:	f7ff bf63 	b.w	8007f14 <__sflush_r>
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <_fflush_r+0x4c>)
 8008050:	429c      	cmp	r4, r3
 8008052:	d101      	bne.n	8008058 <_fflush_r+0x38>
 8008054:	68ac      	ldr	r4, [r5, #8]
 8008056:	e7f1      	b.n	800803c <_fflush_r+0x1c>
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <_fflush_r+0x50>)
 800805a:	429c      	cmp	r4, r3
 800805c:	bf08      	it	eq
 800805e:	68ec      	ldreq	r4, [r5, #12]
 8008060:	e7ec      	b.n	800803c <_fflush_r+0x1c>
 8008062:	2000      	movs	r0, #0
 8008064:	bd38      	pop	{r3, r4, r5, pc}
 8008066:	bf00      	nop
 8008068:	080092a0 	.word	0x080092a0
 800806c:	080092c0 	.word	0x080092c0
 8008070:	08009280 	.word	0x08009280

08008074 <_lseek_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4c07      	ldr	r4, [pc, #28]	; (8008094 <_lseek_r+0x20>)
 8008078:	4605      	mov	r5, r0
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	2200      	movs	r2, #0
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7fb fdfe 	bl	8003c84 <_lseek>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_lseek_r+0x1e>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	b103      	cbz	r3, 8008092 <_lseek_r+0x1e>
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	200002fc 	.word	0x200002fc

08008098 <__swhatbuf_r>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	460e      	mov	r6, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	b096      	sub	sp, #88	; 0x58
 80080a4:	4614      	mov	r4, r2
 80080a6:	461d      	mov	r5, r3
 80080a8:	da07      	bge.n	80080ba <__swhatbuf_r+0x22>
 80080aa:	2300      	movs	r3, #0
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	89b3      	ldrh	r3, [r6, #12]
 80080b0:	061a      	lsls	r2, r3, #24
 80080b2:	d410      	bmi.n	80080d6 <__swhatbuf_r+0x3e>
 80080b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b8:	e00e      	b.n	80080d8 <__swhatbuf_r+0x40>
 80080ba:	466a      	mov	r2, sp
 80080bc:	f000 f862 	bl	8008184 <_fstat_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	dbf2      	blt.n	80080aa <__swhatbuf_r+0x12>
 80080c4:	9a01      	ldr	r2, [sp, #4]
 80080c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080ce:	425a      	negs	r2, r3
 80080d0:	415a      	adcs	r2, r3
 80080d2:	602a      	str	r2, [r5, #0]
 80080d4:	e7ee      	b.n	80080b4 <__swhatbuf_r+0x1c>
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	2000      	movs	r0, #0
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	b016      	add	sp, #88	; 0x58
 80080de:	bd70      	pop	{r4, r5, r6, pc}

080080e0 <__smakebuf_r>:
 80080e0:	898b      	ldrh	r3, [r1, #12]
 80080e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080e4:	079d      	lsls	r5, r3, #30
 80080e6:	4606      	mov	r6, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	d507      	bpl.n	80080fc <__smakebuf_r+0x1c>
 80080ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	2301      	movs	r3, #1
 80080f6:	6163      	str	r3, [r4, #20]
 80080f8:	b002      	add	sp, #8
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	ab01      	add	r3, sp, #4
 80080fe:	466a      	mov	r2, sp
 8008100:	f7ff ffca 	bl	8008098 <__swhatbuf_r>
 8008104:	9900      	ldr	r1, [sp, #0]
 8008106:	4605      	mov	r5, r0
 8008108:	4630      	mov	r0, r6
 800810a:	f7ff f8d1 	bl	80072b0 <_malloc_r>
 800810e:	b948      	cbnz	r0, 8008124 <__smakebuf_r+0x44>
 8008110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008114:	059a      	lsls	r2, r3, #22
 8008116:	d4ef      	bmi.n	80080f8 <__smakebuf_r+0x18>
 8008118:	f023 0303 	bic.w	r3, r3, #3
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e7e3      	b.n	80080ec <__smakebuf_r+0xc>
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <__smakebuf_r+0x7c>)
 8008126:	62b3      	str	r3, [r6, #40]	; 0x28
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	6163      	str	r3, [r4, #20]
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	6120      	str	r0, [r4, #16]
 800813a:	b15b      	cbz	r3, 8008154 <__smakebuf_r+0x74>
 800813c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008140:	4630      	mov	r0, r6
 8008142:	f000 f831 	bl	80081a8 <_isatty_r>
 8008146:	b128      	cbz	r0, 8008154 <__smakebuf_r+0x74>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	431d      	orrs	r5, r3
 8008158:	81a5      	strh	r5, [r4, #12]
 800815a:	e7cd      	b.n	80080f8 <__smakebuf_r+0x18>
 800815c:	080075bd 	.word	0x080075bd

08008160 <_read_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4c07      	ldr	r4, [pc, #28]	; (8008180 <_read_r+0x20>)
 8008164:	4605      	mov	r5, r0
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	2200      	movs	r2, #0
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7fb fd28 	bl	8003bc4 <_read>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_read_r+0x1e>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	b103      	cbz	r3, 800817e <_read_r+0x1e>
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200002fc 	.word	0x200002fc

08008184 <_fstat_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4c07      	ldr	r4, [pc, #28]	; (80081a4 <_fstat_r+0x20>)
 8008188:	2300      	movs	r3, #0
 800818a:	4605      	mov	r5, r0
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	f7fb fd5c 	bl	8003c4e <_fstat>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d102      	bne.n	80081a0 <_fstat_r+0x1c>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	b103      	cbz	r3, 80081a0 <_fstat_r+0x1c>
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	200002fc 	.word	0x200002fc

080081a8 <_isatty_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4c06      	ldr	r4, [pc, #24]	; (80081c4 <_isatty_r+0x1c>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4605      	mov	r5, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	f7fb fd5b 	bl	8003c6e <_isatty>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_isatty_r+0x1a>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_isatty_r+0x1a>
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	200002fc 	.word	0x200002fc

080081c8 <asin>:
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	ed2d 8b02 	vpush	{d8}
 80081ce:	4e26      	ldr	r6, [pc, #152]	; (8008268 <asin+0xa0>)
 80081d0:	b08b      	sub	sp, #44	; 0x2c
 80081d2:	ec55 4b10 	vmov	r4, r5, d0
 80081d6:	f000 f92b 	bl	8008430 <__ieee754_asin>
 80081da:	f996 3000 	ldrsb.w	r3, [r6]
 80081de:	eeb0 8a40 	vmov.f32	s16, s0
 80081e2:	eef0 8a60 	vmov.f32	s17, s1
 80081e6:	3301      	adds	r3, #1
 80081e8:	d036      	beq.n	8008258 <asin+0x90>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	4620      	mov	r0, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fcb3 	bl	8000b5c <__aeabi_dcmpun>
 80081f6:	4607      	mov	r7, r0
 80081f8:	bb70      	cbnz	r0, 8008258 <asin+0x90>
 80081fa:	ec45 4b10 	vmov	d0, r4, r5
 80081fe:	f001 f80b 	bl	8009218 <fabs>
 8008202:	2200      	movs	r2, #0
 8008204:	4b19      	ldr	r3, [pc, #100]	; (800826c <asin+0xa4>)
 8008206:	ec51 0b10 	vmov	r0, r1, d0
 800820a:	f7f8 fc9d 	bl	8000b48 <__aeabi_dcmpgt>
 800820e:	b318      	cbz	r0, 8008258 <asin+0x90>
 8008210:	2301      	movs	r3, #1
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4816      	ldr	r0, [pc, #88]	; (8008270 <asin+0xa8>)
 8008216:	4b17      	ldr	r3, [pc, #92]	; (8008274 <asin+0xac>)
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	9708      	str	r7, [sp, #32]
 800821c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008220:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008224:	f001 f804 	bl	8009230 <nan>
 8008228:	f996 3000 	ldrsb.w	r3, [r6]
 800822c:	2b02      	cmp	r3, #2
 800822e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008232:	d104      	bne.n	800823e <asin+0x76>
 8008234:	f7fe ffb4 	bl	80071a0 <__errno>
 8008238:	2321      	movs	r3, #33	; 0x21
 800823a:	6003      	str	r3, [r0, #0]
 800823c:	e004      	b.n	8008248 <asin+0x80>
 800823e:	4668      	mov	r0, sp
 8008240:	f000 fff3 	bl	800922a <matherr>
 8008244:	2800      	cmp	r0, #0
 8008246:	d0f5      	beq.n	8008234 <asin+0x6c>
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	b11b      	cbz	r3, 8008254 <asin+0x8c>
 800824c:	f7fe ffa8 	bl	80071a0 <__errno>
 8008250:	9b08      	ldr	r3, [sp, #32]
 8008252:	6003      	str	r3, [r0, #0]
 8008254:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008258:	eeb0 0a48 	vmov.f32	s0, s16
 800825c:	eef0 0a68 	vmov.f32	s1, s17
 8008260:	b00b      	add	sp, #44	; 0x2c
 8008262:	ecbd 8b02 	vpop	{d8}
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008268:	20000070 	.word	0x20000070
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	080092e5 	.word	0x080092e5
 8008274:	08009313 	.word	0x08009313

08008278 <atan2>:
 8008278:	f000 baea 	b.w	8008850 <__ieee754_atan2>

0800827c <log>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	ed2d 8b02 	vpush	{d8}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	ec55 4b10 	vmov	r4, r5, d0
 8008288:	f000 fbc2 	bl	8008a10 <__ieee754_log>
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <log+0xec>)
 800828e:	eeb0 8a40 	vmov.f32	s16, s0
 8008292:	eef0 8a60 	vmov.f32	s17, s1
 8008296:	f993 6000 	ldrsb.w	r6, [r3]
 800829a:	1c73      	adds	r3, r6, #1
 800829c:	d05b      	beq.n	8008356 <log+0xda>
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7f8 fc59 	bl	8000b5c <__aeabi_dcmpun>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d153      	bne.n	8008356 <log+0xda>
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4620      	mov	r0, r4
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7f8 fc47 	bl	8000b48 <__aeabi_dcmpgt>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d14b      	bne.n	8008356 <log+0xda>
 80082be:	4b2b      	ldr	r3, [pc, #172]	; (800836c <log+0xf0>)
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	9008      	str	r0, [sp, #32]
 80082c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80082c8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80082cc:	b9a6      	cbnz	r6, 80082f8 <log+0x7c>
 80082ce:	4b28      	ldr	r3, [pc, #160]	; (8008370 <log+0xf4>)
 80082d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80082d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082d8:	4620      	mov	r0, r4
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f8 fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80082e4:	bb40      	cbnz	r0, 8008338 <log+0xbc>
 80082e6:	2301      	movs	r3, #1
 80082e8:	2e02      	cmp	r6, #2
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	d119      	bne.n	8008322 <log+0xa6>
 80082ee:	f7fe ff57 	bl	80071a0 <__errno>
 80082f2:	2321      	movs	r3, #33	; 0x21
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	e019      	b.n	800832c <log+0xb0>
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <log+0xf8>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008300:	4620      	mov	r0, r4
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 800830c:	2800      	cmp	r0, #0
 800830e:	d0ea      	beq.n	80082e6 <log+0x6a>
 8008310:	2302      	movs	r3, #2
 8008312:	429e      	cmp	r6, r3
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	d111      	bne.n	800833c <log+0xc0>
 8008318:	f7fe ff42 	bl	80071a0 <__errno>
 800831c:	2322      	movs	r3, #34	; 0x22
 800831e:	6003      	str	r3, [r0, #0]
 8008320:	e011      	b.n	8008346 <log+0xca>
 8008322:	4668      	mov	r0, sp
 8008324:	f000 ff81 	bl	800922a <matherr>
 8008328:	2800      	cmp	r0, #0
 800832a:	d0e0      	beq.n	80082ee <log+0x72>
 800832c:	4812      	ldr	r0, [pc, #72]	; (8008378 <log+0xfc>)
 800832e:	f000 ff7f 	bl	8009230 <nan>
 8008332:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008336:	e006      	b.n	8008346 <log+0xca>
 8008338:	2302      	movs	r3, #2
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4668      	mov	r0, sp
 800833e:	f000 ff74 	bl	800922a <matherr>
 8008342:	2800      	cmp	r0, #0
 8008344:	d0e8      	beq.n	8008318 <log+0x9c>
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	b11b      	cbz	r3, 8008352 <log+0xd6>
 800834a:	f7fe ff29 	bl	80071a0 <__errno>
 800834e:	9b08      	ldr	r3, [sp, #32]
 8008350:	6003      	str	r3, [r0, #0]
 8008352:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008356:	eeb0 0a48 	vmov.f32	s0, s16
 800835a:	eef0 0a68 	vmov.f32	s1, s17
 800835e:	b00a      	add	sp, #40	; 0x28
 8008360:	ecbd 8b02 	vpop	{d8}
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	bf00      	nop
 8008368:	20000070 	.word	0x20000070
 800836c:	08009318 	.word	0x08009318
 8008370:	c7efffff 	.word	0xc7efffff
 8008374:	fff00000 	.word	0xfff00000
 8008378:	080092e5 	.word	0x080092e5

0800837c <sqrt>:
 800837c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008380:	ed2d 8b02 	vpush	{d8}
 8008384:	b08b      	sub	sp, #44	; 0x2c
 8008386:	ec55 4b10 	vmov	r4, r5, d0
 800838a:	f000 fcf3 	bl	8008d74 <__ieee754_sqrt>
 800838e:	4b26      	ldr	r3, [pc, #152]	; (8008428 <sqrt+0xac>)
 8008390:	eeb0 8a40 	vmov.f32	s16, s0
 8008394:	eef0 8a60 	vmov.f32	s17, s1
 8008398:	f993 6000 	ldrsb.w	r6, [r3]
 800839c:	1c73      	adds	r3, r6, #1
 800839e:	d02a      	beq.n	80083f6 <sqrt+0x7a>
 80083a0:	4622      	mov	r2, r4
 80083a2:	462b      	mov	r3, r5
 80083a4:	4620      	mov	r0, r4
 80083a6:	4629      	mov	r1, r5
 80083a8:	f7f8 fbd8 	bl	8000b5c <__aeabi_dcmpun>
 80083ac:	4607      	mov	r7, r0
 80083ae:	bb10      	cbnz	r0, 80083f6 <sqrt+0x7a>
 80083b0:	f04f 0800 	mov.w	r8, #0
 80083b4:	f04f 0900 	mov.w	r9, #0
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	4620      	mov	r0, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	f7f8 fba4 	bl	8000b0c <__aeabi_dcmplt>
 80083c4:	b1b8      	cbz	r0, 80083f6 <sqrt+0x7a>
 80083c6:	2301      	movs	r3, #1
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	4b18      	ldr	r3, [pc, #96]	; (800842c <sqrt+0xb0>)
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	9708      	str	r7, [sp, #32]
 80083d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80083d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083d8:	b9b6      	cbnz	r6, 8008408 <sqrt+0x8c>
 80083da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80083de:	4668      	mov	r0, sp
 80083e0:	f000 ff23 	bl	800922a <matherr>
 80083e4:	b1d0      	cbz	r0, 800841c <sqrt+0xa0>
 80083e6:	9b08      	ldr	r3, [sp, #32]
 80083e8:	b11b      	cbz	r3, 80083f2 <sqrt+0x76>
 80083ea:	f7fe fed9 	bl	80071a0 <__errno>
 80083ee:	9b08      	ldr	r3, [sp, #32]
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80083f6:	eeb0 0a48 	vmov.f32	s0, s16
 80083fa:	eef0 0a68 	vmov.f32	s1, s17
 80083fe:	b00b      	add	sp, #44	; 0x2c
 8008400:	ecbd 8b02 	vpop	{d8}
 8008404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f8 fa34 	bl	800087c <__aeabi_ddiv>
 8008414:	2e02      	cmp	r6, #2
 8008416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800841a:	d1e0      	bne.n	80083de <sqrt+0x62>
 800841c:	f7fe fec0 	bl	80071a0 <__errno>
 8008420:	2321      	movs	r3, #33	; 0x21
 8008422:	6003      	str	r3, [r0, #0]
 8008424:	e7df      	b.n	80083e6 <sqrt+0x6a>
 8008426:	bf00      	nop
 8008428:	20000070 	.word	0x20000070
 800842c:	0800931c 	.word	0x0800931c

08008430 <__ieee754_asin>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	ec55 4b10 	vmov	r4, r5, d0
 8008438:	4bcb      	ldr	r3, [pc, #812]	; (8008768 <__ieee754_asin+0x338>)
 800843a:	b087      	sub	sp, #28
 800843c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008440:	429f      	cmp	r7, r3
 8008442:	9501      	str	r5, [sp, #4]
 8008444:	dd31      	ble.n	80084aa <__ieee754_asin+0x7a>
 8008446:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800844a:	ee10 3a10 	vmov	r3, s0
 800844e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8008452:	433b      	orrs	r3, r7
 8008454:	d117      	bne.n	8008486 <__ieee754_asin+0x56>
 8008456:	a3aa      	add	r3, pc, #680	; (adr r3, 8008700 <__ieee754_asin+0x2d0>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	ee10 0a10 	vmov	r0, s0
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 f8e1 	bl	8000628 <__aeabi_dmul>
 8008466:	a3a8      	add	r3, pc, #672	; (adr r3, 8008708 <__ieee754_asin+0x2d8>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	f7f8 f8d8 	bl	8000628 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 ff1c 	bl	80002bc <__adddf3>
 8008484:	e00a      	b.n	800849c <__ieee754_asin+0x6c>
 8008486:	ee10 2a10 	vmov	r2, s0
 800848a:	462b      	mov	r3, r5
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f7 ff12 	bl	80002b8 <__aeabi_dsub>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	f7f8 f9f0 	bl	800087c <__aeabi_ddiv>
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	ec45 4b10 	vmov	d0, r4, r5
 80084a4:	b007      	add	sp, #28
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	4bb0      	ldr	r3, [pc, #704]	; (800876c <__ieee754_asin+0x33c>)
 80084ac:	429f      	cmp	r7, r3
 80084ae:	dc11      	bgt.n	80084d4 <__ieee754_asin+0xa4>
 80084b0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80084b4:	f280 80ae 	bge.w	8008614 <__ieee754_asin+0x1e4>
 80084b8:	a395      	add	r3, pc, #596	; (adr r3, 8008710 <__ieee754_asin+0x2e0>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	ee10 0a10 	vmov	r0, s0
 80084c2:	4629      	mov	r1, r5
 80084c4:	f7f7 fefa 	bl	80002bc <__adddf3>
 80084c8:	2200      	movs	r2, #0
 80084ca:	4ba9      	ldr	r3, [pc, #676]	; (8008770 <__ieee754_asin+0x340>)
 80084cc:	f7f8 fb3c 	bl	8000b48 <__aeabi_dcmpgt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d1e5      	bne.n	80084a0 <__ieee754_asin+0x70>
 80084d4:	ec45 4b10 	vmov	d0, r4, r5
 80084d8:	f000 fe9e 	bl	8009218 <fabs>
 80084dc:	2000      	movs	r0, #0
 80084de:	ec53 2b10 	vmov	r2, r3, d0
 80084e2:	49a3      	ldr	r1, [pc, #652]	; (8008770 <__ieee754_asin+0x340>)
 80084e4:	f7f7 fee8 	bl	80002b8 <__aeabi_dsub>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4ba2      	ldr	r3, [pc, #648]	; (8008774 <__ieee754_asin+0x344>)
 80084ec:	f7f8 f89c 	bl	8000628 <__aeabi_dmul>
 80084f0:	a389      	add	r3, pc, #548	; (adr r3, 8008718 <__ieee754_asin+0x2e8>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	4604      	mov	r4, r0
 80084f8:	460d      	mov	r5, r1
 80084fa:	f7f8 f895 	bl	8000628 <__aeabi_dmul>
 80084fe:	a388      	add	r3, pc, #544	; (adr r3, 8008720 <__ieee754_asin+0x2f0>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f7 feda 	bl	80002bc <__adddf3>
 8008508:	4622      	mov	r2, r4
 800850a:	462b      	mov	r3, r5
 800850c:	f7f8 f88c 	bl	8000628 <__aeabi_dmul>
 8008510:	a385      	add	r3, pc, #532	; (adr r3, 8008728 <__ieee754_asin+0x2f8>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f7f7 fecf 	bl	80002b8 <__aeabi_dsub>
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	f7f8 f883 	bl	8000628 <__aeabi_dmul>
 8008522:	a383      	add	r3, pc, #524	; (adr r3, 8008730 <__ieee754_asin+0x300>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f7 fec8 	bl	80002bc <__adddf3>
 800852c:	4622      	mov	r2, r4
 800852e:	462b      	mov	r3, r5
 8008530:	f7f8 f87a 	bl	8000628 <__aeabi_dmul>
 8008534:	a380      	add	r3, pc, #512	; (adr r3, 8008738 <__ieee754_asin+0x308>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	f7f7 febd 	bl	80002b8 <__aeabi_dsub>
 800853e:	4622      	mov	r2, r4
 8008540:	462b      	mov	r3, r5
 8008542:	f7f8 f871 	bl	8000628 <__aeabi_dmul>
 8008546:	a37e      	add	r3, pc, #504	; (adr r3, 8008740 <__ieee754_asin+0x310>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f7f7 feb6 	bl	80002bc <__adddf3>
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	f7f8 f868 	bl	8000628 <__aeabi_dmul>
 8008558:	a37b      	add	r3, pc, #492	; (adr r3, 8008748 <__ieee754_asin+0x318>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	4680      	mov	r8, r0
 8008560:	4689      	mov	r9, r1
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f8 f85f 	bl	8000628 <__aeabi_dmul>
 800856a:	a379      	add	r3, pc, #484	; (adr r3, 8008750 <__ieee754_asin+0x320>)
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	f7f7 fea2 	bl	80002b8 <__aeabi_dsub>
 8008574:	4622      	mov	r2, r4
 8008576:	462b      	mov	r3, r5
 8008578:	f7f8 f856 	bl	8000628 <__aeabi_dmul>
 800857c:	a376      	add	r3, pc, #472	; (adr r3, 8008758 <__ieee754_asin+0x328>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fe9b 	bl	80002bc <__adddf3>
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	f7f8 f84d 	bl	8000628 <__aeabi_dmul>
 800858e:	a374      	add	r3, pc, #464	; (adr r3, 8008760 <__ieee754_asin+0x330>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 fe90 	bl	80002b8 <__aeabi_dsub>
 8008598:	4622      	mov	r2, r4
 800859a:	462b      	mov	r3, r5
 800859c:	f7f8 f844 	bl	8000628 <__aeabi_dmul>
 80085a0:	4b73      	ldr	r3, [pc, #460]	; (8008770 <__ieee754_asin+0x340>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	f7f7 fe8a 	bl	80002bc <__adddf3>
 80085a8:	ec45 4b10 	vmov	d0, r4, r5
 80085ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b0:	f000 fbe0 	bl	8008d74 <__ieee754_sqrt>
 80085b4:	4b70      	ldr	r3, [pc, #448]	; (8008778 <__ieee754_asin+0x348>)
 80085b6:	429f      	cmp	r7, r3
 80085b8:	ec5b ab10 	vmov	sl, fp, d0
 80085bc:	f340 80de 	ble.w	800877c <__ieee754_asin+0x34c>
 80085c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c4:	4640      	mov	r0, r8
 80085c6:	4649      	mov	r1, r9
 80085c8:	f7f8 f958 	bl	800087c <__aeabi_ddiv>
 80085cc:	4652      	mov	r2, sl
 80085ce:	465b      	mov	r3, fp
 80085d0:	f7f8 f82a 	bl	8000628 <__aeabi_dmul>
 80085d4:	4652      	mov	r2, sl
 80085d6:	465b      	mov	r3, fp
 80085d8:	f7f7 fe70 	bl	80002bc <__adddf3>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	f7f7 fe6c 	bl	80002bc <__adddf3>
 80085e4:	a348      	add	r3, pc, #288	; (adr r3, 8008708 <__ieee754_asin+0x2d8>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe65 	bl	80002b8 <__aeabi_dsub>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	a143      	add	r1, pc, #268	; (adr r1, 8008700 <__ieee754_asin+0x2d0>)
 80085f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f8:	f7f7 fe5e 	bl	80002b8 <__aeabi_dsub>
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfdc      	itt	le
 8008602:	4602      	movle	r2, r0
 8008604:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	bfdc      	itt	le
 800860e:	4614      	movle	r4, r2
 8008610:	461d      	movle	r5, r3
 8008612:	e745      	b.n	80084a0 <__ieee754_asin+0x70>
 8008614:	ee10 2a10 	vmov	r2, s0
 8008618:	ee10 0a10 	vmov	r0, s0
 800861c:	462b      	mov	r3, r5
 800861e:	4629      	mov	r1, r5
 8008620:	f7f8 f802 	bl	8000628 <__aeabi_dmul>
 8008624:	a33c      	add	r3, pc, #240	; (adr r3, 8008718 <__ieee754_asin+0x2e8>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	f7f7 fffb 	bl	8000628 <__aeabi_dmul>
 8008632:	a33b      	add	r3, pc, #236	; (adr r3, 8008720 <__ieee754_asin+0x2f0>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fe40 	bl	80002bc <__adddf3>
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	f7f7 fff2 	bl	8000628 <__aeabi_dmul>
 8008644:	a338      	add	r3, pc, #224	; (adr r3, 8008728 <__ieee754_asin+0x2f8>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fe35 	bl	80002b8 <__aeabi_dsub>
 800864e:	4632      	mov	r2, r6
 8008650:	463b      	mov	r3, r7
 8008652:	f7f7 ffe9 	bl	8000628 <__aeabi_dmul>
 8008656:	a336      	add	r3, pc, #216	; (adr r3, 8008730 <__ieee754_asin+0x300>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 fe2e 	bl	80002bc <__adddf3>
 8008660:	4632      	mov	r2, r6
 8008662:	463b      	mov	r3, r7
 8008664:	f7f7 ffe0 	bl	8000628 <__aeabi_dmul>
 8008668:	a333      	add	r3, pc, #204	; (adr r3, 8008738 <__ieee754_asin+0x308>)
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f7f7 fe23 	bl	80002b8 <__aeabi_dsub>
 8008672:	4632      	mov	r2, r6
 8008674:	463b      	mov	r3, r7
 8008676:	f7f7 ffd7 	bl	8000628 <__aeabi_dmul>
 800867a:	a331      	add	r3, pc, #196	; (adr r3, 8008740 <__ieee754_asin+0x310>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fe1c 	bl	80002bc <__adddf3>
 8008684:	4632      	mov	r2, r6
 8008686:	463b      	mov	r3, r7
 8008688:	f7f7 ffce 	bl	8000628 <__aeabi_dmul>
 800868c:	a32e      	add	r3, pc, #184	; (adr r3, 8008748 <__ieee754_asin+0x318>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	4680      	mov	r8, r0
 8008694:	4689      	mov	r9, r1
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f7 ffc5 	bl	8000628 <__aeabi_dmul>
 800869e:	a32c      	add	r3, pc, #176	; (adr r3, 8008750 <__ieee754_asin+0x320>)
 80086a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a4:	f7f7 fe08 	bl	80002b8 <__aeabi_dsub>
 80086a8:	4632      	mov	r2, r6
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f7 ffbc 	bl	8000628 <__aeabi_dmul>
 80086b0:	a329      	add	r3, pc, #164	; (adr r3, 8008758 <__ieee754_asin+0x328>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 fe01 	bl	80002bc <__adddf3>
 80086ba:	4632      	mov	r2, r6
 80086bc:	463b      	mov	r3, r7
 80086be:	f7f7 ffb3 	bl	8000628 <__aeabi_dmul>
 80086c2:	a327      	add	r3, pc, #156	; (adr r3, 8008760 <__ieee754_asin+0x330>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 fdf6 	bl	80002b8 <__aeabi_dsub>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f7 ffaa 	bl	8000628 <__aeabi_dmul>
 80086d4:	2200      	movs	r2, #0
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <__ieee754_asin+0x340>)
 80086d8:	f7f7 fdf0 	bl	80002bc <__adddf3>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4640      	mov	r0, r8
 80086e2:	4649      	mov	r1, r9
 80086e4:	f7f8 f8ca 	bl	800087c <__aeabi_ddiv>
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	f7f7 ff9c 	bl	8000628 <__aeabi_dmul>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	e6c2      	b.n	8008480 <__ieee754_asin+0x50>
 80086fa:	bf00      	nop
 80086fc:	f3af 8000 	nop.w
 8008700:	54442d18 	.word	0x54442d18
 8008704:	3ff921fb 	.word	0x3ff921fb
 8008708:	33145c07 	.word	0x33145c07
 800870c:	3c91a626 	.word	0x3c91a626
 8008710:	8800759c 	.word	0x8800759c
 8008714:	7e37e43c 	.word	0x7e37e43c
 8008718:	0dfdf709 	.word	0x0dfdf709
 800871c:	3f023de1 	.word	0x3f023de1
 8008720:	7501b288 	.word	0x7501b288
 8008724:	3f49efe0 	.word	0x3f49efe0
 8008728:	b5688f3b 	.word	0xb5688f3b
 800872c:	3fa48228 	.word	0x3fa48228
 8008730:	0e884455 	.word	0x0e884455
 8008734:	3fc9c155 	.word	0x3fc9c155
 8008738:	03eb6f7d 	.word	0x03eb6f7d
 800873c:	3fd4d612 	.word	0x3fd4d612
 8008740:	55555555 	.word	0x55555555
 8008744:	3fc55555 	.word	0x3fc55555
 8008748:	b12e9282 	.word	0xb12e9282
 800874c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008750:	1b8d0159 	.word	0x1b8d0159
 8008754:	3fe6066c 	.word	0x3fe6066c
 8008758:	9c598ac8 	.word	0x9c598ac8
 800875c:	40002ae5 	.word	0x40002ae5
 8008760:	1c8a2d4b 	.word	0x1c8a2d4b
 8008764:	40033a27 	.word	0x40033a27
 8008768:	3fefffff 	.word	0x3fefffff
 800876c:	3fdfffff 	.word	0x3fdfffff
 8008770:	3ff00000 	.word	0x3ff00000
 8008774:	3fe00000 	.word	0x3fe00000
 8008778:	3fef3332 	.word	0x3fef3332
 800877c:	ee10 2a10 	vmov	r2, s0
 8008780:	ee10 0a10 	vmov	r0, s0
 8008784:	465b      	mov	r3, fp
 8008786:	4659      	mov	r1, fp
 8008788:	f7f7 fd98 	bl	80002bc <__adddf3>
 800878c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008794:	4640      	mov	r0, r8
 8008796:	4649      	mov	r1, r9
 8008798:	f7f8 f870 	bl	800087c <__aeabi_ddiv>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a4:	f7f7 ff40 	bl	8000628 <__aeabi_dmul>
 80087a8:	2600      	movs	r6, #0
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	4632      	mov	r2, r6
 80087b0:	465b      	mov	r3, fp
 80087b2:	4630      	mov	r0, r6
 80087b4:	4659      	mov	r1, fp
 80087b6:	f7f7 ff37 	bl	8000628 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f7 fd79 	bl	80002b8 <__aeabi_dsub>
 80087c6:	4632      	mov	r2, r6
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	465b      	mov	r3, fp
 80087ce:	4650      	mov	r0, sl
 80087d0:	4659      	mov	r1, fp
 80087d2:	f7f7 fd73 	bl	80002bc <__adddf3>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f8 f84d 	bl	800087c <__aeabi_ddiv>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	f7f7 fd69 	bl	80002bc <__adddf3>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	a114      	add	r1, pc, #80	; (adr r1, 8008840 <__ieee754_asin+0x410>)
 80087f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f4:	f7f7 fd60 	bl	80002b8 <__aeabi_dsub>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fd5a 	bl	80002b8 <__aeabi_dsub>
 8008804:	465f      	mov	r7, fp
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	4632      	mov	r2, r6
 800880c:	465b      	mov	r3, fp
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f7 fd53 	bl	80002bc <__adddf3>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	a10b      	add	r1, pc, #44	; (adr r1, 8008848 <__ieee754_asin+0x418>)
 800881c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008820:	f7f7 fd4a 	bl	80002b8 <__aeabi_dsub>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4620      	mov	r0, r4
 800882a:	4629      	mov	r1, r5
 800882c:	f7f7 fd44 	bl	80002b8 <__aeabi_dsub>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	a104      	add	r1, pc, #16	; (adr r1, 8008848 <__ieee754_asin+0x418>)
 8008836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800883a:	e6dd      	b.n	80085f8 <__ieee754_asin+0x1c8>
 800883c:	f3af 8000 	nop.w
 8008840:	33145c07 	.word	0x33145c07
 8008844:	3c91a626 	.word	0x3c91a626
 8008848:	54442d18 	.word	0x54442d18
 800884c:	3fe921fb 	.word	0x3fe921fb

08008850 <__ieee754_atan2>:
 8008850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008854:	ec57 6b11 	vmov	r6, r7, d1
 8008858:	4273      	negs	r3, r6
 800885a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800885e:	4333      	orrs	r3, r6
 8008860:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008a08 <__ieee754_atan2+0x1b8>
 8008864:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008868:	4573      	cmp	r3, lr
 800886a:	ec51 0b10 	vmov	r0, r1, d0
 800886e:	ee11 8a10 	vmov	r8, s2
 8008872:	d80a      	bhi.n	800888a <__ieee754_atan2+0x3a>
 8008874:	4244      	negs	r4, r0
 8008876:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800887a:	4304      	orrs	r4, r0
 800887c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008880:	4574      	cmp	r4, lr
 8008882:	468c      	mov	ip, r1
 8008884:	ee10 9a10 	vmov	r9, s0
 8008888:	d907      	bls.n	800889a <__ieee754_atan2+0x4a>
 800888a:	4632      	mov	r2, r6
 800888c:	463b      	mov	r3, r7
 800888e:	f7f7 fd15 	bl	80002bc <__adddf3>
 8008892:	ec41 0b10 	vmov	d0, r0, r1
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800889e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088a2:	4334      	orrs	r4, r6
 80088a4:	d103      	bne.n	80088ae <__ieee754_atan2+0x5e>
 80088a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088aa:	f000 bb15 	b.w	8008ed8 <atan>
 80088ae:	17bc      	asrs	r4, r7, #30
 80088b0:	f004 0402 	and.w	r4, r4, #2
 80088b4:	ea53 0909 	orrs.w	r9, r3, r9
 80088b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80088bc:	d107      	bne.n	80088ce <__ieee754_atan2+0x7e>
 80088be:	2c02      	cmp	r4, #2
 80088c0:	d073      	beq.n	80089aa <__ieee754_atan2+0x15a>
 80088c2:	2c03      	cmp	r4, #3
 80088c4:	d1e5      	bne.n	8008892 <__ieee754_atan2+0x42>
 80088c6:	a13e      	add	r1, pc, #248	; (adr r1, 80089c0 <__ieee754_atan2+0x170>)
 80088c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088cc:	e7e1      	b.n	8008892 <__ieee754_atan2+0x42>
 80088ce:	ea52 0808 	orrs.w	r8, r2, r8
 80088d2:	d106      	bne.n	80088e2 <__ieee754_atan2+0x92>
 80088d4:	f1bc 0f00 	cmp.w	ip, #0
 80088d8:	da6b      	bge.n	80089b2 <__ieee754_atan2+0x162>
 80088da:	a13b      	add	r1, pc, #236	; (adr r1, 80089c8 <__ieee754_atan2+0x178>)
 80088dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088e0:	e7d7      	b.n	8008892 <__ieee754_atan2+0x42>
 80088e2:	4572      	cmp	r2, lr
 80088e4:	d120      	bne.n	8008928 <__ieee754_atan2+0xd8>
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d111      	bne.n	800890e <__ieee754_atan2+0xbe>
 80088ea:	2c02      	cmp	r4, #2
 80088ec:	d007      	beq.n	80088fe <__ieee754_atan2+0xae>
 80088ee:	2c03      	cmp	r4, #3
 80088f0:	d009      	beq.n	8008906 <__ieee754_atan2+0xb6>
 80088f2:	2c01      	cmp	r4, #1
 80088f4:	d155      	bne.n	80089a2 <__ieee754_atan2+0x152>
 80088f6:	a136      	add	r1, pc, #216	; (adr r1, 80089d0 <__ieee754_atan2+0x180>)
 80088f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088fc:	e7c9      	b.n	8008892 <__ieee754_atan2+0x42>
 80088fe:	a136      	add	r1, pc, #216	; (adr r1, 80089d8 <__ieee754_atan2+0x188>)
 8008900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008904:	e7c5      	b.n	8008892 <__ieee754_atan2+0x42>
 8008906:	a136      	add	r1, pc, #216	; (adr r1, 80089e0 <__ieee754_atan2+0x190>)
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	e7c1      	b.n	8008892 <__ieee754_atan2+0x42>
 800890e:	2c02      	cmp	r4, #2
 8008910:	d04b      	beq.n	80089aa <__ieee754_atan2+0x15a>
 8008912:	2c03      	cmp	r4, #3
 8008914:	d0d7      	beq.n	80088c6 <__ieee754_atan2+0x76>
 8008916:	2c01      	cmp	r4, #1
 8008918:	f04f 0000 	mov.w	r0, #0
 800891c:	d102      	bne.n	8008924 <__ieee754_atan2+0xd4>
 800891e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008922:	e7b6      	b.n	8008892 <__ieee754_atan2+0x42>
 8008924:	2100      	movs	r1, #0
 8008926:	e7b4      	b.n	8008892 <__ieee754_atan2+0x42>
 8008928:	4573      	cmp	r3, lr
 800892a:	d0d3      	beq.n	80088d4 <__ieee754_atan2+0x84>
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	151b      	asrs	r3, r3, #20
 8008930:	2b3c      	cmp	r3, #60	; 0x3c
 8008932:	dc1e      	bgt.n	8008972 <__ieee754_atan2+0x122>
 8008934:	2f00      	cmp	r7, #0
 8008936:	da01      	bge.n	800893c <__ieee754_atan2+0xec>
 8008938:	333c      	adds	r3, #60	; 0x3c
 800893a:	db1e      	blt.n	800897a <__ieee754_atan2+0x12a>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f7 ff9c 	bl	800087c <__aeabi_ddiv>
 8008944:	ec41 0b10 	vmov	d0, r0, r1
 8008948:	f000 fc66 	bl	8009218 <fabs>
 800894c:	f000 fac4 	bl	8008ed8 <atan>
 8008950:	ec51 0b10 	vmov	r0, r1, d0
 8008954:	2c01      	cmp	r4, #1
 8008956:	d013      	beq.n	8008980 <__ieee754_atan2+0x130>
 8008958:	2c02      	cmp	r4, #2
 800895a:	d015      	beq.n	8008988 <__ieee754_atan2+0x138>
 800895c:	2c00      	cmp	r4, #0
 800895e:	d098      	beq.n	8008892 <__ieee754_atan2+0x42>
 8008960:	a321      	add	r3, pc, #132	; (adr r3, 80089e8 <__ieee754_atan2+0x198>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fca7 	bl	80002b8 <__aeabi_dsub>
 800896a:	a321      	add	r3, pc, #132	; (adr r3, 80089f0 <__ieee754_atan2+0x1a0>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	e014      	b.n	800899c <__ieee754_atan2+0x14c>
 8008972:	a121      	add	r1, pc, #132	; (adr r1, 80089f8 <__ieee754_atan2+0x1a8>)
 8008974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008978:	e7ec      	b.n	8008954 <__ieee754_atan2+0x104>
 800897a:	2000      	movs	r0, #0
 800897c:	2100      	movs	r1, #0
 800897e:	e7e9      	b.n	8008954 <__ieee754_atan2+0x104>
 8008980:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008984:	4619      	mov	r1, r3
 8008986:	e784      	b.n	8008892 <__ieee754_atan2+0x42>
 8008988:	a317      	add	r3, pc, #92	; (adr r3, 80089e8 <__ieee754_atan2+0x198>)
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f7f7 fc93 	bl	80002b8 <__aeabi_dsub>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	a116      	add	r1, pc, #88	; (adr r1, 80089f0 <__ieee754_atan2+0x1a0>)
 8008998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899c:	f7f7 fc8c 	bl	80002b8 <__aeabi_dsub>
 80089a0:	e777      	b.n	8008892 <__ieee754_atan2+0x42>
 80089a2:	a117      	add	r1, pc, #92	; (adr r1, 8008a00 <__ieee754_atan2+0x1b0>)
 80089a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a8:	e773      	b.n	8008892 <__ieee754_atan2+0x42>
 80089aa:	a111      	add	r1, pc, #68	; (adr r1, 80089f0 <__ieee754_atan2+0x1a0>)
 80089ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b0:	e76f      	b.n	8008892 <__ieee754_atan2+0x42>
 80089b2:	a111      	add	r1, pc, #68	; (adr r1, 80089f8 <__ieee754_atan2+0x1a8>)
 80089b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b8:	e76b      	b.n	8008892 <__ieee754_atan2+0x42>
 80089ba:	bf00      	nop
 80089bc:	f3af 8000 	nop.w
 80089c0:	54442d18 	.word	0x54442d18
 80089c4:	c00921fb 	.word	0xc00921fb
 80089c8:	54442d18 	.word	0x54442d18
 80089cc:	bff921fb 	.word	0xbff921fb
 80089d0:	54442d18 	.word	0x54442d18
 80089d4:	bfe921fb 	.word	0xbfe921fb
 80089d8:	7f3321d2 	.word	0x7f3321d2
 80089dc:	4002d97c 	.word	0x4002d97c
 80089e0:	7f3321d2 	.word	0x7f3321d2
 80089e4:	c002d97c 	.word	0xc002d97c
 80089e8:	33145c07 	.word	0x33145c07
 80089ec:	3ca1a626 	.word	0x3ca1a626
 80089f0:	54442d18 	.word	0x54442d18
 80089f4:	400921fb 	.word	0x400921fb
 80089f8:	54442d18 	.word	0x54442d18
 80089fc:	3ff921fb 	.word	0x3ff921fb
 8008a00:	54442d18 	.word	0x54442d18
 8008a04:	3fe921fb 	.word	0x3fe921fb
 8008a08:	7ff00000 	.word	0x7ff00000
 8008a0c:	00000000 	.word	0x00000000

08008a10 <__ieee754_log>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ec51 0b10 	vmov	r0, r1, d0
 8008a18:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	460d      	mov	r5, r1
 8008a20:	da27      	bge.n	8008a72 <__ieee754_log+0x62>
 8008a22:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a26:	4303      	orrs	r3, r0
 8008a28:	ee10 2a10 	vmov	r2, s0
 8008a2c:	d10a      	bne.n	8008a44 <__ieee754_log+0x34>
 8008a2e:	49cc      	ldr	r1, [pc, #816]	; (8008d60 <__ieee754_log+0x350>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	2300      	movs	r3, #0
 8008a34:	2000      	movs	r0, #0
 8008a36:	f7f7 ff21 	bl	800087c <__aeabi_ddiv>
 8008a3a:	ec41 0b10 	vmov	d0, r0, r1
 8008a3e:	b007      	add	sp, #28
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a44:	2900      	cmp	r1, #0
 8008a46:	da05      	bge.n	8008a54 <__ieee754_log+0x44>
 8008a48:	460b      	mov	r3, r1
 8008a4a:	f7f7 fc35 	bl	80002b8 <__aeabi_dsub>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7f0      	b.n	8008a36 <__ieee754_log+0x26>
 8008a54:	4bc3      	ldr	r3, [pc, #780]	; (8008d64 <__ieee754_log+0x354>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	f7f7 fde6 	bl	8000628 <__aeabi_dmul>
 8008a5c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a60:	460d      	mov	r5, r1
 8008a62:	4ac1      	ldr	r2, [pc, #772]	; (8008d68 <__ieee754_log+0x358>)
 8008a64:	4295      	cmp	r5, r2
 8008a66:	dd06      	ble.n	8008a76 <__ieee754_log+0x66>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	f7f7 fc26 	bl	80002bc <__adddf3>
 8008a70:	e7e3      	b.n	8008a3a <__ieee754_log+0x2a>
 8008a72:	2300      	movs	r3, #0
 8008a74:	e7f5      	b.n	8008a62 <__ieee754_log+0x52>
 8008a76:	152c      	asrs	r4, r5, #20
 8008a78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a7c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a80:	441c      	add	r4, r3
 8008a82:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a86:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a8e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a92:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a96:	ea42 0105 	orr.w	r1, r2, r5
 8008a9a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4bb2      	ldr	r3, [pc, #712]	; (8008d6c <__ieee754_log+0x35c>)
 8008aa2:	f7f7 fc09 	bl	80002b8 <__aeabi_dsub>
 8008aa6:	1cab      	adds	r3, r5, #2
 8008aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	4682      	mov	sl, r0
 8008ab0:	468b      	mov	fp, r1
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	dc53      	bgt.n	8008b60 <__ieee754_log+0x150>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f7f8 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 8008abe:	b1d0      	cbz	r0, 8008af6 <__ieee754_log+0xe6>
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	f000 8120 	beq.w	8008d06 <__ieee754_log+0x2f6>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7f7 fd44 	bl	8000554 <__aeabi_i2d>
 8008acc:	a390      	add	r3, pc, #576	; (adr r3, 8008d10 <__ieee754_log+0x300>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	f7f7 fda7 	bl	8000628 <__aeabi_dmul>
 8008ada:	a38f      	add	r3, pc, #572	; (adr r3, 8008d18 <__ieee754_log+0x308>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 fd9e 	bl	8000628 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4620      	mov	r0, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	e7ba      	b.n	8008a6c <__ieee754_log+0x5c>
 8008af6:	a38a      	add	r3, pc, #552	; (adr r3, 8008d20 <__ieee754_log+0x310>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	4650      	mov	r0, sl
 8008afe:	4659      	mov	r1, fp
 8008b00:	f7f7 fd92 	bl	8000628 <__aeabi_dmul>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	4999      	ldr	r1, [pc, #612]	; (8008d70 <__ieee754_log+0x360>)
 8008b0c:	f7f7 fbd4 	bl	80002b8 <__aeabi_dsub>
 8008b10:	4652      	mov	r2, sl
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	465b      	mov	r3, fp
 8008b18:	4650      	mov	r0, sl
 8008b1a:	4659      	mov	r1, fp
 8008b1c:	f7f7 fd84 	bl	8000628 <__aeabi_dmul>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	f7f7 fd7e 	bl	8000628 <__aeabi_dmul>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	b914      	cbnz	r4, 8008b38 <__ieee754_log+0x128>
 8008b32:	4632      	mov	r2, r6
 8008b34:	463b      	mov	r3, r7
 8008b36:	e0a0      	b.n	8008c7a <__ieee754_log+0x26a>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7f7 fd0b 	bl	8000554 <__aeabi_i2d>
 8008b3e:	a374      	add	r3, pc, #464	; (adr r3, 8008d10 <__ieee754_log+0x300>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	4680      	mov	r8, r0
 8008b46:	4689      	mov	r9, r1
 8008b48:	f7f7 fd6e 	bl	8000628 <__aeabi_dmul>
 8008b4c:	a372      	add	r3, pc, #456	; (adr r3, 8008d18 <__ieee754_log+0x308>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 fd65 	bl	8000628 <__aeabi_dmul>
 8008b5e:	e0a5      	b.n	8008cac <__ieee754_log+0x29c>
 8008b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b64:	f7f7 fbaa 	bl	80002bc <__adddf3>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4659      	mov	r1, fp
 8008b70:	f7f7 fe84 	bl	800087c <__aeabi_ddiv>
 8008b74:	e9cd 0100 	strd	r0, r1, [sp]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7f7 fceb 	bl	8000554 <__aeabi_i2d>
 8008b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b86:	4610      	mov	r0, r2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7f7 fd4d 	bl	8000628 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b96:	f7f7 fd47 	bl	8000628 <__aeabi_dmul>
 8008b9a:	a363      	add	r3, pc, #396	; (adr r3, 8008d28 <__ieee754_log+0x318>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	4689      	mov	r9, r1
 8008ba4:	f7f7 fd40 	bl	8000628 <__aeabi_dmul>
 8008ba8:	a361      	add	r3, pc, #388	; (adr r3, 8008d30 <__ieee754_log+0x320>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb85 	bl	80002bc <__adddf3>
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	f7f7 fd37 	bl	8000628 <__aeabi_dmul>
 8008bba:	a35f      	add	r3, pc, #380	; (adr r3, 8008d38 <__ieee754_log+0x328>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fb7c 	bl	80002bc <__adddf3>
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	f7f7 fd2e 	bl	8000628 <__aeabi_dmul>
 8008bcc:	a35c      	add	r3, pc, #368	; (adr r3, 8008d40 <__ieee754_log+0x330>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fb73 	bl	80002bc <__adddf3>
 8008bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bda:	f7f7 fd25 	bl	8000628 <__aeabi_dmul>
 8008bde:	a35a      	add	r3, pc, #360	; (adr r3, 8008d48 <__ieee754_log+0x338>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008be8:	4640      	mov	r0, r8
 8008bea:	4649      	mov	r1, r9
 8008bec:	f7f7 fd1c 	bl	8000628 <__aeabi_dmul>
 8008bf0:	a357      	add	r3, pc, #348	; (adr r3, 8008d50 <__ieee754_log+0x340>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb61 	bl	80002bc <__adddf3>
 8008bfa:	4642      	mov	r2, r8
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	f7f7 fd13 	bl	8000628 <__aeabi_dmul>
 8008c02:	a355      	add	r3, pc, #340	; (adr r3, 8008d58 <__ieee754_log+0x348>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fb58 	bl	80002bc <__adddf3>
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	f7f7 fd0a 	bl	8000628 <__aeabi_dmul>
 8008c14:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008c20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c24:	f7f7 fb4a 	bl	80002bc <__adddf3>
 8008c28:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8008c2c:	3551      	adds	r5, #81	; 0x51
 8008c2e:	4335      	orrs	r5, r6
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	dd48      	ble.n	8008cca <__ieee754_log+0x2ba>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4b4d      	ldr	r3, [pc, #308]	; (8008d70 <__ieee754_log+0x360>)
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	4659      	mov	r1, fp
 8008c40:	f7f7 fcf2 	bl	8000628 <__aeabi_dmul>
 8008c44:	4652      	mov	r2, sl
 8008c46:	465b      	mov	r3, fp
 8008c48:	f7f7 fcee 	bl	8000628 <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	4640      	mov	r0, r8
 8008c56:	4649      	mov	r1, r9
 8008c58:	f7f7 fb30 	bl	80002bc <__adddf3>
 8008c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c60:	f7f7 fce2 	bl	8000628 <__aeabi_dmul>
 8008c64:	4680      	mov	r8, r0
 8008c66:	4689      	mov	r9, r1
 8008c68:	b964      	cbnz	r4, 8008c84 <__ieee754_log+0x274>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fb21 	bl	80002b8 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	4659      	mov	r1, fp
 8008c7e:	f7f7 fb1b 	bl	80002b8 <__aeabi_dsub>
 8008c82:	e6da      	b.n	8008a3a <__ieee754_log+0x2a>
 8008c84:	a322      	add	r3, pc, #136	; (adr r3, 8008d10 <__ieee754_log+0x300>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c8e:	f7f7 fccb 	bl	8000628 <__aeabi_dmul>
 8008c92:	a321      	add	r3, pc, #132	; (adr r3, 8008d18 <__ieee754_log+0x308>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ca0:	f7f7 fcc2 	bl	8000628 <__aeabi_dmul>
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	f7f7 fb08 	bl	80002bc <__adddf3>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 fb00 	bl	80002b8 <__aeabi_dsub>
 8008cb8:	4652      	mov	r2, sl
 8008cba:	465b      	mov	r3, fp
 8008cbc:	f7f7 fafc 	bl	80002b8 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	e7d9      	b.n	8008c7e <__ieee754_log+0x26e>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4650      	mov	r0, sl
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	f7f7 faf1 	bl	80002b8 <__aeabi_dsub>
 8008cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cda:	f7f7 fca5 	bl	8000628 <__aeabi_dmul>
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	2c00      	cmp	r4, #0
 8008ce4:	f43f af25 	beq.w	8008b32 <__ieee754_log+0x122>
 8008ce8:	a309      	add	r3, pc, #36	; (adr r3, 8008d10 <__ieee754_log+0x300>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf2:	f7f7 fc99 	bl	8000628 <__aeabi_dmul>
 8008cf6:	a308      	add	r3, pc, #32	; (adr r3, 8008d18 <__ieee754_log+0x308>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d04:	e729      	b.n	8008b5a <__ieee754_log+0x14a>
 8008d06:	2000      	movs	r0, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	e696      	b.n	8008a3a <__ieee754_log+0x2a>
 8008d0c:	f3af 8000 	nop.w
 8008d10:	fee00000 	.word	0xfee00000
 8008d14:	3fe62e42 	.word	0x3fe62e42
 8008d18:	35793c76 	.word	0x35793c76
 8008d1c:	3dea39ef 	.word	0x3dea39ef
 8008d20:	55555555 	.word	0x55555555
 8008d24:	3fd55555 	.word	0x3fd55555
 8008d28:	df3e5244 	.word	0xdf3e5244
 8008d2c:	3fc2f112 	.word	0x3fc2f112
 8008d30:	96cb03de 	.word	0x96cb03de
 8008d34:	3fc74664 	.word	0x3fc74664
 8008d38:	94229359 	.word	0x94229359
 8008d3c:	3fd24924 	.word	0x3fd24924
 8008d40:	55555593 	.word	0x55555593
 8008d44:	3fe55555 	.word	0x3fe55555
 8008d48:	d078c69f 	.word	0xd078c69f
 8008d4c:	3fc39a09 	.word	0x3fc39a09
 8008d50:	1d8e78af 	.word	0x1d8e78af
 8008d54:	3fcc71c5 	.word	0x3fcc71c5
 8008d58:	9997fa04 	.word	0x9997fa04
 8008d5c:	3fd99999 	.word	0x3fd99999
 8008d60:	c3500000 	.word	0xc3500000
 8008d64:	43500000 	.word	0x43500000
 8008d68:	7fefffff 	.word	0x7fefffff
 8008d6c:	3ff00000 	.word	0x3ff00000
 8008d70:	3fe00000 	.word	0x3fe00000

08008d74 <__ieee754_sqrt>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	4955      	ldr	r1, [pc, #340]	; (8008ed0 <__ieee754_sqrt+0x15c>)
 8008d7a:	ec55 4b10 	vmov	r4, r5, d0
 8008d7e:	43a9      	bics	r1, r5
 8008d80:	462b      	mov	r3, r5
 8008d82:	462a      	mov	r2, r5
 8008d84:	d112      	bne.n	8008dac <__ieee754_sqrt+0x38>
 8008d86:	ee10 2a10 	vmov	r2, s0
 8008d8a:	ee10 0a10 	vmov	r0, s0
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7f7 fc4a 	bl	8000628 <__aeabi_dmul>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	f7f7 fa8e 	bl	80002bc <__adddf3>
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	ec45 4b10 	vmov	d0, r4, r5
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	ee10 0a10 	vmov	r0, s0
 8008db2:	4621      	mov	r1, r4
 8008db4:	dc0f      	bgt.n	8008dd6 <__ieee754_sqrt+0x62>
 8008db6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008dba:	4330      	orrs	r0, r6
 8008dbc:	d0f2      	beq.n	8008da4 <__ieee754_sqrt+0x30>
 8008dbe:	b155      	cbz	r5, 8008dd6 <__ieee754_sqrt+0x62>
 8008dc0:	ee10 2a10 	vmov	r2, s0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fa76 	bl	80002b8 <__aeabi_dsub>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	f7f7 fd54 	bl	800087c <__aeabi_ddiv>
 8008dd4:	e7e4      	b.n	8008da0 <__ieee754_sqrt+0x2c>
 8008dd6:	151b      	asrs	r3, r3, #20
 8008dd8:	d073      	beq.n	8008ec2 <__ieee754_sqrt+0x14e>
 8008dda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008dde:	07dd      	lsls	r5, r3, #31
 8008de0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008de4:	bf48      	it	mi
 8008de6:	0fc8      	lsrmi	r0, r1, #31
 8008de8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008dec:	bf44      	itt	mi
 8008dee:	0049      	lslmi	r1, r1, #1
 8008df0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008df4:	2500      	movs	r5, #0
 8008df6:	1058      	asrs	r0, r3, #1
 8008df8:	0fcb      	lsrs	r3, r1, #31
 8008dfa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008dfe:	0049      	lsls	r1, r1, #1
 8008e00:	2316      	movs	r3, #22
 8008e02:	462c      	mov	r4, r5
 8008e04:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008e08:	19a7      	adds	r7, r4, r6
 8008e0a:	4297      	cmp	r7, r2
 8008e0c:	bfde      	ittt	le
 8008e0e:	19bc      	addle	r4, r7, r6
 8008e10:	1bd2      	suble	r2, r2, r7
 8008e12:	19ad      	addle	r5, r5, r6
 8008e14:	0fcf      	lsrs	r7, r1, #31
 8008e16:	3b01      	subs	r3, #1
 8008e18:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008e1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e24:	d1f0      	bne.n	8008e08 <__ieee754_sqrt+0x94>
 8008e26:	f04f 0c20 	mov.w	ip, #32
 8008e2a:	469e      	mov	lr, r3
 8008e2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e30:	42a2      	cmp	r2, r4
 8008e32:	eb06 070e 	add.w	r7, r6, lr
 8008e36:	dc02      	bgt.n	8008e3e <__ieee754_sqrt+0xca>
 8008e38:	d112      	bne.n	8008e60 <__ieee754_sqrt+0xec>
 8008e3a:	428f      	cmp	r7, r1
 8008e3c:	d810      	bhi.n	8008e60 <__ieee754_sqrt+0xec>
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	eb07 0e06 	add.w	lr, r7, r6
 8008e44:	da42      	bge.n	8008ecc <__ieee754_sqrt+0x158>
 8008e46:	f1be 0f00 	cmp.w	lr, #0
 8008e4a:	db3f      	blt.n	8008ecc <__ieee754_sqrt+0x158>
 8008e4c:	f104 0801 	add.w	r8, r4, #1
 8008e50:	1b12      	subs	r2, r2, r4
 8008e52:	428f      	cmp	r7, r1
 8008e54:	bf88      	it	hi
 8008e56:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008e5a:	1bc9      	subs	r1, r1, r7
 8008e5c:	4433      	add	r3, r6
 8008e5e:	4644      	mov	r4, r8
 8008e60:	0052      	lsls	r2, r2, #1
 8008e62:	f1bc 0c01 	subs.w	ip, ip, #1
 8008e66:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008e6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e72:	d1dd      	bne.n	8008e30 <__ieee754_sqrt+0xbc>
 8008e74:	430a      	orrs	r2, r1
 8008e76:	d006      	beq.n	8008e86 <__ieee754_sqrt+0x112>
 8008e78:	1c5c      	adds	r4, r3, #1
 8008e7a:	bf13      	iteet	ne
 8008e7c:	3301      	addne	r3, #1
 8008e7e:	3501      	addeq	r5, #1
 8008e80:	4663      	moveq	r3, ip
 8008e82:	f023 0301 	bicne.w	r3, r3, #1
 8008e86:	106a      	asrs	r2, r5, #1
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	07e9      	lsls	r1, r5, #31
 8008e8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008e90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008e94:	bf48      	it	mi
 8008e96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e9a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008e9e:	461c      	mov	r4, r3
 8008ea0:	e780      	b.n	8008da4 <__ieee754_sqrt+0x30>
 8008ea2:	0aca      	lsrs	r2, r1, #11
 8008ea4:	3815      	subs	r0, #21
 8008ea6:	0549      	lsls	r1, r1, #21
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	d0fa      	beq.n	8008ea2 <__ieee754_sqrt+0x12e>
 8008eac:	02d6      	lsls	r6, r2, #11
 8008eae:	d50a      	bpl.n	8008ec6 <__ieee754_sqrt+0x152>
 8008eb0:	f1c3 0420 	rsb	r4, r3, #32
 8008eb4:	fa21 f404 	lsr.w	r4, r1, r4
 8008eb8:	1e5d      	subs	r5, r3, #1
 8008eba:	4099      	lsls	r1, r3
 8008ebc:	4322      	orrs	r2, r4
 8008ebe:	1b43      	subs	r3, r0, r5
 8008ec0:	e78b      	b.n	8008dda <__ieee754_sqrt+0x66>
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	e7f0      	b.n	8008ea8 <__ieee754_sqrt+0x134>
 8008ec6:	0052      	lsls	r2, r2, #1
 8008ec8:	3301      	adds	r3, #1
 8008eca:	e7ef      	b.n	8008eac <__ieee754_sqrt+0x138>
 8008ecc:	46a0      	mov	r8, r4
 8008ece:	e7bf      	b.n	8008e50 <__ieee754_sqrt+0xdc>
 8008ed0:	7ff00000 	.word	0x7ff00000
 8008ed4:	00000000 	.word	0x00000000

08008ed8 <atan>:
 8008ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ec55 4b10 	vmov	r4, r5, d0
 8008ee0:	4bc3      	ldr	r3, [pc, #780]	; (80091f0 <atan+0x318>)
 8008ee2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ee6:	429e      	cmp	r6, r3
 8008ee8:	46ab      	mov	fp, r5
 8008eea:	dd18      	ble.n	8008f1e <atan+0x46>
 8008eec:	4bc1      	ldr	r3, [pc, #772]	; (80091f4 <atan+0x31c>)
 8008eee:	429e      	cmp	r6, r3
 8008ef0:	dc01      	bgt.n	8008ef6 <atan+0x1e>
 8008ef2:	d109      	bne.n	8008f08 <atan+0x30>
 8008ef4:	b144      	cbz	r4, 8008f08 <atan+0x30>
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	462b      	mov	r3, r5
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 f9dd 	bl	80002bc <__adddf3>
 8008f02:	4604      	mov	r4, r0
 8008f04:	460d      	mov	r5, r1
 8008f06:	e006      	b.n	8008f16 <atan+0x3e>
 8008f08:	f1bb 0f00 	cmp.w	fp, #0
 8008f0c:	f340 8131 	ble.w	8009172 <atan+0x29a>
 8008f10:	a59b      	add	r5, pc, #620	; (adr r5, 8009180 <atan+0x2a8>)
 8008f12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f16:	ec45 4b10 	vmov	d0, r4, r5
 8008f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1e:	4bb6      	ldr	r3, [pc, #728]	; (80091f8 <atan+0x320>)
 8008f20:	429e      	cmp	r6, r3
 8008f22:	dc14      	bgt.n	8008f4e <atan+0x76>
 8008f24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008f28:	429e      	cmp	r6, r3
 8008f2a:	dc0d      	bgt.n	8008f48 <atan+0x70>
 8008f2c:	a396      	add	r3, pc, #600	; (adr r3, 8009188 <atan+0x2b0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	ee10 0a10 	vmov	r0, s0
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 f9c0 	bl	80002bc <__adddf3>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4baf      	ldr	r3, [pc, #700]	; (80091fc <atan+0x324>)
 8008f40:	f7f7 fe02 	bl	8000b48 <__aeabi_dcmpgt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1e6      	bne.n	8008f16 <atan+0x3e>
 8008f48:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008f4c:	e02b      	b.n	8008fa6 <atan+0xce>
 8008f4e:	f000 f963 	bl	8009218 <fabs>
 8008f52:	4bab      	ldr	r3, [pc, #684]	; (8009200 <atan+0x328>)
 8008f54:	429e      	cmp	r6, r3
 8008f56:	ec55 4b10 	vmov	r4, r5, d0
 8008f5a:	f300 80bf 	bgt.w	80090dc <atan+0x204>
 8008f5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008f62:	429e      	cmp	r6, r3
 8008f64:	f300 80a0 	bgt.w	80090a8 <atan+0x1d0>
 8008f68:	ee10 2a10 	vmov	r2, s0
 8008f6c:	ee10 0a10 	vmov	r0, s0
 8008f70:	462b      	mov	r3, r5
 8008f72:	4629      	mov	r1, r5
 8008f74:	f7f7 f9a2 	bl	80002bc <__adddf3>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4ba0      	ldr	r3, [pc, #640]	; (80091fc <atan+0x324>)
 8008f7c:	f7f7 f99c 	bl	80002b8 <__aeabi_dsub>
 8008f80:	2200      	movs	r2, #0
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	f7f7 f995 	bl	80002bc <__adddf3>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 fc6f 	bl	800087c <__aeabi_ddiv>
 8008f9e:	f04f 0a00 	mov.w	sl, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 fb3b 	bl	8000628 <__aeabi_dmul>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4680      	mov	r8, r0
 8008fb8:	4689      	mov	r9, r1
 8008fba:	f7f7 fb35 	bl	8000628 <__aeabi_dmul>
 8008fbe:	a374      	add	r3, pc, #464	; (adr r3, 8009190 <atan+0x2b8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	460f      	mov	r7, r1
 8008fc8:	f7f7 fb2e 	bl	8000628 <__aeabi_dmul>
 8008fcc:	a372      	add	r3, pc, #456	; (adr r3, 8009198 <atan+0x2c0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f973 	bl	80002bc <__adddf3>
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	463b      	mov	r3, r7
 8008fda:	f7f7 fb25 	bl	8000628 <__aeabi_dmul>
 8008fde:	a370      	add	r3, pc, #448	; (adr r3, 80091a0 <atan+0x2c8>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f96a 	bl	80002bc <__adddf3>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	f7f7 fb1c 	bl	8000628 <__aeabi_dmul>
 8008ff0:	a36d      	add	r3, pc, #436	; (adr r3, 80091a8 <atan+0x2d0>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f961 	bl	80002bc <__adddf3>
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	f7f7 fb13 	bl	8000628 <__aeabi_dmul>
 8009002:	a36b      	add	r3, pc, #428	; (adr r3, 80091b0 <atan+0x2d8>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 f958 	bl	80002bc <__adddf3>
 800900c:	4632      	mov	r2, r6
 800900e:	463b      	mov	r3, r7
 8009010:	f7f7 fb0a 	bl	8000628 <__aeabi_dmul>
 8009014:	a368      	add	r3, pc, #416	; (adr r3, 80091b8 <atan+0x2e0>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f94f 	bl	80002bc <__adddf3>
 800901e:	4642      	mov	r2, r8
 8009020:	464b      	mov	r3, r9
 8009022:	f7f7 fb01 	bl	8000628 <__aeabi_dmul>
 8009026:	a366      	add	r3, pc, #408	; (adr r3, 80091c0 <atan+0x2e8>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	4680      	mov	r8, r0
 800902e:	4689      	mov	r9, r1
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 faf8 	bl	8000628 <__aeabi_dmul>
 8009038:	a363      	add	r3, pc, #396	; (adr r3, 80091c8 <atan+0x2f0>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 f93b 	bl	80002b8 <__aeabi_dsub>
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	f7f7 faef 	bl	8000628 <__aeabi_dmul>
 800904a:	a361      	add	r3, pc, #388	; (adr r3, 80091d0 <atan+0x2f8>)
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	f7f7 f932 	bl	80002b8 <__aeabi_dsub>
 8009054:	4632      	mov	r2, r6
 8009056:	463b      	mov	r3, r7
 8009058:	f7f7 fae6 	bl	8000628 <__aeabi_dmul>
 800905c:	a35e      	add	r3, pc, #376	; (adr r3, 80091d8 <atan+0x300>)
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	f7f7 f929 	bl	80002b8 <__aeabi_dsub>
 8009066:	4632      	mov	r2, r6
 8009068:	463b      	mov	r3, r7
 800906a:	f7f7 fadd 	bl	8000628 <__aeabi_dmul>
 800906e:	a35c      	add	r3, pc, #368	; (adr r3, 80091e0 <atan+0x308>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f7f7 f920 	bl	80002b8 <__aeabi_dsub>
 8009078:	4632      	mov	r2, r6
 800907a:	463b      	mov	r3, r7
 800907c:	f7f7 fad4 	bl	8000628 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 f918 	bl	80002bc <__adddf3>
 800908c:	4622      	mov	r2, r4
 800908e:	462b      	mov	r3, r5
 8009090:	f7f7 faca 	bl	8000628 <__aeabi_dmul>
 8009094:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	d14b      	bne.n	8009136 <atan+0x25e>
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 f909 	bl	80002b8 <__aeabi_dsub>
 80090a6:	e72c      	b.n	8008f02 <atan+0x2a>
 80090a8:	ee10 0a10 	vmov	r0, s0
 80090ac:	2200      	movs	r2, #0
 80090ae:	4b53      	ldr	r3, [pc, #332]	; (80091fc <atan+0x324>)
 80090b0:	4629      	mov	r1, r5
 80090b2:	f7f7 f901 	bl	80002b8 <__aeabi_dsub>
 80090b6:	2200      	movs	r2, #0
 80090b8:	4606      	mov	r6, r0
 80090ba:	460f      	mov	r7, r1
 80090bc:	4b4f      	ldr	r3, [pc, #316]	; (80091fc <atan+0x324>)
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 f8fb 	bl	80002bc <__adddf3>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 fbd5 	bl	800087c <__aeabi_ddiv>
 80090d2:	f04f 0a01 	mov.w	sl, #1
 80090d6:	4604      	mov	r4, r0
 80090d8:	460d      	mov	r5, r1
 80090da:	e764      	b.n	8008fa6 <atan+0xce>
 80090dc:	4b49      	ldr	r3, [pc, #292]	; (8009204 <atan+0x32c>)
 80090de:	429e      	cmp	r6, r3
 80090e0:	dc1d      	bgt.n	800911e <atan+0x246>
 80090e2:	ee10 0a10 	vmov	r0, s0
 80090e6:	2200      	movs	r2, #0
 80090e8:	4b47      	ldr	r3, [pc, #284]	; (8009208 <atan+0x330>)
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7f7 f8e4 	bl	80002b8 <__aeabi_dsub>
 80090f0:	2200      	movs	r2, #0
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	4b44      	ldr	r3, [pc, #272]	; (8009208 <atan+0x330>)
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fa94 	bl	8000628 <__aeabi_dmul>
 8009100:	2200      	movs	r2, #0
 8009102:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <atan+0x324>)
 8009104:	f7f7 f8da 	bl	80002bc <__adddf3>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4630      	mov	r0, r6
 800910e:	4639      	mov	r1, r7
 8009110:	f7f7 fbb4 	bl	800087c <__aeabi_ddiv>
 8009114:	f04f 0a02 	mov.w	sl, #2
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	e743      	b.n	8008fa6 <atan+0xce>
 800911e:	462b      	mov	r3, r5
 8009120:	ee10 2a10 	vmov	r2, s0
 8009124:	2000      	movs	r0, #0
 8009126:	4939      	ldr	r1, [pc, #228]	; (800920c <atan+0x334>)
 8009128:	f7f7 fba8 	bl	800087c <__aeabi_ddiv>
 800912c:	f04f 0a03 	mov.w	sl, #3
 8009130:	4604      	mov	r4, r0
 8009132:	460d      	mov	r5, r1
 8009134:	e737      	b.n	8008fa6 <atan+0xce>
 8009136:	4b36      	ldr	r3, [pc, #216]	; (8009210 <atan+0x338>)
 8009138:	4e36      	ldr	r6, [pc, #216]	; (8009214 <atan+0x33c>)
 800913a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800913e:	4456      	add	r6, sl
 8009140:	449a      	add	sl, r3
 8009142:	e9da 2300 	ldrd	r2, r3, [sl]
 8009146:	f7f7 f8b7 	bl	80002b8 <__aeabi_dsub>
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	f7f7 f8b3 	bl	80002b8 <__aeabi_dsub>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	e9d6 0100 	ldrd	r0, r1, [r6]
 800915a:	f7f7 f8ad 	bl	80002b8 <__aeabi_dsub>
 800915e:	f1bb 0f00 	cmp.w	fp, #0
 8009162:	4604      	mov	r4, r0
 8009164:	460d      	mov	r5, r1
 8009166:	f6bf aed6 	bge.w	8008f16 <atan+0x3e>
 800916a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800916e:	461d      	mov	r5, r3
 8009170:	e6d1      	b.n	8008f16 <atan+0x3e>
 8009172:	a51d      	add	r5, pc, #116	; (adr r5, 80091e8 <atan+0x310>)
 8009174:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009178:	e6cd      	b.n	8008f16 <atan+0x3e>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	54442d18 	.word	0x54442d18
 8009184:	3ff921fb 	.word	0x3ff921fb
 8009188:	8800759c 	.word	0x8800759c
 800918c:	7e37e43c 	.word	0x7e37e43c
 8009190:	e322da11 	.word	0xe322da11
 8009194:	3f90ad3a 	.word	0x3f90ad3a
 8009198:	24760deb 	.word	0x24760deb
 800919c:	3fa97b4b 	.word	0x3fa97b4b
 80091a0:	a0d03d51 	.word	0xa0d03d51
 80091a4:	3fb10d66 	.word	0x3fb10d66
 80091a8:	c54c206e 	.word	0xc54c206e
 80091ac:	3fb745cd 	.word	0x3fb745cd
 80091b0:	920083ff 	.word	0x920083ff
 80091b4:	3fc24924 	.word	0x3fc24924
 80091b8:	5555550d 	.word	0x5555550d
 80091bc:	3fd55555 	.word	0x3fd55555
 80091c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80091c4:	bfa2b444 	.word	0xbfa2b444
 80091c8:	52defd9a 	.word	0x52defd9a
 80091cc:	3fadde2d 	.word	0x3fadde2d
 80091d0:	af749a6d 	.word	0xaf749a6d
 80091d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80091d8:	fe231671 	.word	0xfe231671
 80091dc:	3fbc71c6 	.word	0x3fbc71c6
 80091e0:	9998ebc4 	.word	0x9998ebc4
 80091e4:	3fc99999 	.word	0x3fc99999
 80091e8:	54442d18 	.word	0x54442d18
 80091ec:	bff921fb 	.word	0xbff921fb
 80091f0:	440fffff 	.word	0x440fffff
 80091f4:	7ff00000 	.word	0x7ff00000
 80091f8:	3fdbffff 	.word	0x3fdbffff
 80091fc:	3ff00000 	.word	0x3ff00000
 8009200:	3ff2ffff 	.word	0x3ff2ffff
 8009204:	40037fff 	.word	0x40037fff
 8009208:	3ff80000 	.word	0x3ff80000
 800920c:	bff00000 	.word	0xbff00000
 8009210:	08009348 	.word	0x08009348
 8009214:	08009328 	.word	0x08009328

08009218 <fabs>:
 8009218:	ec51 0b10 	vmov	r0, r1, d0
 800921c:	ee10 2a10 	vmov	r2, s0
 8009220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009224:	ec43 2b10 	vmov	d0, r2, r3
 8009228:	4770      	bx	lr

0800922a <matherr>:
 800922a:	2000      	movs	r0, #0
 800922c:	4770      	bx	lr
	...

08009230 <nan>:
 8009230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009238 <nan+0x8>
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	00000000 	.word	0x00000000
 800923c:	7ff80000 	.word	0x7ff80000

08009240 <_init>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr

0800924c <_fini>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr
