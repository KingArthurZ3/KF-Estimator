
Position-Tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006f38  08006f38  00016f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080070bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080070bc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f4b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000236a  00000000  00000000  00030fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237aa  00000000  00000000  00034fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b924  00000000  00000000  00058752  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d320f  00000000  00000000  00064076  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000483c  00000000  00000000  00137300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f20 	.word	0x08006f20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006f20 	.word	0x08006f20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <attitudeInit>:
#include "attitude.h"

#define betaDef         0.1 // 2 * proportional gain
#define sampleFreqDef   1000.0; // 100 Hz

void attitudeInit(AttitudeState *s) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    s->filterBeta = sqrt(3.0/4) * 3.14159265358979 * (1.0/180.0);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <attitudeInit+0x4c>)
 8000f84:	609a      	str	r2, [r3, #8]
    s->beta = betaDef;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <attitudeInit+0x50>)
 8000f8a:	601a      	str	r2, [r3, #0]
    s->q0 = 1.0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f92:	60da      	str	r2, [r3, #12]
    s->q1 = s->q2 = s->q3 = 0.0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699a      	ldr	r2, [r3, #24]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]
    s->invSampleFreq = 1.0 / sampleFreqDef;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <attitudeInit+0x54>)
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
    s->step = 0.00002;  // step for gradient descent 0.00002
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <attitudeInit+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	3c77a4e2 	.word	0x3c77a4e2
 8000fc8:	3dcccccd 	.word	0x3dcccccd
 8000fcc:	3a83126f 	.word	0x3a83126f
 8000fd0:	37a7c5ac 	.word	0x37a7c5ac
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <computeAngles>:
    s->q2 = q2 * qNorm;
    s->q3 = q3 * qNorm;
}

void computeAngles(AttitudeState *s)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    float q0 = s->q0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float q1 = s->q1;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    float q2 = s->q2;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    float q3 = s->q3;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	623b      	str	r3, [r7, #32]
//    s->roll = atan2f(q0*q1 + q2*q3, 0.5 - q1*q1 - q2*q2) * 57.29578;
//    s->pitch = asinf(-2.0 * (q1*q3 - q0*q2)) * 57.29578;
//    s->yaw = atan2f(q1*q2 + q0*q3, 0.5 - q2*q2 - q3*q3) * 57.29578;
    float q2q2 = q2 * q2;
 8000ff8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ffc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	edc7 7a07 	vstr	s15, [r7, #28]
    float t0 = -2.0 * (q2q2 + q3 * q3) + 1.0;
 8001008:	ed97 7a08 	vldr	s14, [r7, #32]
 800100c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	edd7 7a07 	vldr	s15, [r7, #28]
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	ee17 0a90 	vmov	r0, s15
 8001020:	f7ff faaa 	bl	8000578 <__aeabi_f2d>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800102c:	f7ff fafc 	bl	8000628 <__aeabi_dmul>
 8001030:	4603      	mov	r3, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4618      	mov	r0, r3
 8001036:	4621      	mov	r1, r4
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <computeAngles+0x218>)
 800103e:	f7ff f93d 	bl	80002bc <__adddf3>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4618      	mov	r0, r3
 8001048:	4621      	mov	r1, r4
 800104a:	f7ff fdc5 	bl	8000bd8 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	61bb      	str	r3, [r7, #24]
    float t1 = 2.0 * (q1 * q2 + q0 * q3);
 8001052:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001056:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800105a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001062:	edd7 7a08 	vldr	s15, [r7, #32]
 8001066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001072:	edc7 7a05 	vstr	s15, [r7, #20]
    float t2 = -2.0 * (q1 * q3 - q0 * q2);
 8001076:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800107a:	edd7 7a08 	vldr	s15, [r7, #32]
 800107e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001082:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001086:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001092:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	edc7 7a04 	vstr	s15, [r7, #16]
    float t3 = 2.0 * (q2 * q3 + q0 * q1);
 800109e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80010ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010be:	edc7 7a03 	vstr	s15, [r7, #12]
    float t4 = -2.0 * (q1 * q1 + q2q2) + 1.0;
 80010c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80010c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa4d 	bl	8000578 <__aeabi_f2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010e6:	f7ff fa9f 	bl	8000628 <__aeabi_dmul>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <computeAngles+0x218>)
 80010f8:	f7ff f8e0 	bl	80002bc <__adddf3>
 80010fc:	4603      	mov	r3, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	4618      	mov	r0, r3
 8001102:	4621      	mov	r1, r4
 8001104:	f7ff fd68 	bl	8000bd8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]

    t2 = t2 > 1.0 ? 1.0 : t2;
 800110c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	dd02      	ble.n	8001124 <computeAngles+0x14c>
 800111e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001122:	e000      	b.n	8001126 <computeAngles+0x14e>
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	613b      	str	r3, [r7, #16]
    t2 = t2 < -1.0 ? -1.0 : t2;
 8001128:	edd7 7a04 	vldr	s15, [r7, #16]
 800112c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d501      	bpl.n	800113e <computeAngles+0x166>
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <computeAngles+0x21c>)
 800113c:	e000      	b.n	8001140 <computeAngles+0x168>
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	613b      	str	r3, [r7, #16]

    s->pitch = asin(t2) * 57.29578;
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f7ff fa18 	bl	8000578 <__aeabi_f2d>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	ec44 3b10 	vmov	d0, r3, r4
 8001150:	f005 f938 	bl	80063c4 <asin>
 8001154:	ec51 0b10 	vmov	r0, r1, d0
 8001158:	a323      	add	r3, pc, #140	; (adr r3, 80011e8 <computeAngles+0x210>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa63 	bl	8000628 <__aeabi_dmul>
 8001162:	4603      	mov	r3, r0
 8001164:	460c      	mov	r4, r1
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    s->roll = atan2(t3, t4) * 57.29578;
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fa03 	bl	8000578 <__aeabi_f2d>
 8001172:	4604      	mov	r4, r0
 8001174:	460d      	mov	r5, r1
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff f9fe 	bl	8000578 <__aeabi_f2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b11 	vmov	d1, r2, r3
 8001184:	ec45 4b10 	vmov	d0, r4, r5
 8001188:	f005 f974 	bl	8006474 <atan2>
 800118c:	ec51 0b10 	vmov	r0, r1, d0
 8001190:	a315      	add	r3, pc, #84	; (adr r3, 80011e8 <computeAngles+0x210>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa47 	bl	8000628 <__aeabi_dmul>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	e9c2 3408 	strd	r3, r4, [r2, #32]
    s->yaw = atan2(t1, t0) * 57.29578;
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff f9e7 	bl	8000578 <__aeabi_f2d>
 80011aa:	4604      	mov	r4, r0
 80011ac:	460d      	mov	r5, r1
 80011ae:	69b8      	ldr	r0, [r7, #24]
 80011b0:	f7ff f9e2 	bl	8000578 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	ec43 2b11 	vmov	d1, r2, r3
 80011bc:	ec45 4b10 	vmov	d0, r4, r5
 80011c0:	f005 f958 	bl	8006474 <atan2>
 80011c4:	ec51 0b10 	vmov	r0, r1, d0
 80011c8:	a307      	add	r3, pc, #28	; (adr r3, 80011e8 <computeAngles+0x210>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa2b 	bl	8000628 <__aeabi_dmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
}
 80011dc:	bf00      	nop
 80011de:	3730      	adds	r7, #48	; 0x30
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdb0      	pop	{r4, r5, r7, pc}
 80011e4:	f3af 8000 	nop.w
 80011e8:	1e7967cb 	.word	0x1e7967cb
 80011ec:	404ca5dc 	.word	0x404ca5dc
 80011f0:	3ff00000 	.word	0x3ff00000
 80011f4:	bf800000 	.word	0xbf800000

080011f8 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x) {
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfx = 0.5f * x;
 8001202:	edd7 7a01 	vldr	s15, [r7, #4]
 8001206:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120e:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = x;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	613b      	str	r3, [r7, #16]
    long i = *(long*)&y;
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i>>1);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	105a      	asrs	r2, r3, #1
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <invSqrt+0x9c>)
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
    y = *(float*)&i;
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 8001230:	ed97 7a04 	vldr	s14, [r7, #16]
 8001234:	edd7 7a05 	vldr	s15, [r7, #20]
 8001238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001248:	ee37 7a67 	vsub.f32	s14, s14, s15
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a04 	vstr	s15, [r7, #16]
    y = y * (1.5f - (halfx * y * y));
 8001258:	ed97 7a04 	vldr	s14, [r7, #16]
 800125c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	ee07 3a90 	vmov	s15, r3
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	5f3759df 	.word	0x5f3759df

08001298 <madgwickUpdate>:

void madgwickUpdate(AttitudeState *s, float* acc, float* gyro, uint8_t sz) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b0aa      	sub	sp, #168	; 0xa8
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	70fb      	strb	r3, [r7, #3]
    float w_x, w_y, w_z, a_x, a_y, a_z;
    w_x = gyro[0];
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    w_y = gyro[1];
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    w_z = gyro[2];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    a_x = acc[0];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    a_y = acc[1];
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    a_z = acc[2];
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    // vector norm
    float invNorm;
    float deltat = s->step;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float beta = s->filterBeta;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4;  // quaternion derrivative from gyroscopes elements
    float f_1, f_2, f_3;                                        // objective function elements
    float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;   // objective function Jacobian elements
    float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4;   // estimated direction of the gyroscope error
    // Axulirary variables to avoid reapeated calcualtions
    SEq_1 = s->q0;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    SEq_2 = s->q1;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    SEq_3 = s->q2;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    SEq_4 = s->q3;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	67bb      	str	r3, [r7, #120]	; 0x78
    float halfSEq_1 = 0.5 * SEq_1;
 8001302:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001306:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float halfSEq_2 = 0.5 * SEq_2;
 8001312:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001316:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float halfSEq_3 = 0.5 * SEq_3;
 8001322:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float halfSEq_4 = 0.5 * SEq_4;
 8001332:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float twoSEq_1 = 2.0 * SEq_1;
 8001342:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001346:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800134a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float twoSEq_2 = 2.0 * SEq_2;
 800134e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001356:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float twoSEq_3 = 2.0 * SEq_3;
 800135a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800135e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001362:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // Normalise the accelerometer measurement
    invNorm = invSqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 8001366:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800136a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800136e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001372:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8001376:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800137a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001382:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001386:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001392:	eeb0 0a67 	vmov.f32	s0, s15
 8001396:	f7ff ff2f 	bl	80011f8 <invSqrt>
 800139a:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    a_x *= invNorm;
 800139e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80013a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    a_y *= invNorm;
 80013ae:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80013b2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    a_z *= invNorm;
 80013be:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80013c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    // Compute the objective function and Jacobian
    f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 80013ce:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013d2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013da:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80013de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80013e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ea:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 80013f6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001406:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001412:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    f_3 = 1.0 - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 800141e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001422:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	ee17 0a90 	vmov	r0, s15
 800142e:	f7ff f8a3 	bl	8000578 <__aeabi_f2d>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	461a      	mov	r2, r3
 8001438:	4623      	mov	r3, r4
 800143a:	f04f 0000 	mov.w	r0, #0
 800143e:	49f0      	ldr	r1, [pc, #960]	; (8001800 <madgwickUpdate+0x568>)
 8001440:	f7fe ff3a 	bl	80002b8 <__aeabi_dsub>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4625      	mov	r5, r4
 800144a:	461c      	mov	r4, r3
 800144c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001450:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001458:	ee17 0a90 	vmov	r0, s15
 800145c:	f7ff f88c 	bl	8000578 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4620      	mov	r0, r4
 8001466:	4629      	mov	r1, r5
 8001468:	f7fe ff26 	bl	80002b8 <__aeabi_dsub>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4625      	mov	r5, r4
 8001472:	461c      	mov	r4, r3
 8001474:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001478:	f7ff f87e 	bl	8000578 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7fe ff18 	bl	80002b8 <__aeabi_dsub>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f7ff fba2 	bl	8000bd8 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_11or24 = twoSEq_3;
 8001498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
    J_12or23 = 2.0 * SEq_4;
 800149c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014a4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    J_13or22 = twoSEq_1;
 80014a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
    J_14or21 = twoSEq_2;
 80014ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    J_32 = 2.0 * J_14or21;
 80014b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    J_33 = 2.0 * J_11or24;
 80014bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    // Compute the gradient (matrix multiplication)
    SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 80014c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80014d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 80014e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80014ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80014f8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001504:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001508:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8001518:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800151c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001524:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001528:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001534:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001538:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800153c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8001548:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800154c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001554:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001558:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    // J_11 negated in matrix multiplication
    // J_12 negated in matrix multiplication
    // negated in matrix multiplication // negated in matrix multiplication
    // Normalise the gradient
    invNorm = invSqrt(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8001568:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800156c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001574:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001584:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001588:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001598:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f7ff fe26 	bl	80011f8 <invSqrt>
 80015ac:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    SEqHatDot_1 *= invNorm;
 80015b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015b4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    SEqHatDot_2 *= invNorm;
 80015c0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80015c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    SEqHatDot_3 *= invNorm;
 80015d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    SEqHatDot_4 *= invNorm;
 80015e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    // Compute the quaternion derrivative measured by gyroscopes
    SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 80015f0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80015f4:	eeb1 7a67 	vneg.f32	s14, s15
 80015f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001600:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001604:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001610:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001614:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001620:	edc7 7a08 	vstr	s15, [r7, #32]
    SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 8001624:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001628:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800162c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001630:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001634:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001644:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	edc7 7a07 	vstr	s15, [r7, #28]
    SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8001654:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001658:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800165c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001660:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001664:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001670:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001674:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001680:	edc7 7a06 	vstr	s15, [r7, #24]
    SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8001684:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001688:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001694:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80016a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	edc7 7a05 	vstr	s15, [r7, #20]
    // Compute then integrate the estimated quaternion derrivative
    SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 80016b4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80016b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80016c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80016cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 80016dc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80016e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80016ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80016f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8001704:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001708:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ed97 7a06 	vldr	s14, [r7, #24]
 8001714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001718:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 800172c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	ed97 7a05 	vldr	s14, [r7, #20]
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    // Normalise quaternion
    invNorm = invSqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 8001754:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001758:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8001764:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001770:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001774:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001780:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001784:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	f7ff fd30 	bl	80011f8 <invSqrt>
 8001798:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    SEq_1 *= invNorm;
 800179c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80017a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    SEq_2 *= invNorm;
 80017ac:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80017b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    SEq_3 *= invNorm;
 80017bc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80017c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    SEq_4 *= invNorm;
 80017cc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80017d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    s->q0 = SEq_1;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80017e2:	60da      	str	r2, [r3, #12]
    s->q1 = SEq_2;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80017ea:	611a      	str	r2, [r3, #16]
    s->q2 = SEq_3;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017f0:	615a      	str	r2, [r3, #20]
    s->q3 = SEq_4;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80017f6:	619a      	str	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	37a8      	adds	r7, #168	; 0xa8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	3ff00000 	.word	0x3ff00000

08001804 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t computeAttitude = 0;
volatile uint16_t num_computations = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    computeAttitude = 1;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
    ++num_computations;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800181e:	801a      	strh	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000090 	.word	0x20000090
 8001830:	20000092 	.word	0x20000092

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b0b5      	sub	sp, #212	; 0xd4
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183a:	f001 fc39 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183e:	f000 f8af 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001842:	f000 f9b1 	bl	8001ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001846:	f000 f985 	bl	8001b54 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800184a:	f000 f917 	bl	8001a7c <MX_SPI2_Init>
  MX_TIM6_Init();
 800184e:	f000 f94b 	bl	8001ae8 <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU9250_DATA_t mpu_data;
  MPU9250_CONFIG_t mpu_config;
  mpu_config.hspi = &hspi2;
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <main+0x150>)
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  mpu_config.GPIOx = MPU_CS_GPIO_Port;
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <main+0x154>)
 8001858:	64bb      	str	r3, [r7, #72]	; 0x48
  mpu_config.GPIO_PIN = MPU_CS_Pin;
 800185a:	2308      	movs	r3, #8
 800185c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  mpu_config.ACCEL_SCALE = ACCEL_SCALE_4G;
 8001860:	2308      	movs	r3, #8
 8001862:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  mpu_config.GYRO_SCALE = GYRO_SCALE_500dps;
 8001866:	2308      	movs	r3, #8
 8001868:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  for (uint8_t i = 0; i < 3; ++i) {
 800186c:	2300      	movs	r3, #0
 800186e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001872:	e025      	b.n	80018c0 <main+0x8c>
      mpu_config.ACCEL_OFFSET[i] = 0;
 8001874:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001878:	3308      	adds	r3, #8
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001880:	4413      	add	r3, r2
 8001882:	3b8c      	subs	r3, #140	; 0x8c
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
      mpu_config.GYRO_OFFSET[i] = 0;
 800188a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800188e:	330a      	adds	r3, #10
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001896:	4413      	add	r3, r2
 8001898:	3b88      	subs	r3, #136	; 0x88
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
      mpu_config.MAG_OFFSET[i] = 0;
 80018a0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80018a4:	330e      	adds	r3, #14
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80018ac:	4413      	add	r3, r2
 80018ae:	3b8c      	subs	r3, #140	; 0x8c
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 3; ++i) {
 80018b6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80018ba:	3301      	adds	r3, #1
 80018bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80018c0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d9d5      	bls.n	8001874 <main+0x40>
  }
  MPU9250_Initialize(&mpu_config);
 80018c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fa06 	bl	8001cde <MPU9250_Initialize>
  MPU9250_Config(&mpu_config);
 80018d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fcb8 	bl	800224c <MPU9250_Config>
  MPU9250_Calibrate(&mpu_config);
 80018dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f8fd 	bl	8002ae0 <MPU9250_Calibrate>

  // Initialize attitude variables
  AttitudeState s;
  attitudeInit(&s);
 80018e6:	463b      	mov	r3, r7
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fb45 	bl	8000f78 <attitudeInit>
  // start timer for quaternion computations
  HAL_TIM_Base_Start_IT(&htim6);
 80018ee:	4827      	ldr	r0, [pc, #156]	; (800198c <main+0x158>)
 80018f0:	f002 ff21 	bl	8004736 <HAL_TIM_Base_Start_IT>
  while (1)
  {
      if (computeAttitude) {
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <main+0x15c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0fa      	beq.n	80018f4 <main+0xc0>
          MPU9250_Update7DOF(&mpu_config, &mpu_data);
 80018fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001902:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 ffad 	bl	8002868 <MPU9250_Update7DOF>
          madgwickUpdate(&s, mpu_data.accel, mpu_data.gyro, 3);
 800190e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001912:	f103 0214 	add.w	r2, r3, #20
 8001916:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800191a:	4638      	mov	r0, r7
 800191c:	2303      	movs	r3, #3
 800191e:	f7ff fcbb 	bl	8001298 <madgwickUpdate>
          computeAngles(&s);
 8001922:	463b      	mov	r3, r7
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb57 	bl	8000fd8 <computeAngles>
          if (num_computations >= 100) {
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <main+0x160>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	2b63      	cmp	r3, #99	; 0x63
 8001932:	d923      	bls.n	800197c <main+0x148>
              printf("%i ", (int32_t) (s.roll));
 8001934:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001938:	4618      	mov	r0, r3
 800193a:	4621      	mov	r1, r4
 800193c:	f7ff f924 	bl	8000b88 <__aeabi_d2iz>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4814      	ldr	r0, [pc, #80]	; (8001998 <main+0x164>)
 8001946:	f003 fe59 	bl	80055fc <iprintf>
              printf("%i ", (int32_t) (s.pitch));
 800194a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800194e:	4618      	mov	r0, r3
 8001950:	4621      	mov	r1, r4
 8001952:	f7ff f919 	bl	8000b88 <__aeabi_d2iz>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	480f      	ldr	r0, [pc, #60]	; (8001998 <main+0x164>)
 800195c:	f003 fe4e 	bl	80055fc <iprintf>
              printf("%i\r\n", (int32_t) (s.yaw));
 8001960:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001964:	4618      	mov	r0, r3
 8001966:	4621      	mov	r1, r4
 8001968:	f7ff f90e 	bl	8000b88 <__aeabi_d2iz>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	480a      	ldr	r0, [pc, #40]	; (800199c <main+0x168>)
 8001972:	f003 fe43 	bl	80055fc <iprintf>
//                printf("y: %i, ", (int32_t) (mpu_data.accel[1]*1000));
//                printf("z: %i \n\r", (int32_t) (mpu_data.accel[2]*1000));
//                printf("gyro x: %i, ", (int32_t) (mpu_data.gyro[0]*1000));
//                printf("gyro y: %i, ", (int32_t) (mpu_data.gyro[1]*1000));
//                printf("gyro z: %i \n\r", (int32_t) (mpu_data.gyro[2]*1000));
              num_computations = 0;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <main+0x160>)
 8001978:	2200      	movs	r2, #0
 800197a:	801a      	strh	r2, [r3, #0]
          } // prints at 1 Hz
          computeAttitude = 0;
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <main+0x15c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      if (computeAttitude) {
 8001982:	e7b7      	b.n	80018f4 <main+0xc0>
 8001984:	200000a0 	.word	0x200000a0
 8001988:	40020800 	.word	0x40020800
 800198c:	200000f8 	.word	0x200000f8
 8001990:	20000090 	.word	0x20000090
 8001994:	20000092 	.word	0x20000092
 8001998:	08006f38 	.word	0x08006f38
 800199c:	08006f3c 	.word	0x08006f3c

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	2234      	movs	r2, #52	; 0x34
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fe1c 	bl	80055ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SystemClock_Config+0xd4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019e0:	2300      	movs	r3, #0
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <SystemClock_Config+0xd8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <SystemClock_Config+0xd8>)
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <SystemClock_Config+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a14:	2308      	movs	r3, #8
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a24:	2302      	movs	r3, #2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 f94b 	bl	8003cc8 <HAL_RCC_OscConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a38:	f000 f94a 	bl	8001cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3c:	230f      	movs	r3, #15
 8001a3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fe7a 	bl	8003754 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a66:	f000 f933 	bl	8001cd0 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3750      	adds	r7, #80	; 0x50
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000

08001a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <MX_SPI2_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab0:	2228      	movs	r2, #40	; 0x28
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ace:	f002 fb55 	bl	800417c <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f000 f8fa 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200000a0 	.word	0x200000a0
 8001ae4:	40003800 	.word	0x40003800

08001ae8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <MX_TIM6_Init+0x68>)
 8001afa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 639;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001afe:	f240 227f 	movw	r2, #639	; 0x27f
 8001b02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001b0c:	2263      	movs	r2, #99	; 0x63
 8001b0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001b18:	f002 fde2 	bl	80046e0 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b22:	f000 f8d5 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_TIM6_Init+0x64>)
 8001b34:	f002 fff4 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b3e:	f000 f8c7 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000f8 	.word	0x200000f8
 8001b50:	40001000 	.word	0x40001000

08001b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_USART2_UART_Init+0x50>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	f003 f858 	bl	8004c40 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b96:	f000 f89b 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000138 	.word	0x20000138
 8001ba4:	40004400 	.word	0x40004400

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2108      	movs	r1, #8
 8001c32:	481b      	ldr	r0, [pc, #108]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c34:	f001 fd74 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c3e:	f001 fd6f 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_GPIO_Init+0x100>)
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c58:	f001 fbd0 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_CS_Pin */
  GPIO_InitStruct.Pin = MPU_CS_Pin;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MPU_CS_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c74:	f001 fbc2 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c90:	f001 fbb4 	bl	80033fc <HAL_GPIO_Init>

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	; 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	10210000 	.word	0x10210000

08001cac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001cb4:	1d39      	adds	r1, r7, #4
 8001cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4803      	ldr	r0, [pc, #12]	; (8001ccc <__io_putchar+0x20>)
 8001cbe:	f003 f80c 	bl	8004cda <HAL_UART_Transmit>
  return ch;
 8001cc2:	687b      	ldr	r3, [r7, #4]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000138 	.word	0x20000138

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <MPU9250_Initialize>:
#include "mpu.h"

MPU9250_Result_t MPU9250_Initialize(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b088      	sub	sp, #32
 8001ce2:	af02      	add	r7, sp, #8
 8001ce4:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[8] = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef res;

    /* MPU9250_WHO_AM_I ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_WHO_AM_I|0x80;
 8001cf0:	23f5      	movs	r3, #245	; 0xf5
 8001cf2:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6858      	ldr	r0, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	891b      	ldrh	r3, [r3, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f001 fd0e 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f107 020c 	add.w	r2, r7, #12
 8001d0c:	f107 010c 	add.w	r1, r7, #12
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2302      	movs	r3, #2
 8001d18:	f002 fa94 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6858      	ldr	r0, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	891b      	ldrh	r3, [r3, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f001 fcf8 	bl	8003720 <HAL_GPIO_WritePin>

    //WHO_AM_I Check
    if (cmdbuf[1] != 0x71) {
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	2b71      	cmp	r3, #113	; 0x71
 8001d34:	d001      	beq.n	8001d3a <MPU9250_Initialize+0x5c>
        return MPU9250_RESULT_FAIL;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e284      	b.n	8002244 <MPU9250_Initialize+0x566>
    }
    //Ex
    if (res != HAL_OK) {
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MPU9250_Initialize+0x66>
        return MPU9250_RESULT_FAIL;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e27f      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Reset ----------------------------------------------------------*/

    cmdbuf[0] = MPU9250_PWR_MGMT_1;
 8001d44:	236b      	movs	r3, #107	; 0x6b
 8001d46:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6858      	ldr	r0, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	891b      	ldrh	r3, [r3, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	4619      	mov	r1, r3
 8001d58:	f001 fce2 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	f107 020c 	add.w	r2, r7, #12
 8001d64:	f107 010c 	add.w	r1, r7, #12
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f002 fa68 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6858      	ldr	r0, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	891b      	ldrh	r3, [r3, #8]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4619      	mov	r1, r3
 8001d84:	f001 fccc 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MPU9250_Initialize+0xb4>
        return MPU9250_RESULT_FAIL;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e258      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 8001d92:	2064      	movs	r0, #100	; 0x64
 8001d94:	f001 f9fe 	bl	8003194 <HAL_Delay>

    /* MPU9250_I2C_Bypass_mode_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_INT_PIN_CFG;
 8001d98:	2337      	movs	r3, #55	; 0x37
 8001d9a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x12;
 8001d9c:	2312      	movs	r3, #18
 8001d9e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6858      	ldr	r0, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	891b      	ldrh	r3, [r3, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	f001 fcb8 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f107 020c 	add.w	r2, r7, #12
 8001db8:	f107 010c 	add.w	r1, r7, #12
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f002 fa3e 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6858      	ldr	r0, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f001 fca2 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MPU9250_Initialize+0x108>
        return MPU9250_RESULT_FAIL;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e22e      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_I2C_Master_enable ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_USER_CTRL;
 8001de6:	236a      	movs	r3, #106	; 0x6a
 8001de8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x30;
 8001dea:	2330      	movs	r3, #48	; 0x30
 8001dec:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6858      	ldr	r0, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	891b      	ldrh	r3, [r3, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f001 fc91 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	f107 020c 	add.w	r2, r7, #12
 8001e06:	f107 010c 	add.w	r1, r7, #12
 8001e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2302      	movs	r3, #2
 8001e12:	f002 fa17 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001e16:	4603      	mov	r3, r0
 8001e18:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6858      	ldr	r0, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	891b      	ldrh	r3, [r3, #8]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	f001 fc7b 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MPU9250_Initialize+0x156>
        return MPU9250_RESULT_FAIL;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e207      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    /* MPU9250_Set_I2C_clock_400kbps ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_MST_CTRL;
 8001e34:	2324      	movs	r3, #36	; 0x24
 8001e36:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0D;
 8001e38:	230d      	movs	r3, #13
 8001e3a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6858      	ldr	r0, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	891b      	ldrh	r3, [r3, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	f001 fc6a 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	f107 010c 	add.w	r1, r7, #12
 8001e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f002 f9f0 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001e64:	4603      	mov	r3, r0
 8001e66:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6858      	ldr	r0, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	891b      	ldrh	r3, [r3, #8]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4619      	mov	r1, r3
 8001e74:	f001 fc54 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MPU9250_Initialize+0x1a4>
        return MPU9250_RESULT_FAIL;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e1e0      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    /* AK8963_Reset ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001e82:	2325      	movs	r3, #37	; 0x25
 8001e84:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001e86:	230c      	movs	r3, #12
 8001e88:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6858      	ldr	r0, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	891b      	ldrh	r3, [r3, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	f001 fc43 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	f107 020c 	add.w	r2, r7, #12
 8001ea2:	f107 010c 	add.w	r1, r7, #12
 8001ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2302      	movs	r3, #2
 8001eae:	f002 f9c9 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6858      	ldr	r0, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	891b      	ldrh	r3, [r3, #8]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f001 fc2d 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MPU9250_Initialize+0x1f2>
        return MPU9250_RESULT_FAIL;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e1b9      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 8001ed0:	2326      	movs	r3, #38	; 0x26
 8001ed2:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL2;
 8001ed4:	230b      	movs	r3, #11
 8001ed6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6858      	ldr	r0, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	891b      	ldrh	r3, [r3, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f001 fc1c 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f107 020c 	add.w	r2, r7, #12
 8001ef0:	f107 010c 	add.w	r1, r7, #12
 8001ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2302      	movs	r3, #2
 8001efc:	f002 f9a2 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6858      	ldr	r0, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	891b      	ldrh	r3, [r3, #8]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f001 fc06 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MPU9250_Initialize+0x240>
        return MPU9250_RESULT_FAIL;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e192      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 8001f1e:	2363      	movs	r3, #99	; 0x63
 8001f20:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x01;
 8001f22:	2301      	movs	r3, #1
 8001f24:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6858      	ldr	r0, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	891b      	ldrh	r3, [r3, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	f001 fbf5 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f107 020c 	add.w	r2, r7, #12
 8001f3e:	f107 010c 	add.w	r1, r7, #12
 8001f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f002 f97b 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6858      	ldr	r0, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	891b      	ldrh	r3, [r3, #8]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f001 fbdf 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MPU9250_Initialize+0x28e>
        return MPU9250_RESULT_FAIL;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e16b      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 8001f6c:	2327      	movs	r3, #39	; 0x27
 8001f6e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 8001f70:	2381      	movs	r3, #129	; 0x81
 8001f72:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6858      	ldr	r0, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	891b      	ldrh	r3, [r3, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f001 fbce 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,8,0xFFFF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	f107 020c 	add.w	r2, r7, #12
 8001f8c:	f107 010c 	add.w	r1, r7, #12
 8001f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2308      	movs	r3, #8
 8001f98:	f002 f954 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6858      	ldr	r0, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	891b      	ldrh	r3, [r3, #8]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f001 fbb8 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MPU9250_Initialize+0x2dc>
        return MPU9250_RESULT_FAIL;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e144      	b.n	8002244 <MPU9250_Initialize+0x566>
    }
    HAL_Delay(100);
 8001fba:	2064      	movs	r0, #100	; 0x64
 8001fbc:	f001 f8ea 	bl	8003194 <HAL_Delay>

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8001fc0:	2325      	movs	r3, #37	; 0x25
 8001fc2:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6858      	ldr	r0, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	891b      	ldrh	r3, [r3, #8]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f001 fba4 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 020c 	add.w	r2, r7, #12
 8001fe0:	f107 010c 	add.w	r1, r7, #12
 8001fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2302      	movs	r3, #2
 8001fec:	f002 f92a 	bl	8004244 <HAL_SPI_TransmitReceive>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6858      	ldr	r0, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	891b      	ldrh	r3, [r3, #8]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4619      	mov	r1, r3
 8002000:	f001 fb8e 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MPU9250_Initialize+0x330>
        return MPU9250_RESULT_FAIL;
 800200a:	2301      	movs	r3, #1
 800200c:	e11a      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800200e:	2326      	movs	r3, #38	; 0x26
 8002010:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8002012:	230a      	movs	r3, #10
 8002014:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	891b      	ldrh	r3, [r3, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	f001 fb7d 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f107 020c 	add.w	r2, r7, #12
 800202e:	f107 010c 	add.w	r1, r7, #12
 8002032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2302      	movs	r3, #2
 800203a:	f002 f903 	bl	8004244 <HAL_SPI_TransmitReceive>
 800203e:	4603      	mov	r3, r0
 8002040:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6858      	ldr	r0, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	891b      	ldrh	r3, [r3, #8]
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f001 fb67 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MPU9250_Initialize+0x37e>
        return MPU9250_RESULT_FAIL;
 8002058:	2301      	movs	r3, #1
 800205a:	e0f3      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 800205c:	2363      	movs	r3, #99	; 0x63
 800205e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 8002060:	2316      	movs	r3, #22
 8002062:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6858      	ldr	r0, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	891b      	ldrh	r3, [r3, #8]
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	f001 fb56 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	f107 010c 	add.w	r1, r7, #12
 8002080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2302      	movs	r3, #2
 8002088:	f002 f8dc 	bl	8004244 <HAL_SPI_TransmitReceive>
 800208c:	4603      	mov	r3, r0
 800208e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6858      	ldr	r0, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	891b      	ldrh	r3, [r3, #8]
 8002098:	2201      	movs	r2, #1
 800209a:	4619      	mov	r1, r3
 800209c:	f001 fb40 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MPU9250_Initialize+0x3cc>
        return MPU9250_RESULT_FAIL;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0cc      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80020aa:	2327      	movs	r3, #39	; 0x27
 80020ac:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80020ae:	2381      	movs	r3, #129	; 0x81
 80020b0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6858      	ldr	r0, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	891b      	ldrh	r3, [r3, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	f001 fb2f 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2302      	movs	r3, #2
 80020d6:	f002 f8b5 	bl	8004244 <HAL_SPI_TransmitReceive>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6858      	ldr	r0, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	891b      	ldrh	r3, [r3, #8]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4619      	mov	r1, r3
 80020ea:	f001 fb19 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MPU9250_Initialize+0x41a>
        return MPU9250_RESULT_FAIL;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0a5      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 80020f8:	2064      	movs	r0, #100	; 0x64
 80020fa:	f001 f84b 	bl	8003194 <HAL_Delay>

    /* AK8963_WHO_AM_I ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 80020fe:	2325      	movs	r3, #37	; 0x25
 8002100:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 8002102:	238c      	movs	r3, #140	; 0x8c
 8002104:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6858      	ldr	r0, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	891b      	ldrh	r3, [r3, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	4619      	mov	r1, r3
 8002112:	f001 fb05 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f107 020c 	add.w	r2, r7, #12
 800211e:	f107 010c 	add.w	r1, r7, #12
 8002122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2302      	movs	r3, #2
 800212a:	f002 f88b 	bl	8004244 <HAL_SPI_TransmitReceive>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6858      	ldr	r0, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	891b      	ldrh	r3, [r3, #8]
 800213a:	2201      	movs	r2, #1
 800213c:	4619      	mov	r1, r3
 800213e:	f001 faef 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MPU9250_Initialize+0x46e>
        return MPU9250_RESULT_FAIL;
 8002148:	2301      	movs	r3, #1
 800214a:	e07b      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800214c:	2326      	movs	r3, #38	; 0x26
 800214e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_WIA;
 8002150:	2300      	movs	r3, #0
 8002152:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6858      	ldr	r0, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	891b      	ldrh	r3, [r3, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	4619      	mov	r1, r3
 8002160:	f001 fade 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f107 020c 	add.w	r2, r7, #12
 800216c:	f107 010c 	add.w	r1, r7, #12
 8002170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2302      	movs	r3, #2
 8002178:	f002 f864 	bl	8004244 <HAL_SPI_TransmitReceive>
 800217c:	4603      	mov	r3, r0
 800217e:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6858      	ldr	r0, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	891b      	ldrh	r3, [r3, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	4619      	mov	r1, r3
 800218c:	f001 fac8 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MPU9250_Initialize+0x4bc>
        return MPU9250_RESULT_FAIL;
 8002196:	2301      	movs	r3, #1
 8002198:	e054      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 800219a:	2327      	movs	r3, #39	; 0x27
 800219c:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 800219e:	2381      	movs	r3, #129	; 0x81
 80021a0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6858      	ldr	r0, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	891b      	ldrh	r3, [r3, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	f001 fab7 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	f107 020c 	add.w	r2, r7, #12
 80021ba:	f107 010c 	add.w	r1, r7, #12
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2302      	movs	r3, #2
 80021c6:	f002 f83d 	bl	8004244 <HAL_SPI_TransmitReceive>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6858      	ldr	r0, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	891b      	ldrh	r3, [r3, #8]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4619      	mov	r1, r3
 80021da:	f001 faa1 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MPU9250_Initialize+0x50a>
        return MPU9250_RESULT_FAIL;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e02d      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    HAL_Delay(100);
 80021e8:	2064      	movs	r0, #100	; 0x64
 80021ea:	f000 ffd3 	bl	8003194 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 80021ee:	23c9      	movs	r3, #201	; 0xc9
 80021f0:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6858      	ldr	r0, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	891b      	ldrh	r3, [r3, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	4619      	mov	r1, r3
 80021fe:	f001 fa8f 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	f107 010c 	add.w	r1, r7, #12
 800220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2302      	movs	r3, #2
 8002216:	f002 f815 	bl	8004244 <HAL_SPI_TransmitReceive>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6858      	ldr	r0, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	891b      	ldrh	r3, [r3, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4619      	mov	r1, r3
 800222a:	f001 fa79 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 800222e:	7dfb      	ldrb	r3, [r7, #23]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MPU9250_Initialize+0x55a>
        return MPU9250_RESULT_FAIL;
 8002234:	2301      	movs	r3, #1
 8002236:	e005      	b.n	8002244 <MPU9250_Initialize+0x566>
    }
    //WHO_AM_I Check
    if (cmdbuf[1] != 0x48) {
 8002238:	7b7b      	ldrb	r3, [r7, #13]
 800223a:	2b48      	cmp	r3, #72	; 0x48
 800223c:	d001      	beq.n	8002242 <MPU9250_Initialize+0x564>
        return MPU9250_RESULT_FAIL;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <MPU9250_Initialize+0x566>
    }

    return MPU9250_RESULT_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <MPU9250_Config>:

MPU9250_Result_t MPU9250_Config(MPU9250_CONFIG_t *MPU9250_CONFIG){
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af02      	add	r7, sp, #8
 8002252:	6078      	str	r0, [r7, #4]
    uint8_t cmdbuf[4] = {0};
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef res;

    /* MPU9250_Set_Accel_Scale ---------------------------------------------------------*/
    cmdbuf[0] = MPU9250_CONFIG->ACCEL_SCALE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7a9b      	ldrb	r3, [r3, #10]
 800225c:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == ACCEL_SCALE_2G){//2G
 800225e:	7b3b      	ldrb	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <MPU9250_Config+0x22>
        MPU9250_CONFIG->ARES = 2.0;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e016      	b.n	800229c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_4G){//4G
 800226e:	7b3b      	ldrb	r3, [r7, #12]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d104      	bne.n	800227e <MPU9250_Config+0x32>
        MPU9250_CONFIG->ARES = 4.0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	e00e      	b.n	800229c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_8G){//8G
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d104      	bne.n	800228e <MPU9250_Config+0x42>
        MPU9250_CONFIG->ARES = 8.0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e006      	b.n	800229c <MPU9250_Config+0x50>
    }
    else if(cmdbuf[0] == ACCEL_SCALE_16G){//16G
 800228e:	7b3b      	ldrb	r3, [r7, #12]
 8002290:	2b18      	cmp	r3, #24
 8002292:	d103      	bne.n	800229c <MPU9250_Config+0x50>
        MPU9250_CONFIG->ARES = 16.0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800229a:	60da      	str	r2, [r3, #12]
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG|0x80;
 800229c:	239c      	movs	r3, #156	; 0x9c
 800229e:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6858      	ldr	r0, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	891b      	ldrh	r3, [r3, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	f001 fa38 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	f107 020c 	add.w	r2, r7, #12
 80022b8:	f107 010c 	add.w	r1, r7, #12
 80022bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2302      	movs	r3, #2
 80022c4:	f001 ffbe 	bl	8004244 <HAL_SPI_TransmitReceive>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6858      	ldr	r0, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	891b      	ldrh	r3, [r3, #8]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4619      	mov	r1, r3
 80022d8:	f001 fa22 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MPU9250_Config+0x9a>
        return MPU9250_RESULT_FAIL;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e2b3      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_ACCEL_CONFIG;
 80022e6:	231c      	movs	r3, #28
 80022e8:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 80022ea:	7b7a      	ldrb	r2, [r7, #13]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7a9b      	ldrb	r3, [r3, #10]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6858      	ldr	r0, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	891b      	ldrh	r3, [r3, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	4619      	mov	r1, r3
 8002302:	f001 fa0d 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	f107 010c 	add.w	r1, r7, #12
 8002312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2302      	movs	r3, #2
 800231a:	f001 ff93 	bl	8004244 <HAL_SPI_TransmitReceive>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6858      	ldr	r0, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	891b      	ldrh	r3, [r3, #8]
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	f001 f9f7 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MPU9250_Config+0xf0>
        return MPU9250_RESULT_FAIL;
 8002338:	2301      	movs	r3, #1
 800233a:	e288      	b.n	800284e <MPU9250_Config+0x602>
    }

    /* MPU9250_GYRO_CONFIG ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_CONFIG->GYRO_SCALE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7adb      	ldrb	r3, [r3, #11]
 8002340:	733b      	strb	r3, [r7, #12]
    if(cmdbuf[0] == GYRO_SCALE_250dps){//250dps
 8002342:	7b3b      	ldrb	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <MPU9250_Config+0x104>
        MPU9250_CONFIG->GRES = 250;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4aa8      	ldr	r2, [pc, #672]	; (80025ec <MPU9250_Config+0x3a0>)
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	e013      	b.n	8002378 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_500dps){//500dps
 8002350:	7b3b      	ldrb	r3, [r7, #12]
 8002352:	2b08      	cmp	r3, #8
 8002354:	d103      	bne.n	800235e <MPU9250_Config+0x112>
        MPU9250_CONFIG->GRES = 500;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4aa5      	ldr	r2, [pc, #660]	; (80025f0 <MPU9250_Config+0x3a4>)
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	e00c      	b.n	8002378 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_1000dps){//1000dps
 800235e:	7b3b      	ldrb	r3, [r7, #12]
 8002360:	2b10      	cmp	r3, #16
 8002362:	d103      	bne.n	800236c <MPU9250_Config+0x120>
        MPU9250_CONFIG->GRES = 1000;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4aa3      	ldr	r2, [pc, #652]	; (80025f4 <MPU9250_Config+0x3a8>)
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	e005      	b.n	8002378 <MPU9250_Config+0x12c>
    }
    else if(cmdbuf[0] == GYRO_SCALE_2000dps){//2000dps
 800236c:	7b3b      	ldrb	r3, [r7, #12]
 800236e:	2b18      	cmp	r3, #24
 8002370:	d102      	bne.n	8002378 <MPU9250_Config+0x12c>
        MPU9250_CONFIG->GRES = 2000;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4aa0      	ldr	r2, [pc, #640]	; (80025f8 <MPU9250_Config+0x3ac>)
 8002376:	611a      	str	r2, [r3, #16]
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG|0x80;
 8002378:	239b      	movs	r3, #155	; 0x9b
 800237a:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6858      	ldr	r0, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	891b      	ldrh	r3, [r3, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	4619      	mov	r1, r3
 8002388:	f001 f9ca 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	f107 020c 	add.w	r2, r7, #12
 8002394:	f107 010c 	add.w	r1, r7, #12
 8002398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2302      	movs	r3, #2
 80023a0:	f001 ff50 	bl	8004244 <HAL_SPI_TransmitReceive>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6858      	ldr	r0, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	891b      	ldrh	r3, [r3, #8]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4619      	mov	r1, r3
 80023b4:	f001 f9b4 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MPU9250_Config+0x176>
        return MPU9250_RESULT_FAIL;
 80023be:	2301      	movs	r3, #1
 80023c0:	e245      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_GYRO_CONFIG;
 80023c2:	231b      	movs	r3, #27
 80023c4:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = cmdbuf[1] | MPU9250_CONFIG->ACCEL_SCALE;
 80023c6:	7b7a      	ldrb	r2, [r7, #13]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7a9b      	ldrb	r3, [r3, #10]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6858      	ldr	r0, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	891b      	ldrh	r3, [r3, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	f001 f99f 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	f107 020c 	add.w	r2, r7, #12
 80023ea:	f107 010c 	add.w	r1, r7, #12
 80023ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2302      	movs	r3, #2
 80023f6:	f001 ff25 	bl	8004244 <HAL_SPI_TransmitReceive>
 80023fa:	4603      	mov	r3, r0
 80023fc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6858      	ldr	r0, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	891b      	ldrh	r3, [r3, #8]
 8002406:	2201      	movs	r2, #1
 8002408:	4619      	mov	r1, r3
 800240a:	f001 f989 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MPU9250_Config+0x1cc>
        return MPU9250_RESULT_FAIL;
 8002414:	2301      	movs	r3, #1
 8002416:	e21a      	b.n	800284e <MPU9250_Config+0x602>
    }

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/
    /* AK8963_Set_Fuse_access_mode ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 8002418:	2325      	movs	r3, #37	; 0x25
 800241a:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 800241c:	230c      	movs	r3, #12
 800241e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6858      	ldr	r0, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	f001 f978 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	f107 010c 	add.w	r1, r7, #12
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2302      	movs	r3, #2
 8002444:	f001 fefe 	bl	8004244 <HAL_SPI_TransmitReceive>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6858      	ldr	r0, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	891b      	ldrh	r3, [r3, #8]
 8002454:	2201      	movs	r2, #1
 8002456:	4619      	mov	r1, r3
 8002458:	f001 f962 	bl	8003720 <HAL_GPIO_WritePin>
    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800245c:	2326      	movs	r3, #38	; 0x26
 800245e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8002460:	230a      	movs	r3, #10
 8002462:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6858      	ldr	r0, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	891b      	ldrh	r3, [r3, #8]
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	f001 f956 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	f107 020c 	add.w	r2, r7, #12
 800247c:	f107 010c 	add.w	r1, r7, #12
 8002480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2302      	movs	r3, #2
 8002488:	f001 fedc 	bl	8004244 <HAL_SPI_TransmitReceive>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6858      	ldr	r0, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	891b      	ldrh	r3, [r3, #8]
 8002498:	2201      	movs	r2, #1
 800249a:	4619      	mov	r1, r3
 800249c:	f001 f940 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MPU9250_Config+0x25e>
        return MPU9250_RESULT_FAIL;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1d1      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80024aa:	2363      	movs	r3, #99	; 0x63
 80024ac:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x0F;
 80024ae:	230f      	movs	r3, #15
 80024b0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6858      	ldr	r0, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	891b      	ldrh	r3, [r3, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	f001 f92f 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f107 020c 	add.w	r2, r7, #12
 80024ca:	f107 010c 	add.w	r1, r7, #12
 80024ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2302      	movs	r3, #2
 80024d6:	f001 feb5 	bl	8004244 <HAL_SPI_TransmitReceive>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6858      	ldr	r0, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	891b      	ldrh	r3, [r3, #8]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4619      	mov	r1, r3
 80024ea:	f001 f919 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MPU9250_Config+0x2ac>
        return MPU9250_RESULT_FAIL;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e1aa      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80024f8:	2327      	movs	r3, #39	; 0x27
 80024fa:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80024fc:	2381      	movs	r3, #129	; 0x81
 80024fe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6858      	ldr	r0, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	891b      	ldrh	r3, [r3, #8]
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	f001 f908 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	f107 020c 	add.w	r2, r7, #12
 8002518:	f107 010c 	add.w	r1, r7, #12
 800251c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2302      	movs	r3, #2
 8002524:	f001 fe8e 	bl	8004244 <HAL_SPI_TransmitReceive>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6858      	ldr	r0, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	891b      	ldrh	r3, [r3, #8]
 8002534:	2201      	movs	r2, #1
 8002536:	4619      	mov	r1, r3
 8002538:	f001 f8f2 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MPU9250_Config+0x2fa>
        return MPU9250_RESULT_FAIL;
 8002542:	2301      	movs	r3, #1
 8002544:	e183      	b.n	800284e <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 8002546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800254a:	f000 fe23 	bl	8003194 <HAL_Delay>

    /* AK8963_Get_MAG_Sensitivity ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800254e:	2325      	movs	r3, #37	; 0x25
 8002550:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS|0x80;
 8002552:	238c      	movs	r3, #140	; 0x8c
 8002554:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6858      	ldr	r0, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	891b      	ldrh	r3, [r3, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	4619      	mov	r1, r3
 8002562:	f001 f8dd 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f107 020c 	add.w	r2, r7, #12
 800256e:	f107 010c 	add.w	r1, r7, #12
 8002572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2302      	movs	r3, #2
 800257a:	f001 fe63 	bl	8004244 <HAL_SPI_TransmitReceive>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6858      	ldr	r0, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	891b      	ldrh	r3, [r3, #8]
 800258a:	2201      	movs	r2, #1
 800258c:	4619      	mov	r1, r3
 800258e:	f001 f8c7 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MPU9250_Config+0x350>
        return MPU9250_RESULT_FAIL;
 8002598:	2301      	movs	r3, #1
 800259a:	e158      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800259c:	2326      	movs	r3, #38	; 0x26
 800259e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ASAX;
 80025a0:	2310      	movs	r3, #16
 80025a2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6858      	ldr	r0, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	891b      	ldrh	r3, [r3, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	f001 f8b6 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	f107 010c 	add.w	r1, r7, #12
 80025c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2302      	movs	r3, #2
 80025c8:	f001 fe3c 	bl	8004244 <HAL_SPI_TransmitReceive>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6858      	ldr	r0, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	891b      	ldrh	r3, [r3, #8]
 80025d8:	2201      	movs	r2, #1
 80025da:	4619      	mov	r1, r3
 80025dc:	f001 f8a0 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <MPU9250_Config+0x3b0>
        return MPU9250_RESULT_FAIL;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e131      	b.n	800284e <MPU9250_Config+0x602>
 80025ea:	bf00      	nop
 80025ec:	437a0000 	.word	0x437a0000
 80025f0:	43fa0000 	.word	0x43fa0000
 80025f4:	447a0000 	.word	0x447a0000
 80025f8:	44fa0000 	.word	0x44fa0000
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80025fc:	2327      	movs	r3, #39	; 0x27
 80025fe:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x83;
 8002600:	2383      	movs	r3, #131	; 0x83
 8002602:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6858      	ldr	r0, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	891b      	ldrh	r3, [r3, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	f001 f886 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	f107 010c 	add.w	r1, r7, #12
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2302      	movs	r3, #2
 8002628:	f001 fe0c 	bl	8004244 <HAL_SPI_TransmitReceive>
 800262c:	4603      	mov	r3, r0
 800262e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6858      	ldr	r0, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	891b      	ldrh	r3, [r3, #8]
 8002638:	2201      	movs	r2, #1
 800263a:	4619      	mov	r1, r3
 800263c:	f001 f870 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MPU9250_Config+0x3fe>
        return MPU9250_RESULT_FAIL;
 8002646:	2301      	movs	r3, #1
 8002648:	e101      	b.n	800284e <MPU9250_Config+0x602>
    }

    HAL_Delay(500);
 800264a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800264e:	f000 fda1 	bl	8003194 <HAL_Delay>

    cmdbuf[0] = MPU9250_EXT_SENS_DATA_00|0x80;
 8002652:	23c9      	movs	r3, #201	; 0xc9
 8002654:	733b      	strb	r3, [r7, #12]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6858      	ldr	r0, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	891b      	ldrh	r3, [r3, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	4619      	mov	r1, r3
 8002662:	f001 f85d 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,4,0xFFFF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	f107 020c 	add.w	r2, r7, #12
 800266e:	f107 010c 	add.w	r1, r7, #12
 8002672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2304      	movs	r3, #4
 800267a:	f001 fde3 	bl	8004244 <HAL_SPI_TransmitReceive>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6858      	ldr	r0, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	891b      	ldrh	r3, [r3, #8]
 800268a:	2201      	movs	r2, #1
 800268c:	4619      	mov	r1, r3
 800268e:	f001 f847 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MPU9250_Config+0x450>
        return MPU9250_RESULT_FAIL;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d8      	b.n	800284e <MPU9250_Config+0x602>
    }

    for(int i=0;i<3;i++){
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e032      	b.n	8002708 <MPU9250_Config+0x4bc>
        MPU9250_CONFIG->MAG_SENSITIVITY[i] = (((cmdbuf[i+1] -128)*0.5)/128)+1;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	f107 0218 	add.w	r2, r7, #24
 80026aa:	4413      	add	r3, r2
 80026ac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80026b0:	3b80      	subs	r3, #128	; 0x80
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd ff4e 	bl	8000554 <__aeabi_i2d>
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <MPU9250_Config+0x60c>)
 80026be:	f7fd ffb3 	bl	8000628 <__aeabi_dmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	4618      	mov	r0, r3
 80026c8:	4621      	mov	r1, r4
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <MPU9250_Config+0x610>)
 80026d0:	f7fe f8d4 	bl	800087c <__aeabi_ddiv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4618      	mov	r0, r3
 80026da:	4621      	mov	r1, r4
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <MPU9250_Config+0x614>)
 80026e2:	f7fd fdeb 	bl	80002bc <__adddf3>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	4618      	mov	r0, r3
 80026ec:	4621      	mov	r1, r4
 80026ee:	f7fe fa73 	bl	8000bd8 <__aeabi_d2f>
 80026f2:	4601      	mov	r1, r0
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3304      	adds	r3, #4
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	6019      	str	r1, [r3, #0]
    for(int i=0;i<3;i++){
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b02      	cmp	r3, #2
 800270c:	ddc9      	ble.n	80026a2 <MPU9250_Config+0x456>
    }

    /* AK8963_Set_16bit_continuous_measurement_mode_2 ---------------------------------------------------------*/

    cmdbuf[0] = MPU9250_I2C_SLV0_ADDR;
 800270e:	2325      	movs	r3, #37	; 0x25
 8002710:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_ADDRESS;
 8002712:	230c      	movs	r3, #12
 8002714:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6858      	ldr	r0, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	891b      	ldrh	r3, [r3, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	4619      	mov	r1, r3
 8002722:	f000 fffd 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f107 020c 	add.w	r2, r7, #12
 800272e:	f107 010c 	add.w	r1, r7, #12
 8002732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2302      	movs	r3, #2
 800273a:	f001 fd83 	bl	8004244 <HAL_SPI_TransmitReceive>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6858      	ldr	r0, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	891b      	ldrh	r3, [r3, #8]
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	f000 ffe7 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MPU9250_Config+0x510>
        return MPU9250_RESULT_FAIL;
 8002758:	2301      	movs	r3, #1
 800275a:	e078      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_REG;
 800275c:	2326      	movs	r3, #38	; 0x26
 800275e:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = AK8963_CNTL1;
 8002760:	230a      	movs	r3, #10
 8002762:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6858      	ldr	r0, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	891b      	ldrh	r3, [r3, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	4619      	mov	r1, r3
 8002770:	f000 ffd6 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f107 020c 	add.w	r2, r7, #12
 800277c:	f107 010c 	add.w	r1, r7, #12
 8002780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2302      	movs	r3, #2
 8002788:	f001 fd5c 	bl	8004244 <HAL_SPI_TransmitReceive>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6858      	ldr	r0, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	891b      	ldrh	r3, [r3, #8]
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	f000 ffc0 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MPU9250_Config+0x55e>
        return MPU9250_RESULT_FAIL;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e051      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_DO;
 80027aa:	2363      	movs	r3, #99	; 0x63
 80027ac:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x16;
 80027ae:	2316      	movs	r3, #22
 80027b0:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6858      	ldr	r0, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	891b      	ldrh	r3, [r3, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	4619      	mov	r1, r3
 80027be:	f000 ffaf 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f107 020c 	add.w	r2, r7, #12
 80027ca:	f107 010c 	add.w	r1, r7, #12
 80027ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2302      	movs	r3, #2
 80027d6:	f001 fd35 	bl	8004244 <HAL_SPI_TransmitReceive>
 80027da:	4603      	mov	r3, r0
 80027dc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6858      	ldr	r0, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	891b      	ldrh	r3, [r3, #8]
 80027e6:	2201      	movs	r2, #1
 80027e8:	4619      	mov	r1, r3
 80027ea:	f000 ff99 	bl	8003720 <HAL_GPIO_WritePin>

    //Ex
    if (res != HAL_OK) {
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MPU9250_Config+0x5ac>
        return MPU9250_RESULT_FAIL;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e02a      	b.n	800284e <MPU9250_Config+0x602>
    }

    cmdbuf[0] = MPU9250_I2C_SLV0_CTRL;
 80027f8:	2327      	movs	r3, #39	; 0x27
 80027fa:	733b      	strb	r3, [r7, #12]
    cmdbuf[1] = 0x81;
 80027fc:	2381      	movs	r3, #129	; 0x81
 80027fe:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6858      	ldr	r0, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	891b      	ldrh	r3, [r3, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	4619      	mov	r1, r3
 800280c:	f000 ff88 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,2,0xFFFF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f107 020c 	add.w	r2, r7, #12
 8002818:	f107 010c 	add.w	r1, r7, #12
 800281c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	2302      	movs	r3, #2
 8002824:	f001 fd0e 	bl	8004244 <HAL_SPI_TransmitReceive>
 8002828:	4603      	mov	r3, r0
 800282a:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6858      	ldr	r0, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	891b      	ldrh	r3, [r3, #8]
 8002834:	2201      	movs	r2, #1
 8002836:	4619      	mov	r1, r3
 8002838:	f000 ff72 	bl	8003720 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800283c:	2064      	movs	r0, #100	; 0x64
 800283e:	f000 fca9 	bl	8003194 <HAL_Delay>

    //Ex
    if (res != HAL_OK) {
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MPU9250_Config+0x600>
        return MPU9250_RESULT_FAIL;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <MPU9250_Config+0x602>
    }

    return MPU9250_RESULT_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd90      	pop	{r4, r7, pc}
 8002856:	bf00      	nop
 8002858:	3fe00000 	.word	0x3fe00000
 800285c:	40600000 	.word	0x40600000
 8002860:	3ff00000 	.word	0x3ff00000
 8002864:	00000000 	.word	0x00000000

08002868 <MPU9250_Update7DOF>:

MPU9250_Result_t MPU9250_Update7DOF(MPU9250_CONFIG_t *MPU9250_CONFIG,MPU9250_DATA_t *MPU9250_DATA){
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
    uint8_t cmdbuf[15] = {0};
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	f8c3 200b 	str.w	r2, [r3, #11]
    HAL_StatusTypeDef res;

    /* MPU9250_Get_Accel_Gyro_and_Temp ---------------------------------------------------------*/

    uint8_t cmd_base = MPU9250_ACCEL_XOUT_H|0x80;
 8002882:	23bb      	movs	r3, #187	; 0xbb
 8002884:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < 15; ++i) {
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800288c:	e010      	b.n	80028b0 <MPU9250_Update7DOF+0x48>
        cmdbuf[i] = cmd_base + i;
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002892:	7ff9      	ldrb	r1, [r7, #31]
 8002894:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002898:	440a      	add	r2, r1
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028a0:	440b      	add	r3, r1
 80028a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 15; ++i) {
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028aa:	3301      	adds	r3, #1
 80028ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b4:	2b0e      	cmp	r3, #14
 80028b6:	d9ea      	bls.n	800288e <MPU9250_Update7DOF+0x26>
    }

    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6858      	ldr	r0, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	891b      	ldrh	r3, [r3, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f000 ff2c 	bl	8003720 <HAL_GPIO_WritePin>
    res = HAL_SPI_TransmitReceive(MPU9250_CONFIG->hspi,cmdbuf,cmdbuf,15,0xFFFF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	f107 020c 	add.w	r2, r7, #12
 80028d0:	f107 010c 	add.w	r1, r7, #12
 80028d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	230f      	movs	r3, #15
 80028dc:	f001 fcb2 	bl	8004244 <HAL_SPI_TransmitReceive>
 80028e0:	4603      	mov	r3, r0
 80028e2:	77bb      	strb	r3, [r7, #30]
    HAL_GPIO_WritePin(MPU9250_CONFIG->GPIOx,MPU9250_CONFIG->GPIO_PIN , 1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6858      	ldr	r0, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	891b      	ldrh	r3, [r3, #8]
 80028ec:	2201      	movs	r2, #1
 80028ee:	4619      	mov	r1, r3
 80028f0:	f000 ff16 	bl	8003720 <HAL_GPIO_WritePin>

    if (res != HAL_OK) {
 80028f4:	7fbb      	ldrb	r3, [r7, #30]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MPU9250_Update7DOF+0x96>
        return MPU9250_RESULT_FAIL;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0e1      	b.n	8002ac2 <MPU9250_Update7DOF+0x25a>
    }

    for(int i=0;i<3;i++){
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	e0ac      	b.n	8002a5e <MPU9250_Update7DOF+0x1f6>
        MPU9250_DATA->accel_raw[i] = (uint16_t)cmdbuf[2*i+1] << 8 | cmdbuf[2*i+2];
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	3301      	adds	r3, #1
 800290a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800290e:	4413      	add	r3, r2
 8002910:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	b21a      	sxth	r2, r3
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002922:	440b      	add	r3, r1
 8002924:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002928:	b21b      	sxth	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	b21b      	sxth	r3, r3
 800292e:	b299      	uxth	r1, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	3304      	adds	r3, #4
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	460a      	mov	r2, r1
 800293c:	809a      	strh	r2, [r3, #4]
        MPU9250_DATA->gyro_raw[i] = (uint16_t)cmdbuf[2*i+9] << 8 | cmdbuf[2*i+10];
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3309      	adds	r3, #9
 8002944:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002948:	4413      	add	r3, r2
 800294a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b21a      	sxth	r2, r3
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	3305      	adds	r3, #5
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800295c:	440b      	add	r3, r1
 800295e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002962:	b21b      	sxth	r3, r3
 8002964:	4313      	orrs	r3, r2
 8002966:	b21b      	sxth	r3, r3
 8002968:	b299      	uxth	r1, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	3210      	adds	r2, #16
 8002970:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        MPU9250_DATA->accel[i] = ((int16_t)MPU9250_DATA->accel_raw[i] * MPU9250_CONFIG->ARES)/32768.0 - MPU9250_CONFIG->ACCEL_OFFSET[i];
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	3304      	adds	r3, #4
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	889b      	ldrh	r3, [r3, #4]
 8002980:	b21b      	sxth	r3, r3
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdee 	bl	8000578 <__aeabi_f2d>
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <MPU9250_Update7DOF+0x270>)
 80029a2:	f7fd ff6b 	bl	800087c <__aeabi_ddiv>
 80029a6:	4603      	mov	r3, r0
 80029a8:	460c      	mov	r4, r1
 80029aa:	4625      	mov	r5, r4
 80029ac:	461c      	mov	r4, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	3308      	adds	r3, #8
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fddc 	bl	8000578 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4620      	mov	r0, r4
 80029c6:	4629      	mov	r1, r5
 80029c8:	f7fd fc76 	bl	80002b8 <__aeabi_dsub>
 80029cc:	4603      	mov	r3, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	4618      	mov	r0, r3
 80029d2:	4621      	mov	r1, r4
 80029d4:	f7fe f900 	bl	8000bd8 <__aeabi_d2f>
 80029d8:	4601      	mov	r1, r0
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	6019      	str	r1, [r3, #0]
        MPU9250_DATA->gyro[i] = ((int16_t)MPU9250_DATA->gyro_raw[i] * MPU9250_CONFIG->GRES)/32768.0 - MPU9250_CONFIG->GYRO_OFFSET[i];
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6a3a      	ldr	r2, [r7, #32]
 80029e8:	3210      	adds	r2, #16
 80029ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	ee17 0a90 	vmov	r0, s15
 8002a06:	f7fd fdb7 	bl	8000578 <__aeabi_f2d>
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <MPU9250_Update7DOF+0x270>)
 8002a10:	f7fd ff34 	bl	800087c <__aeabi_ddiv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	460c      	mov	r4, r1
 8002a18:	4625      	mov	r5, r4
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	330a      	adds	r3, #10
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fda4 	bl	8000578 <__aeabi_f2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fc3e 	bl	80002b8 <__aeabi_dsub>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	4618      	mov	r0, r3
 8002a42:	4621      	mov	r1, r4
 8002a44:	f7fe f8c8 	bl	8000bd8 <__aeabi_d2f>
 8002a48:	4601      	mov	r1, r0
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	6019      	str	r1, [r3, #0]
    for(int i=0;i<3;i++){
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f77f af4f 	ble.w	8002904 <MPU9250_Update7DOF+0x9c>
    }
    MPU9250_DATA->temperature_raw = ((uint16_t)cmdbuf[7] << 8) | cmdbuf[8];
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	7d3b      	ldrb	r3, [r7, #20]
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    MPU9250_DATA->temperature = (MPU9250_DATA->temperature_raw/333.87) + 21.0;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd66 	bl	8000554 <__aeabi_i2d>
 8002a88:	a311      	add	r3, pc, #68	; (adr r3, 8002ad0 <MPU9250_Update7DOF+0x268>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fef5 	bl	800087c <__aeabi_ddiv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	4618      	mov	r0, r3
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MPU9250_Update7DOF+0x274>)
 8002aa0:	f7fd fc0c 	bl	80002bc <__adddf3>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	f7fe f894 	bl	8000bd8 <__aeabi_d2f>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (res != HAL_OK) {
 8002ab6:	7fbb      	ldrb	r3, [r7, #30]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MPU9250_Update7DOF+0x258>
        return MPU9250_RESULT_FAIL;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <MPU9250_Update7DOF+0x25a>
    }

    return MPU9250_RESULT_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
 8002ad0:	851eb852 	.word	0x851eb852
 8002ad4:	4074ddeb 	.word	0x4074ddeb
 8002ad8:	40e00000 	.word	0x40e00000
 8002adc:	40350000 	.word	0x40350000

08002ae0 <MPU9250_Calibrate>:
    }

    return MPU9250_RESULT_OK;
}

MPU9250_Result_t MPU9250_Calibrate(MPU9250_CONFIG_t *MPU9250_CONFIG){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b09a      	sub	sp, #104	; 0x68
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    MPU9250_DATA_t MPU9250_TEMP;
    float ax_sum=0,ay_sum=0,az_sum=0;
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	667b      	str	r3, [r7, #100]	; 0x64
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	65fb      	str	r3, [r7, #92]	; 0x5c
    float gx_sum=0,gy_sum=0,gz_sum=0;
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	657b      	str	r3, [r7, #84]	; 0x54
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	653b      	str	r3, [r7, #80]	; 0x50

    /* MPU9250_Accel_Gyro_Calibration---------------------------------------------------------*/
    for (uint8_t i = 0; i < 3; ++i) {
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002b12:	e018      	b.n	8002b46 <MPU9250_Calibrate+0x66>
        MPU9250_TEMP.accel_raw[i] = 0;
 8002b14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b18:	3304      	adds	r3, #4
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002b20:	4413      	add	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	f823 2c5c 	strh.w	r2, [r3, #-92]
        MPU9250_TEMP.accel[i] = 0;
 8002b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002b32:	4413      	add	r3, r2
 8002b34:	3b60      	subs	r3, #96	; 0x60
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i) {
 8002b3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b40:	3301      	adds	r3, #1
 8002b42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002b46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d9e2      	bls.n	8002b14 <MPU9250_Calibrate+0x34>
    }

    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b54:	e03e      	b.n	8002bd4 <MPU9250_Calibrate+0xf4>
        MPU9250_Update7DOF(MPU9250_CONFIG,&MPU9250_TEMP);
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fe83 	bl	8002868 <MPU9250_Update7DOF>
        ax_sum += MPU9250_TEMP.accel[0];
 8002b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b66:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        ay_sum += MPU9250_TEMP.accel[1];
 8002b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b76:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        az_sum += MPU9250_TEMP.accel[2] - 1;
 8002b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b8e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b96:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        gx_sum += MPU9250_TEMP.gyro[0];
 8002b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        gy_sum += MPU9250_TEMP.gyro[1];
 8002baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        gz_sum += MPU9250_TEMP.gyro[2];
 8002bba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bbe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    for(uint16_t i=0;i<CALIBRATE_TIMES;i++){//Take samples by the number of CALIBRATE_TIME
 8002bca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bdc:	d3bb      	bcc.n	8002b56 <MPU9250_Calibrate+0x76>
    }
    MPU9250_CONFIG->ACCEL_OFFSET[0] = ax_sum/CALIBRATE_TIMES;
 8002bde:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002be2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	edc3 7a08 	vstr	s15, [r3, #32]
    MPU9250_CONFIG->ACCEL_OFFSET[1] = ay_sum/CALIBRATE_TIMES;
 8002bf0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002bf4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    MPU9250_CONFIG->ACCEL_OFFSET[2] = az_sum/CALIBRATE_TIMES;
 8002c02:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002c06:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    MPU9250_CONFIG->GYRO_OFFSET[0] = gx_sum/CALIBRATE_TIMES;
 8002c14:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002c18:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    MPU9250_CONFIG->GYRO_OFFSET[1] = gy_sum/CALIBRATE_TIMES;
 8002c26:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002c2a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    MPU9250_CONFIG->GYRO_OFFSET[2] = gz_sum/CALIBRATE_TIMES;
 8002c38:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c3c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002c54 <MPU9250_Calibrate+0x174>
 8002c40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    return MPU9250_RESULT_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3768      	adds	r7, #104	; 0x68
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	447a0000 	.word	0x447a0000

08002c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a0f      	ldr	r2, [pc, #60]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c96:	2007      	movs	r0, #7
 8002c98:	f000 fb6e 	bl	8003378 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_SPI_MspInit+0xe0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d15a      	bne.n	8002d80 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_SPI_MspInit+0xe4>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4815      	ldr	r0, [pc, #84]	; (8002d90 <HAL_SPI_MspInit+0xe8>)
 8002d3a:	f000 fb5f 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d4e:	2305      	movs	r3, #5
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <HAL_SPI_MspInit+0xe8>)
 8002d5a:	f000 fb4f 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d70:	2305      	movs	r3, #5
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4806      	ldr	r0, [pc, #24]	; (8002d94 <HAL_SPI_MspInit+0xec>)
 8002d7c:	f000 fb3e 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40003800 	.word	0x40003800
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020400 	.word	0x40020400

08002d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0e      	ldr	r2, [pc, #56]	; (8002de0 <HAL_TIM_Base_MspInit+0x48>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d115      	bne.n	8002dd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_TIM_Base_MspInit+0x4c>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <HAL_TIM_Base_MspInit+0x4c>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_TIM_Base_MspInit+0x4c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2036      	movs	r0, #54	; 0x36
 8002dcc:	f000 fadf 	bl	800338e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dd0:	2036      	movs	r0, #54	; 0x36
 8002dd2:	f000 faf8 	bl	80033c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40001000 	.word	0x40001000
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12b      	bne.n	8002e62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_UART_MspInit+0x88>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e42:	230c      	movs	r3, #12
 8002e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e52:	2307      	movs	r3, #7
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <HAL_UART_MspInit+0x8c>)
 8002e5e:	f000 facd 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e62:	bf00      	nop
 8002e64:	3728      	adds	r7, #40	; 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020000 	.word	0x40020000

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f000 f942 	bl	8003154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <TIM6_DAC_IRQHandler+0x10>)
 8002eda:	f001 fc50 	bl	800477e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200000f8 	.word	0x200000f8

08002ee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e00a      	b.n	8002f10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002efa:	f3af 8000 	nop.w
 8002efe:	4601      	mov	r1, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60ba      	str	r2, [r7, #8]
 8002f06:	b2ca      	uxtb	r2, r1
 8002f08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbf0      	blt.n	8002efa <_read+0x12>
	}

return len;
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e009      	b.n	8002f48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe feb5 	bl	8001cac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dbf1      	blt.n	8002f34 <_write+0x12>
	}
	return len;
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_close>:

int _close(int file)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
	return -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f82:	605a      	str	r2, [r3, #4]
	return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_isatty>:

int _isatty(int file)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
	return 1;
 8002f9a:	2301      	movs	r3, #1
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <_sbrk+0x5c>)
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <_sbrk+0x60>)
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <_sbrk+0x64>)
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <_sbrk+0x68>)
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <_sbrk+0x64>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d207      	bcs.n	8003004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff4:	f002 fad0 	bl	8005598 <__errno>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003002:	e009      	b.n	8003018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <_sbrk+0x64>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <_sbrk+0x64>)
 8003014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20020000 	.word	0x20020000
 8003024:	00000400 	.word	0x00000400
 8003028:	20000094 	.word	0x20000094
 800302c:	20000180 	.word	0x20000180

08003030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <SystemInit+0x28>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <SystemInit+0x28>)
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <SystemInit+0x28>)
 8003046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800304a:	609a      	str	r2, [r3, #8]
#endif
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800305c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003062:	e003      	b.n	800306c <LoopCopyDataInit>

08003064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800306a:	3104      	adds	r1, #4

0800306c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800306c:	480b      	ldr	r0, [pc, #44]	; (800309c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003074:	d3f6      	bcc.n	8003064 <CopyDataInit>
  ldr  r2, =_sbss
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003078:	e002      	b.n	8003080 <LoopFillZerobss>

0800307a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800307a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800307c:	f842 3b04 	str.w	r3, [r2], #4

08003080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003084:	d3f9      	bcc.n	800307a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003086:	f7ff ffd3 	bl	8003030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308a:	f002 fa8b 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308e:	f7fe fbd1 	bl	8001834 <main>
  bx  lr    
 8003092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003094:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003098:	08007048 	.word	0x08007048
  ldr  r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030a0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80030a4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80030a8:	20000180 	.word	0x20000180

080030ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_Init+0x40>)
 80030ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_Init+0x40>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_Init+0x40>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d8:	2003      	movs	r0, #3
 80030da:	f000 f94d 	bl	8003378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030de:	2000      	movs	r0, #0
 80030e0:	f000 f808 	bl	80030f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e4:	f7ff fdb8 	bl	8002c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_InitTick+0x54>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_InitTick+0x58>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f965 	bl	80033e2 <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e00e      	b.n	8003140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d80a      	bhi.n	800313e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003128:	2200      	movs	r2, #0
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003130:	f000 f92d 	bl	800338e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <HAL_InitTick+0x5c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000000 	.word	0x20000000
 800314c:	20000008 	.word	0x20000008
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_IncTick+0x20>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_IncTick+0x24>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <HAL_IncTick+0x24>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000008 	.word	0x20000008
 8003178:	20000178 	.word	0x20000178

0800317c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return uwTick;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_GetTick+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000178 	.word	0x20000178

08003194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff ffee 	bl	800317c <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ac:	d005      	beq.n	80031ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_Delay+0x40>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ba:	bf00      	nop
 80031bc:	f7ff ffde 	bl	800317c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d8f7      	bhi.n	80031bc <HAL_Delay+0x28>
  {
  }
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000008 	.word	0x20000008

080031d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <__NVIC_SetPriorityGrouping+0x44>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f4:	4013      	ands	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320a:	4a04      	ldr	r2, [pc, #16]	; (800321c <__NVIC_SetPriorityGrouping+0x44>)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	60d3      	str	r3, [r2, #12]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <__NVIC_GetPriorityGrouping+0x18>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 0307 	and.w	r3, r3, #7
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	db0b      	blt.n	8003266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4907      	ldr	r1, [pc, #28]	; (8003274 <__NVIC_EnableIRQ+0x38>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2001      	movs	r0, #1
 800325e:	fa00 f202 	lsl.w	r2, r0, r2
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000e100 	.word	0xe000e100

08003278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db0a      	blt.n	80032a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	490c      	ldr	r1, [pc, #48]	; (80032c4 <__NVIC_SetPriority+0x4c>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	440b      	add	r3, r1
 800329c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a0:	e00a      	b.n	80032b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4908      	ldr	r1, [pc, #32]	; (80032c8 <__NVIC_SetPriority+0x50>)
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	3b04      	subs	r3, #4
 80032b0:	0112      	lsls	r2, r2, #4
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	440b      	add	r3, r1
 80032b6:	761a      	strb	r2, [r3, #24]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f1c3 0307 	rsb	r3, r3, #7
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	bf28      	it	cs
 80032ea:	2304      	movcs	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2b06      	cmp	r3, #6
 80032f4:	d902      	bls.n	80032fc <NVIC_EncodePriority+0x30>
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3b03      	subs	r3, #3
 80032fa:	e000      	b.n	80032fe <NVIC_EncodePriority+0x32>
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	401a      	ands	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	43d9      	mvns	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	4313      	orrs	r3, r2
         );
}
 8003326:	4618      	mov	r0, r3
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003344:	d301      	bcc.n	800334a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003346:	2301      	movs	r3, #1
 8003348:	e00f      	b.n	800336a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <SysTick_Config+0x40>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003352:	210f      	movs	r1, #15
 8003354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003358:	f7ff ff8e 	bl	8003278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <SysTick_Config+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <SysTick_Config+0x40>)
 8003364:	2207      	movs	r2, #7
 8003366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff29 	bl	80031d8 <__NVIC_SetPriorityGrouping>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a0:	f7ff ff3e 	bl	8003220 <__NVIC_GetPriorityGrouping>
 80033a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f7ff ff8e 	bl	80032cc <NVIC_EncodePriority>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff5d 	bl	8003278 <__NVIC_SetPriority>
}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff31 	bl	800323c <__NVIC_EnableIRQ>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ffa2 	bl	8003334 <SysTick_Config>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e165      	b.n	80036e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 8154 	bne.w	80036de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d00b      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800344a:	2b11      	cmp	r3, #17
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b12      	cmp	r3, #18
 8003454:	d130      	bne.n	80034b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2203      	movs	r2, #3
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 0201 	and.w	r2, r3, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	2203      	movs	r2, #3
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0xfc>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b12      	cmp	r3, #18
 80034f6:	d123      	bne.n	8003540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	08da      	lsrs	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80ae 	beq.w	80036de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b5c      	ldr	r3, [pc, #368]	; (80036f8 <HAL_GPIO_Init+0x2fc>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_GPIO_Init+0x2fc>)
 800358c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003590:	6453      	str	r3, [r2, #68]	; 0x44
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_GPIO_Init+0x2fc>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359e:	4a57      	ldr	r2, [pc, #348]	; (80036fc <HAL_GPIO_Init+0x300>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_GPIO_Init+0x304>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d025      	beq.n	8003616 <HAL_GPIO_Init+0x21a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4d      	ldr	r2, [pc, #308]	; (8003704 <HAL_GPIO_Init+0x308>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01f      	beq.n	8003612 <HAL_GPIO_Init+0x216>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <HAL_GPIO_Init+0x30c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d019      	beq.n	800360e <HAL_GPIO_Init+0x212>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_GPIO_Init+0x310>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_GPIO_Init+0x20e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <HAL_GPIO_Init+0x314>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_GPIO_Init+0x20a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a49      	ldr	r2, [pc, #292]	; (8003714 <HAL_GPIO_Init+0x318>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d007      	beq.n	8003602 <HAL_GPIO_Init+0x206>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a48      	ldr	r2, [pc, #288]	; (8003718 <HAL_GPIO_Init+0x31c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_Init+0x202>
 80035fa:	2306      	movs	r3, #6
 80035fc:	e00c      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 80035fe:	2307      	movs	r3, #7
 8003600:	e00a      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 8003602:	2305      	movs	r3, #5
 8003604:	e008      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 8003606:	2304      	movs	r3, #4
 8003608:	e006      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 800360a:	2303      	movs	r3, #3
 800360c:	e004      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 800360e:	2302      	movs	r3, #2
 8003610:	e002      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_GPIO_Init+0x21c>
 8003616:	2300      	movs	r3, #0
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f002 0203 	and.w	r2, r2, #3
 800361e:	0092      	lsls	r2, r2, #2
 8003620:	4093      	lsls	r3, r2
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003628:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_GPIO_Init+0x300>)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3302      	adds	r3, #2
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_GPIO_Init+0x320>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800365a:	4a30      	ldr	r2, [pc, #192]	; (800371c <HAL_GPIO_Init+0x320>)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_GPIO_Init+0x320>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_GPIO_Init+0x320>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_GPIO_Init+0x320>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_GPIO_Init+0x320>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_GPIO_Init+0x320>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d8:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_GPIO_Init+0x320>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3301      	adds	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	f67f ae96 	bls.w	8003418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ec:	bf00      	nop
 80036ee:	3724      	adds	r7, #36	; 0x24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40013800 	.word	0x40013800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40021000 	.word	0x40021000
 8003714:	40021400 	.word	0x40021400
 8003718:	40021800 	.word	0x40021800
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0cc      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b68      	ldr	r3, [pc, #416]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d90c      	bls.n	8003790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b63      	ldr	r3, [pc, #396]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0b8      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d020      	beq.n	80037de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a8:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a58      	ldr	r2, [pc, #352]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c0:	4b53      	ldr	r3, [pc, #332]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a52      	ldr	r2, [pc, #328]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	494d      	ldr	r1, [pc, #308]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d044      	beq.n	8003874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b47      	ldr	r3, [pc, #284]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d119      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d003      	beq.n	8003812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380e:	2b03      	cmp	r3, #3
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b3b      	ldr	r3, [pc, #236]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e067      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003832:	4b37      	ldr	r3, [pc, #220]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 0203 	bic.w	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4934      	ldr	r1, [pc, #208]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003844:	f7ff fc9a 	bl	800317c <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	e00a      	b.n	8003862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384c:	f7ff fc96 	bl	800317c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e04f      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 020c 	and.w	r2, r3, #12
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	429a      	cmp	r2, r3
 8003872:	d1eb      	bne.n	800384c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d20c      	bcs.n	800389c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e032      	b.n	8003902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4916      	ldr	r1, [pc, #88]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	490e      	ldr	r1, [pc, #56]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038da:	f000 f855 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 80038de:	4601      	mov	r1, r0
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	fa21 f303 	lsr.w	r3, r1, r3
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fbfa 	bl	80030f4 <HAL_InitTick>

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00
 8003910:	40023800 	.word	0x40023800
 8003914:	08006f44 	.word	0x08006f44
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08006f54 	.word	0x08006f54

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003964:	f7ff ffdc 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003968:	4601      	mov	r1, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0b5b      	lsrs	r3, r3, #13
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	08006f54 	.word	0x08006f54

08003988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a2:	4bc6      	ldr	r3, [pc, #792]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	f200 817e 	bhi.w	8003cac <HAL_RCC_GetSysClockFreq+0x324>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003cad 	.word	0x08003cad
 80039c0:	08003cad 	.word	0x08003cad
 80039c4:	08003cad 	.word	0x08003cad
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003cad 	.word	0x08003cad
 80039d0:	08003cad 	.word	0x08003cad
 80039d4:	08003cad 	.word	0x08003cad
 80039d8:	080039f9 	.word	0x080039f9
 80039dc:	08003cad 	.word	0x08003cad
 80039e0:	08003cad 	.word	0x08003cad
 80039e4:	08003cad 	.word	0x08003cad
 80039e8:	08003b55 	.word	0x08003b55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4bb4      	ldr	r3, [pc, #720]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x338>)
 80039ee:	613b      	str	r3, [r7, #16]
       break;
 80039f0:	e15f      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4bb4      	ldr	r3, [pc, #720]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80039f4:	613b      	str	r3, [r7, #16]
      break;
 80039f6:	e15c      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4bb0      	ldr	r3, [pc, #704]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a00:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	4bae      	ldr	r3, [pc, #696]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4bab      	ldr	r3, [pc, #684]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	f04f 0400 	mov.w	r4, #0
 8003a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea03 0501 	and.w	r5, r3, r1
 8003a24:	ea04 0602 	and.w	r6, r4, r2
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4632      	mov	r2, r6
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	0154      	lsls	r4, r2, #5
 8003a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a3a:	014b      	lsls	r3, r1, #5
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4622      	mov	r2, r4
 8003a40:	1b49      	subs	r1, r1, r5
 8003a42:	eb62 0206 	sbc.w	r2, r2, r6
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	0194      	lsls	r4, r2, #6
 8003a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a54:	018b      	lsls	r3, r1, #6
 8003a56:	1a5b      	subs	r3, r3, r1
 8003a58:	eb64 0402 	sbc.w	r4, r4, r2
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	00e2      	lsls	r2, r4, #3
 8003a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a6a:	00d9      	lsls	r1, r3, #3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4614      	mov	r4, r2
 8003a70:	195b      	adds	r3, r3, r5
 8003a72:	eb44 0406 	adc.w	r4, r4, r6
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	0262      	lsls	r2, r4, #9
 8003a80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a84:	0259      	lsls	r1, r3, #9
 8003a86:	460b      	mov	r3, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	f7fd f8ee 	bl	8000c78 <__aeabi_uldivmod>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e049      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b85      	ldr	r3, [pc, #532]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	ea03 0501 	and.w	r5, r3, r1
 8003aba:	ea04 0602 	and.w	r6, r4, r2
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	0154      	lsls	r4, r2, #5
 8003acc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ad0:	014b      	lsls	r3, r1, #5
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	1b49      	subs	r1, r1, r5
 8003ad8:	eb62 0206 	sbc.w	r2, r2, r6
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	f04f 0400 	mov.w	r4, #0
 8003ae4:	0194      	lsls	r4, r2, #6
 8003ae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	1a5b      	subs	r3, r3, r1
 8003aee:	eb64 0402 	sbc.w	r4, r4, r2
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	00e2      	lsls	r2, r4, #3
 8003afc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b00:	00d9      	lsls	r1, r3, #3
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	195b      	adds	r3, r3, r5
 8003b08:	eb44 0406 	adc.w	r4, r4, r6
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	02a2      	lsls	r2, r4, #10
 8003b16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b1a:	0299      	lsls	r1, r3, #10
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	4621      	mov	r1, r4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	f7fd f8a3 	bl	8000c78 <__aeabi_uldivmod>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b60      	ldr	r3, [pc, #384]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	613b      	str	r3, [r7, #16]
      break;
 8003b52:	e0ae      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b5c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b5e:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d04a      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	ea03 0501 	and.w	r5, r3, r1
 8003b80:	ea04 0602 	and.w	r6, r4, r2
 8003b84:	4629      	mov	r1, r5
 8003b86:	4632      	mov	r2, r6
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	f04f 0400 	mov.w	r4, #0
 8003b90:	0154      	lsls	r4, r2, #5
 8003b92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b96:	014b      	lsls	r3, r1, #5
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	1b49      	subs	r1, r1, r5
 8003b9e:	eb62 0206 	sbc.w	r2, r2, r6
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	f04f 0400 	mov.w	r4, #0
 8003baa:	0194      	lsls	r4, r2, #6
 8003bac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bb0:	018b      	lsls	r3, r1, #6
 8003bb2:	1a5b      	subs	r3, r3, r1
 8003bb4:	eb64 0402 	sbc.w	r4, r4, r2
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	00e2      	lsls	r2, r4, #3
 8003bc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bc6:	00d9      	lsls	r1, r3, #3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4614      	mov	r4, r2
 8003bcc:	195b      	adds	r3, r3, r5
 8003bce:	eb44 0406 	adc.w	r4, r4, r6
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	0262      	lsls	r2, r4, #9
 8003bdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003be0:	0259      	lsls	r1, r3, #9
 8003be2:	460b      	mov	r3, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	4621      	mov	r1, r4
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f04f 0400 	mov.w	r4, #0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	f7fd f840 	bl	8000c78 <__aeabi_uldivmod>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e049      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	f04f 0400 	mov.w	r4, #0
 8003c0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	ea03 0501 	and.w	r5, r3, r1
 8003c16:	ea04 0602 	and.w	r6, r4, r2
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	0154      	lsls	r4, r2, #5
 8003c28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c2c:	014b      	lsls	r3, r1, #5
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4622      	mov	r2, r4
 8003c32:	1b49      	subs	r1, r1, r5
 8003c34:	eb62 0206 	sbc.w	r2, r2, r6
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	f04f 0400 	mov.w	r4, #0
 8003c40:	0194      	lsls	r4, r2, #6
 8003c42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	1a5b      	subs	r3, r3, r1
 8003c4a:	eb64 0402 	sbc.w	r4, r4, r2
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c5c:	00d9      	lsls	r1, r3, #3
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	195b      	adds	r3, r3, r5
 8003c64:	eb44 0406 	adc.w	r4, r4, r6
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	02a2      	lsls	r2, r4, #10
 8003c72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c76:	0299      	lsls	r1, r3, #10
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	4621      	mov	r1, r4
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f04f 0400 	mov.w	r4, #0
 8003c86:	461a      	mov	r2, r3
 8003c88:	4623      	mov	r3, r4
 8003c8a:	f7fc fff5 	bl	8000c78 <__aeabi_uldivmod>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	460c      	mov	r4, r1
 8003c92:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x334>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0f1b      	lsrs	r3, r3, #28
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x338>)
 8003cae:	613b      	str	r3, [r7, #16]
      break;
 8003cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb2:	693b      	ldr	r3, [r7, #16]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8083 	beq.w	8003de8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ce2:	4b95      	ldr	r3, [pc, #596]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d019      	beq.n	8003d22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cee:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cfa:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d00c      	beq.n	8003d22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d08:	4b8b      	ldr	r3, [pc, #556]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d112      	bne.n	8003d3a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d14:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d20:	d10b      	bne.n	8003d3a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d05b      	beq.n	8003de6 <HAL_RCC_OscConfig+0x11e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d157      	bne.n	8003de6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e216      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x8a>
 8003d44:	4b7c      	ldr	r3, [pc, #496]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e01d      	b.n	8003d8e <HAL_RCC_OscConfig+0xc6>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0xae>
 8003d5c:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a75      	ldr	r2, [pc, #468]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b73      	ldr	r3, [pc, #460]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a72      	ldr	r2, [pc, #456]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e00b      	b.n	8003d8e <HAL_RCC_OscConfig+0xc6>
 8003d76:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6f      	ldr	r2, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6c      	ldr	r2, [pc, #432]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7ff f9f1 	bl	800317c <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9e:	f7ff f9ed 	bl	800317c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b64      	cmp	r3, #100	; 0x64
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1db      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0xd6>
 8003dbc:	e014      	b.n	8003de8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7ff f9dd 	bl	800317c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc6:	f7ff f9d9 	bl	800317c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1c7      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xfe>
 8003de4:	e000      	b.n	8003de8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d06f      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003df4:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e00:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e0c:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e18:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d11c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e24:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e30:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_OscConfig+0x180>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e18f      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4938      	ldr	r1, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5c:	e03a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e66:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCC_OscConfig+0x274>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7ff f986 	bl	800317c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7ff f982 	bl	800317c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e170      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4925      	ldr	r1, [pc, #148]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]
 8003ea6:	e015      	b.n	8003ed4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea8:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_RCC_OscConfig+0x274>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7ff f965 	bl	800317c <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7ff f961 	bl	800317c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e14f      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d037      	beq.n	8003f50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d016      	beq.n	8003f16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x278>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7ff f945 	bl	800317c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7ff f941 	bl	800317c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e12f      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_OscConfig+0x278>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7ff f92e 	bl	800317c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f24:	f7ff f92a 	bl	800317c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d908      	bls.n	8003f44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e118      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	42470000 	.word	0x42470000
 8003f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b8a      	ldr	r3, [pc, #552]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e9      	bne.n	8003f24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8097 	beq.w	800408c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b83      	ldr	r3, [pc, #524]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b7f      	ldr	r3, [pc, #508]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a7e      	ldr	r2, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b7c      	ldr	r3, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	4b79      	ldr	r3, [pc, #484]	; (8004174 <HAL_RCC_OscConfig+0x4ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d118      	bne.n	8003fcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a75      	ldr	r2, [pc, #468]	; (8004174 <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa6:	f7ff f8e9 	bl	800317c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7ff f8e5 	bl	800317c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0d3      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <HAL_RCC_OscConfig+0x4ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d106      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x31a>
 8003fd4:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	e01c      	b.n	800401c <HAL_RCC_OscConfig+0x354>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x33c>
 8003fea:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a60      	ldr	r2, [pc, #384]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	4b5e      	ldr	r3, [pc, #376]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a5d      	ldr	r2, [pc, #372]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0x354>
 8004004:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a59      	ldr	r2, [pc, #356]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b57      	ldr	r3, [pc, #348]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7ff f8aa 	bl	800317c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	e00a      	b.n	8004042 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7ff f8a6 	bl	800317c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e092      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ee      	beq.n	800402c <HAL_RCC_OscConfig+0x364>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7ff f894 	bl	800317c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004056:	e00a      	b.n	800406e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7ff f890 	bl	800317c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e07c      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ee      	bne.n	8004058 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004080:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d068      	beq.n	8004166 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004094:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d060      	beq.n	8004162 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d145      	bne.n	8004134 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b33      	ldr	r3, [pc, #204]	; (8004178 <HAL_RCC_OscConfig+0x4b0>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7ff f865 	bl	800317c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7ff f861 	bl	800317c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e04f      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c8:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	019b      	lsls	r3, r3, #6
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	071b      	lsls	r3, r3, #28
 8004100:	491b      	ldr	r1, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_RCC_OscConfig+0x4b0>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff f836 	bl	800317c <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7ff f832 	bl	800317c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e020      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x44c>
 8004132:	e018      	b.n	8004166 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCC_OscConfig+0x4b0>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7ff f81f 	bl	800317c <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004142:	f7ff f81b 	bl	800317c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e009      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_OscConfig+0x4a8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x47a>
 8004160:	e001      	b.n	8004166 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	40007000 	.word	0x40007000
 8004178:	42470060 	.word	0x42470060

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e056      	b.n	800423c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fe fd7d 	bl	8002ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	ea42 0103 	orr.w	r1, r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	f003 0104 	and.w	r1, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	; 0x30
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004252:	2301      	movs	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_SPI_TransmitReceive+0x26>
 8004266:	2302      	movs	r3, #2
 8004268:	e18a      	b.n	8004580 <HAL_SPI_TransmitReceive+0x33c>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004272:	f7fe ff83 	bl	800317c <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800428c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004290:	2b01      	cmp	r3, #1
 8004292:	d00f      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x70>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429a:	d107      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x68>
 80042a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d003      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042b2:	e15b      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x82>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x82>
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042cc:	e14e      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2205      	movs	r2, #5
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	887a      	ldrh	r2, [r7, #2]
 80042f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	887a      	ldrh	r2, [r7, #2]
 800430a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d007      	beq.n	8004336 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d178      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_SPI_TransmitReceive+0x10a>
 8004348:	8b7b      	ldrh	r3, [r7, #26]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d166      	bne.n	800441c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004372:	e053      	b.n	800441c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d11b      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x176>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x176>
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d113      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	881a      	ldrh	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d119      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x1b8>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d014      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	b292      	uxth	r2, r2
 80043de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043f8:	2301      	movs	r3, #1
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043fc:	f7fe febe 	bl	800317c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004408:	429a      	cmp	r2, r3
 800440a:	d807      	bhi.n	800441c <HAL_SPI_TransmitReceive+0x1d8>
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004412:	d003      	beq.n	800441c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800441a:	e0a7      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1a6      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x130>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1a1      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x130>
 8004430:	e07c      	b.n	800452c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x1fc>
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d16b      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	7812      	ldrb	r2, [r2, #0]
 800444c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004466:	e057      	b.n	8004518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d11c      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x26c>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d017      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x26c>
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d114      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d119      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x2ae>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d014      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ee:	2301      	movs	r3, #1
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044f2:	f7fe fe43 	bl	800317c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fe:	429a      	cmp	r2, r3
 8004500:	d803      	bhi.n	800450a <HAL_SPI_TransmitReceive+0x2c6>
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004508:	d102      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x2cc>
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004516:	e029      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1a2      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x224>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d19d      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f893 	bl	800465c <SPI_EndRxTxTransaction>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004548:	e010      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	e000      	b.n	800456c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800456a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800457c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004580:	4618      	mov	r0, r3
 8004582:	3730      	adds	r7, #48	; 0x30
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004598:	e04c      	b.n	8004634 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a0:	d048      	beq.n	8004634 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045a2:	f7fe fdeb 	bl	800317c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d902      	bls.n	80045b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d13d      	bne.n	8004634 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d0:	d111      	bne.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045da:	d004      	beq.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d107      	bne.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d10f      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e00f      	b.n	8004654 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	429a      	cmp	r2, r3
 8004650:	d1a3      	bne.n	800459a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <SPI_EndRxTxTransaction+0x7c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1b      	ldr	r2, [pc, #108]	; (80046dc <SPI_EndRxTxTransaction+0x80>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	0d5b      	lsrs	r3, r3, #21
 8004674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004678:	fb02 f303 	mul.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d112      	bne.n	80046ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff78 	bl	8004588 <SPI_WaitFlagStateUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e00f      	b.n	80046ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d0f2      	beq.n	80046ae <SPI_EndRxTxTransaction+0x52>
 80046c8:	e000      	b.n	80046cc <SPI_EndRxTxTransaction+0x70>
        break;
 80046ca:	bf00      	nop
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000
 80046dc:	165e9f81 	.word	0x165e9f81

080046e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e01d      	b.n	800472e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fe fb46 	bl	8002d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 f95e 	bl	80049e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d007      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d122      	bne.n	80047da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d11b      	bne.n	80047da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f06f 0202 	mvn.w	r2, #2
 80047aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8ee 	bl	80049a2 <HAL_TIM_IC_CaptureCallback>
 80047c6:	e005      	b.n	80047d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8e0 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8f1 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d122      	bne.n	800482e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d11b      	bne.n	800482e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0204 	mvn.w	r2, #4
 80047fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8c4 	bl	80049a2 <HAL_TIM_IC_CaptureCallback>
 800481a:	e005      	b.n	8004828 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f8b6 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8c7 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d122      	bne.n	8004882 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11b      	bne.n	8004882 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0208 	mvn.w	r2, #8
 8004852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f89a 	bl	80049a2 <HAL_TIM_IC_CaptureCallback>
 800486e:	e005      	b.n	800487c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f88c 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f89d 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d122      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d11b      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0210 	mvn.w	r2, #16
 80048a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2208      	movs	r2, #8
 80048ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f870 	bl	80049a2 <HAL_TIM_IC_CaptureCallback>
 80048c2:	e005      	b.n	80048d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f862 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f873 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0201 	mvn.w	r2, #1
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc ff81 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f97f 	bl	8004c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f838 	bl	80049ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b20      	cmp	r3, #32
 8004966:	d10e      	bne.n	8004986 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0220 	mvn.w	r2, #32
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f949 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d00f      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <TIM_Base_SetConfig+0x118>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3c      	ldr	r2, [pc, #240]	; (8004afc <TIM_Base_SetConfig+0x11c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3b      	ldr	r2, [pc, #236]	; (8004b00 <TIM_Base_SetConfig+0x120>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3a      	ldr	r2, [pc, #232]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02b      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d027      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <TIM_Base_SetConfig+0x118>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d023      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2b      	ldr	r2, [pc, #172]	; (8004afc <TIM_Base_SetConfig+0x11c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01f      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <TIM_Base_SetConfig+0x120>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01b      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d017      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <TIM_Base_SetConfig+0x128>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <TIM_Base_SetConfig+0x12c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00f      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <TIM_Base_SetConfig+0x130>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00b      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <TIM_Base_SetConfig+0x134>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <TIM_Base_SetConfig+0x138>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <TIM_Base_SetConfig+0x13c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d108      	bne.n	8004aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <TIM_Base_SetConfig+0x114>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0xf8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0c      	ldr	r2, [pc, #48]	; (8004b04 <TIM_Base_SetConfig+0x124>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d103      	bne.n	8004ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40010400 	.word	0x40010400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800
 8004b14:	40001800 	.word	0x40001800
 8004b18:	40001c00 	.word	0x40001c00
 8004b1c:	40002000 	.word	0x40002000

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e05a      	b.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d01d      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d10c      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40010400 	.word	0x40010400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40001800 	.word	0x40001800

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e03f      	b.n	8004cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fe f8be 	bl	8002de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	; 0x24
 8004c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f90b 	bl	8004ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b088      	sub	sp, #32
 8004cde:	af02      	add	r7, sp, #8
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	f040 8083 	bne.w	8004e02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x2e>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e07b      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Transmit+0x40>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e074      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d30:	f7fe fa24 	bl	800317c <HAL_GetTick>
 8004d34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d4a:	e042      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d122      	bne.n	8004daa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f84c 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e042      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	e017      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	e013      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f829 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e01f      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	60ba      	str	r2, [r7, #8]
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1b7      	bne.n	8004d4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f810 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e006      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1c:	e02c      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e24:	d028      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e2c:	f7fe f9a6 	bl	800317c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d21d      	bcs.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00f      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d0c3      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ee2:	f023 030c 	bic.w	r3, r3, #12
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	430b      	orrs	r3, r1
 8004eee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0e:	f040 818b 	bne.w	8005228 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4ac1      	ldr	r2, [pc, #772]	; (800521c <UART_SetConfig+0x37c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d005      	beq.n	8004f28 <UART_SetConfig+0x88>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4abf      	ldr	r2, [pc, #764]	; (8005220 <UART_SetConfig+0x380>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f040 80bd 	bne.w	80050a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fd1a 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	461d      	mov	r5, r3
 8004f32:	f04f 0600 	mov.w	r6, #0
 8004f36:	46a8      	mov	r8, r5
 8004f38:	46b1      	mov	r9, r6
 8004f3a:	eb18 0308 	adds.w	r3, r8, r8
 8004f3e:	eb49 0409 	adc.w	r4, r9, r9
 8004f42:	4698      	mov	r8, r3
 8004f44:	46a1      	mov	r9, r4
 8004f46:	eb18 0805 	adds.w	r8, r8, r5
 8004f4a:	eb49 0906 	adc.w	r9, r9, r6
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f62:	4688      	mov	r8, r1
 8004f64:	4691      	mov	r9, r2
 8004f66:	eb18 0005 	adds.w	r0, r8, r5
 8004f6a:	eb49 0106 	adc.w	r1, r9, r6
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	461d      	mov	r5, r3
 8004f74:	f04f 0600 	mov.w	r6, #0
 8004f78:	196b      	adds	r3, r5, r5
 8004f7a:	eb46 0406 	adc.w	r4, r6, r6
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4623      	mov	r3, r4
 8004f82:	f7fb fe79 	bl	8000c78 <__aeabi_uldivmod>
 8004f86:	4603      	mov	r3, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4ba5      	ldr	r3, [pc, #660]	; (8005224 <UART_SetConfig+0x384>)
 8004f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	f04f 0600 	mov.w	r6, #0
 8004fa0:	46a9      	mov	r9, r5
 8004fa2:	46b2      	mov	sl, r6
 8004fa4:	eb19 0309 	adds.w	r3, r9, r9
 8004fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fac:	4699      	mov	r9, r3
 8004fae:	46a2      	mov	sl, r4
 8004fb0:	eb19 0905 	adds.w	r9, r9, r5
 8004fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fcc:	4689      	mov	r9, r1
 8004fce:	4692      	mov	sl, r2
 8004fd0:	eb19 0005 	adds.w	r0, r9, r5
 8004fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	461d      	mov	r5, r3
 8004fde:	f04f 0600 	mov.w	r6, #0
 8004fe2:	196b      	adds	r3, r5, r5
 8004fe4:	eb46 0406 	adc.w	r4, r6, r6
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4623      	mov	r3, r4
 8004fec:	f7fb fe44 	bl	8000c78 <__aeabi_uldivmod>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <UART_SetConfig+0x384>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	; 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	; 0x32
 800500a:	4a86      	ldr	r2, [pc, #536]	; (8005224 <UART_SetConfig+0x384>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005018:	4498      	add	r8, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	461d      	mov	r5, r3
 800501e:	f04f 0600 	mov.w	r6, #0
 8005022:	46a9      	mov	r9, r5
 8005024:	46b2      	mov	sl, r6
 8005026:	eb19 0309 	adds.w	r3, r9, r9
 800502a:	eb4a 040a 	adc.w	r4, sl, sl
 800502e:	4699      	mov	r9, r3
 8005030:	46a2      	mov	sl, r4
 8005032:	eb19 0905 	adds.w	r9, r9, r5
 8005036:	eb4a 0a06 	adc.w	sl, sl, r6
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800504a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800504e:	4689      	mov	r9, r1
 8005050:	4692      	mov	sl, r2
 8005052:	eb19 0005 	adds.w	r0, r9, r5
 8005056:	eb4a 0106 	adc.w	r1, sl, r6
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	461d      	mov	r5, r3
 8005060:	f04f 0600 	mov.w	r6, #0
 8005064:	196b      	adds	r3, r5, r5
 8005066:	eb46 0406 	adc.w	r4, r6, r6
 800506a:	461a      	mov	r2, r3
 800506c:	4623      	mov	r3, r4
 800506e:	f7fb fe03 	bl	8000c78 <__aeabi_uldivmod>
 8005072:	4603      	mov	r3, r0
 8005074:	460c      	mov	r4, r1
 8005076:	461a      	mov	r2, r3
 8005078:	4b6a      	ldr	r3, [pc, #424]	; (8005224 <UART_SetConfig+0x384>)
 800507a:	fba3 1302 	umull	r1, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2164      	movs	r1, #100	; 0x64
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	3332      	adds	r3, #50	; 0x32
 800508c:	4a65      	ldr	r2, [pc, #404]	; (8005224 <UART_SetConfig+0x384>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	f003 0207 	and.w	r2, r3, #7
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4442      	add	r2, r8
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	e26f      	b.n	8005582 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050a2:	f7fe fc49 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80050a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	461d      	mov	r5, r3
 80050ac:	f04f 0600 	mov.w	r6, #0
 80050b0:	46a8      	mov	r8, r5
 80050b2:	46b1      	mov	r9, r6
 80050b4:	eb18 0308 	adds.w	r3, r8, r8
 80050b8:	eb49 0409 	adc.w	r4, r9, r9
 80050bc:	4698      	mov	r8, r3
 80050be:	46a1      	mov	r9, r4
 80050c0:	eb18 0805 	adds.w	r8, r8, r5
 80050c4:	eb49 0906 	adc.w	r9, r9, r6
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050dc:	4688      	mov	r8, r1
 80050de:	4691      	mov	r9, r2
 80050e0:	eb18 0005 	adds.w	r0, r8, r5
 80050e4:	eb49 0106 	adc.w	r1, r9, r6
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	461d      	mov	r5, r3
 80050ee:	f04f 0600 	mov.w	r6, #0
 80050f2:	196b      	adds	r3, r5, r5
 80050f4:	eb46 0406 	adc.w	r4, r6, r6
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	f7fb fdbc 	bl	8000c78 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b47      	ldr	r3, [pc, #284]	; (8005224 <UART_SetConfig+0x384>)
 8005108:	fba3 2302 	umull	r2, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	461d      	mov	r5, r3
 8005116:	f04f 0600 	mov.w	r6, #0
 800511a:	46a9      	mov	r9, r5
 800511c:	46b2      	mov	sl, r6
 800511e:	eb19 0309 	adds.w	r3, r9, r9
 8005122:	eb4a 040a 	adc.w	r4, sl, sl
 8005126:	4699      	mov	r9, r3
 8005128:	46a2      	mov	sl, r4
 800512a:	eb19 0905 	adds.w	r9, r9, r5
 800512e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005146:	4689      	mov	r9, r1
 8005148:	4692      	mov	sl, r2
 800514a:	eb19 0005 	adds.w	r0, r9, r5
 800514e:	eb4a 0106 	adc.w	r1, sl, r6
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	461d      	mov	r5, r3
 8005158:	f04f 0600 	mov.w	r6, #0
 800515c:	196b      	adds	r3, r5, r5
 800515e:	eb46 0406 	adc.w	r4, r6, r6
 8005162:	461a      	mov	r2, r3
 8005164:	4623      	mov	r3, r4
 8005166:	f7fb fd87 	bl	8000c78 <__aeabi_uldivmod>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	461a      	mov	r2, r3
 8005170:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <UART_SetConfig+0x384>)
 8005172:	fba3 1302 	umull	r1, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2164      	movs	r1, #100	; 0x64
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	3332      	adds	r3, #50	; 0x32
 8005184:	4a27      	ldr	r2, [pc, #156]	; (8005224 <UART_SetConfig+0x384>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005192:	4498      	add	r8, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	461d      	mov	r5, r3
 8005198:	f04f 0600 	mov.w	r6, #0
 800519c:	46a9      	mov	r9, r5
 800519e:	46b2      	mov	sl, r6
 80051a0:	eb19 0309 	adds.w	r3, r9, r9
 80051a4:	eb4a 040a 	adc.w	r4, sl, sl
 80051a8:	4699      	mov	r9, r3
 80051aa:	46a2      	mov	sl, r4
 80051ac:	eb19 0905 	adds.w	r9, r9, r5
 80051b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c8:	4689      	mov	r9, r1
 80051ca:	4692      	mov	sl, r2
 80051cc:	eb19 0005 	adds.w	r0, r9, r5
 80051d0:	eb4a 0106 	adc.w	r1, sl, r6
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	461d      	mov	r5, r3
 80051da:	f04f 0600 	mov.w	r6, #0
 80051de:	196b      	adds	r3, r5, r5
 80051e0:	eb46 0406 	adc.w	r4, r6, r6
 80051e4:	461a      	mov	r2, r3
 80051e6:	4623      	mov	r3, r4
 80051e8:	f7fb fd46 	bl	8000c78 <__aeabi_uldivmod>
 80051ec:	4603      	mov	r3, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <UART_SetConfig+0x384>)
 80051f4:	fba3 1302 	umull	r1, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	2164      	movs	r1, #100	; 0x64
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	3332      	adds	r3, #50	; 0x32
 8005206:	4a07      	ldr	r2, [pc, #28]	; (8005224 <UART_SetConfig+0x384>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	f003 0207 	and.w	r2, r3, #7
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4442      	add	r2, r8
 8005218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800521a:	e1b2      	b.n	8005582 <UART_SetConfig+0x6e2>
 800521c:	40011000 	.word	0x40011000
 8005220:	40011400 	.word	0x40011400
 8005224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4ad7      	ldr	r2, [pc, #860]	; (800558c <UART_SetConfig+0x6ec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d005      	beq.n	800523e <UART_SetConfig+0x39e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4ad6      	ldr	r2, [pc, #856]	; (8005590 <UART_SetConfig+0x6f0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	f040 80d1 	bne.w	80053e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800523e:	f7fe fb8f 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8005242:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	469a      	mov	sl, r3
 8005248:	f04f 0b00 	mov.w	fp, #0
 800524c:	46d0      	mov	r8, sl
 800524e:	46d9      	mov	r9, fp
 8005250:	eb18 0308 	adds.w	r3, r8, r8
 8005254:	eb49 0409 	adc.w	r4, r9, r9
 8005258:	4698      	mov	r8, r3
 800525a:	46a1      	mov	r9, r4
 800525c:	eb18 080a 	adds.w	r8, r8, sl
 8005260:	eb49 090b 	adc.w	r9, r9, fp
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005270:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005274:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005278:	4688      	mov	r8, r1
 800527a:	4691      	mov	r9, r2
 800527c:	eb1a 0508 	adds.w	r5, sl, r8
 8005280:	eb4b 0609 	adc.w	r6, fp, r9
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	f04f 0400 	mov.w	r4, #0
 8005296:	0094      	lsls	r4, r2, #2
 8005298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800529c:	008b      	lsls	r3, r1, #2
 800529e:	461a      	mov	r2, r3
 80052a0:	4623      	mov	r3, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	4631      	mov	r1, r6
 80052a6:	f7fb fce7 	bl	8000c78 <__aeabi_uldivmod>
 80052aa:	4603      	mov	r3, r0
 80052ac:	460c      	mov	r4, r1
 80052ae:	461a      	mov	r2, r3
 80052b0:	4bb8      	ldr	r3, [pc, #736]	; (8005594 <UART_SetConfig+0x6f4>)
 80052b2:	fba3 2302 	umull	r2, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	469b      	mov	fp, r3
 80052c0:	f04f 0c00 	mov.w	ip, #0
 80052c4:	46d9      	mov	r9, fp
 80052c6:	46e2      	mov	sl, ip
 80052c8:	eb19 0309 	adds.w	r3, r9, r9
 80052cc:	eb4a 040a 	adc.w	r4, sl, sl
 80052d0:	4699      	mov	r9, r3
 80052d2:	46a2      	mov	sl, r4
 80052d4:	eb19 090b 	adds.w	r9, r9, fp
 80052d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052f0:	4689      	mov	r9, r1
 80052f2:	4692      	mov	sl, r2
 80052f4:	eb1b 0509 	adds.w	r5, fp, r9
 80052f8:	eb4c 060a 	adc.w	r6, ip, sl
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4619      	mov	r1, r3
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f04f 0400 	mov.w	r4, #0
 800530e:	0094      	lsls	r4, r2, #2
 8005310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	461a      	mov	r2, r3
 8005318:	4623      	mov	r3, r4
 800531a:	4628      	mov	r0, r5
 800531c:	4631      	mov	r1, r6
 800531e:	f7fb fcab 	bl	8000c78 <__aeabi_uldivmod>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	461a      	mov	r2, r3
 8005328:	4b9a      	ldr	r3, [pc, #616]	; (8005594 <UART_SetConfig+0x6f4>)
 800532a:	fba3 1302 	umull	r1, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2164      	movs	r1, #100	; 0x64
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	3332      	adds	r3, #50	; 0x32
 800533c:	4a95      	ldr	r2, [pc, #596]	; (8005594 <UART_SetConfig+0x6f4>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005348:	4498      	add	r8, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	469b      	mov	fp, r3
 800534e:	f04f 0c00 	mov.w	ip, #0
 8005352:	46d9      	mov	r9, fp
 8005354:	46e2      	mov	sl, ip
 8005356:	eb19 0309 	adds.w	r3, r9, r9
 800535a:	eb4a 040a 	adc.w	r4, sl, sl
 800535e:	4699      	mov	r9, r3
 8005360:	46a2      	mov	sl, r4
 8005362:	eb19 090b 	adds.w	r9, r9, fp
 8005366:	eb4a 0a0c 	adc.w	sl, sl, ip
 800536a:	f04f 0100 	mov.w	r1, #0
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800537a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800537e:	4689      	mov	r9, r1
 8005380:	4692      	mov	sl, r2
 8005382:	eb1b 0509 	adds.w	r5, fp, r9
 8005386:	eb4c 060a 	adc.w	r6, ip, sl
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4619      	mov	r1, r3
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	0094      	lsls	r4, r2, #2
 800539e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053a2:	008b      	lsls	r3, r1, #2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	4631      	mov	r1, r6
 80053ac:	f7fb fc64 	bl	8000c78 <__aeabi_uldivmod>
 80053b0:	4603      	mov	r3, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b77      	ldr	r3, [pc, #476]	; (8005594 <UART_SetConfig+0x6f4>)
 80053b8:	fba3 1302 	umull	r1, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	2164      	movs	r1, #100	; 0x64
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	3332      	adds	r3, #50	; 0x32
 80053ca:	4a72      	ldr	r2, [pc, #456]	; (8005594 <UART_SetConfig+0x6f4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f003 020f 	and.w	r2, r3, #15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4442      	add	r2, r8
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	e0d0      	b.n	8005582 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80053e0:	f7fe faaa 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80053e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	469a      	mov	sl, r3
 80053ea:	f04f 0b00 	mov.w	fp, #0
 80053ee:	46d0      	mov	r8, sl
 80053f0:	46d9      	mov	r9, fp
 80053f2:	eb18 0308 	adds.w	r3, r8, r8
 80053f6:	eb49 0409 	adc.w	r4, r9, r9
 80053fa:	4698      	mov	r8, r3
 80053fc:	46a1      	mov	r9, r4
 80053fe:	eb18 080a 	adds.w	r8, r8, sl
 8005402:	eb49 090b 	adc.w	r9, r9, fp
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800541a:	4688      	mov	r8, r1
 800541c:	4691      	mov	r9, r2
 800541e:	eb1a 0508 	adds.w	r5, sl, r8
 8005422:	eb4b 0609 	adc.w	r6, fp, r9
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4619      	mov	r1, r3
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	0094      	lsls	r4, r2, #2
 800543a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800543e:	008b      	lsls	r3, r1, #2
 8005440:	461a      	mov	r2, r3
 8005442:	4623      	mov	r3, r4
 8005444:	4628      	mov	r0, r5
 8005446:	4631      	mov	r1, r6
 8005448:	f7fb fc16 	bl	8000c78 <__aeabi_uldivmod>
 800544c:	4603      	mov	r3, r0
 800544e:	460c      	mov	r4, r1
 8005450:	461a      	mov	r2, r3
 8005452:	4b50      	ldr	r3, [pc, #320]	; (8005594 <UART_SetConfig+0x6f4>)
 8005454:	fba3 2302 	umull	r2, r3, r3, r2
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	469b      	mov	fp, r3
 8005462:	f04f 0c00 	mov.w	ip, #0
 8005466:	46d9      	mov	r9, fp
 8005468:	46e2      	mov	sl, ip
 800546a:	eb19 0309 	adds.w	r3, r9, r9
 800546e:	eb4a 040a 	adc.w	r4, sl, sl
 8005472:	4699      	mov	r9, r3
 8005474:	46a2      	mov	sl, r4
 8005476:	eb19 090b 	adds.w	r9, r9, fp
 800547a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800548a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800548e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005492:	4689      	mov	r9, r1
 8005494:	4692      	mov	sl, r2
 8005496:	eb1b 0509 	adds.w	r5, fp, r9
 800549a:	eb4c 060a 	adc.w	r6, ip, sl
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4619      	mov	r1, r3
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	0094      	lsls	r4, r2, #2
 80054b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	461a      	mov	r2, r3
 80054ba:	4623      	mov	r3, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	4631      	mov	r1, r6
 80054c0:	f7fb fbda 	bl	8000c78 <__aeabi_uldivmod>
 80054c4:	4603      	mov	r3, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b32      	ldr	r3, [pc, #200]	; (8005594 <UART_SetConfig+0x6f4>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <UART_SetConfig+0x6f4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ea:	4498      	add	r8, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	469b      	mov	fp, r3
 80054f0:	f04f 0c00 	mov.w	ip, #0
 80054f4:	46d9      	mov	r9, fp
 80054f6:	46e2      	mov	sl, ip
 80054f8:	eb19 0309 	adds.w	r3, r9, r9
 80054fc:	eb4a 040a 	adc.w	r4, sl, sl
 8005500:	4699      	mov	r9, r3
 8005502:	46a2      	mov	sl, r4
 8005504:	eb19 090b 	adds.w	r9, r9, fp
 8005508:	eb4a 0a0c 	adc.w	sl, sl, ip
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800551c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005520:	4689      	mov	r9, r1
 8005522:	4692      	mov	sl, r2
 8005524:	eb1b 0509 	adds.w	r5, fp, r9
 8005528:	eb4c 060a 	adc.w	r6, ip, sl
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4619      	mov	r1, r3
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	f04f 0400 	mov.w	r4, #0
 800553e:	0094      	lsls	r4, r2, #2
 8005540:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005544:	008b      	lsls	r3, r1, #2
 8005546:	461a      	mov	r2, r3
 8005548:	4623      	mov	r3, r4
 800554a:	4628      	mov	r0, r5
 800554c:	4631      	mov	r1, r6
 800554e:	f7fb fb93 	bl	8000c78 <__aeabi_uldivmod>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	461a      	mov	r2, r3
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <UART_SetConfig+0x6f4>)
 800555a:	fba3 1302 	umull	r1, r3, r3, r2
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2164      	movs	r1, #100	; 0x64
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a09      	ldr	r2, [pc, #36]	; (8005594 <UART_SetConfig+0x6f4>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 020f 	and.w	r2, r3, #15
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4442      	add	r2, r8
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	e7ff      	b.n	8005582 <UART_SetConfig+0x6e2>
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558c:	40011000 	.word	0x40011000
 8005590:	40011400 	.word	0x40011400
 8005594:	51eb851f 	.word	0x51eb851f

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2000000c 	.word	0x2000000c

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4e0d      	ldr	r6, [pc, #52]	; (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	; (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1ba4      	subs	r4, r4, r6
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2500      	movs	r5, #0
 80055b0:	42a5      	cmp	r5, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4e0b      	ldr	r6, [pc, #44]	; (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x44>)
 80055b8:	f001 fcb2 	bl	8006f20 <_init>
 80055bc:	1ba4      	subs	r4, r4, r6
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2500      	movs	r5, #0
 80055c2:	42a5      	cmp	r5, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055cc:	4798      	blx	r3
 80055ce:	3501      	adds	r5, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055d6:	4798      	blx	r3
 80055d8:	3501      	adds	r5, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08007040 	.word	0x08007040
 80055e0:	08007040 	.word	0x08007040
 80055e4:	08007040 	.word	0x08007040
 80055e8:	08007044 	.word	0x08007044

080055ec <memset>:
 80055ec:	4402      	add	r2, r0
 80055ee:	4603      	mov	r3, r0
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d100      	bne.n	80055f6 <memset+0xa>
 80055f4:	4770      	bx	lr
 80055f6:	f803 1b01 	strb.w	r1, [r3], #1
 80055fa:	e7f9      	b.n	80055f0 <memset+0x4>

080055fc <iprintf>:
 80055fc:	b40f      	push	{r0, r1, r2, r3}
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <iprintf+0x2c>)
 8005600:	b513      	push	{r0, r1, r4, lr}
 8005602:	681c      	ldr	r4, [r3, #0]
 8005604:	b124      	cbz	r4, 8005610 <iprintf+0x14>
 8005606:	69a3      	ldr	r3, [r4, #24]
 8005608:	b913      	cbnz	r3, 8005610 <iprintf+0x14>
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f84e 	bl	80056ac <__sinit>
 8005610:	ab05      	add	r3, sp, #20
 8005612:	9a04      	ldr	r2, [sp, #16]
 8005614:	68a1      	ldr	r1, [r4, #8]
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	4620      	mov	r0, r4
 800561a:	f000 f955 	bl	80058c8 <_vfiprintf_r>
 800561e:	b002      	add	sp, #8
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	b004      	add	sp, #16
 8005626:	4770      	bx	lr
 8005628:	2000000c 	.word	0x2000000c

0800562c <std>:
 800562c:	2300      	movs	r3, #0
 800562e:	b510      	push	{r4, lr}
 8005630:	4604      	mov	r4, r0
 8005632:	e9c0 3300 	strd	r3, r3, [r0]
 8005636:	6083      	str	r3, [r0, #8]
 8005638:	8181      	strh	r1, [r0, #12]
 800563a:	6643      	str	r3, [r0, #100]	; 0x64
 800563c:	81c2      	strh	r2, [r0, #14]
 800563e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005642:	6183      	str	r3, [r0, #24]
 8005644:	4619      	mov	r1, r3
 8005646:	2208      	movs	r2, #8
 8005648:	305c      	adds	r0, #92	; 0x5c
 800564a:	f7ff ffcf 	bl	80055ec <memset>
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <std+0x38>)
 8005650:	6263      	str	r3, [r4, #36]	; 0x24
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <std+0x3c>)
 8005654:	62a3      	str	r3, [r4, #40]	; 0x28
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <std+0x40>)
 8005658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x44>)
 800565c:	6224      	str	r4, [r4, #32]
 800565e:	6323      	str	r3, [r4, #48]	; 0x30
 8005660:	bd10      	pop	{r4, pc}
 8005662:	bf00      	nop
 8005664:	08005e25 	.word	0x08005e25
 8005668:	08005e47 	.word	0x08005e47
 800566c:	08005e7f 	.word	0x08005e7f
 8005670:	08005ea3 	.word	0x08005ea3

08005674 <_cleanup_r>:
 8005674:	4901      	ldr	r1, [pc, #4]	; (800567c <_cleanup_r+0x8>)
 8005676:	f000 b885 	b.w	8005784 <_fwalk_reent>
 800567a:	bf00      	nop
 800567c:	0800617d 	.word	0x0800617d

08005680 <__sfmoreglue>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	1e4a      	subs	r2, r1, #1
 8005684:	2568      	movs	r5, #104	; 0x68
 8005686:	4355      	muls	r5, r2
 8005688:	460e      	mov	r6, r1
 800568a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800568e:	f000 f897 	bl	80057c0 <_malloc_r>
 8005692:	4604      	mov	r4, r0
 8005694:	b140      	cbz	r0, 80056a8 <__sfmoreglue+0x28>
 8005696:	2100      	movs	r1, #0
 8005698:	e9c0 1600 	strd	r1, r6, [r0]
 800569c:	300c      	adds	r0, #12
 800569e:	60a0      	str	r0, [r4, #8]
 80056a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056a4:	f7ff ffa2 	bl	80055ec <memset>
 80056a8:	4620      	mov	r0, r4
 80056aa:	bd70      	pop	{r4, r5, r6, pc}

080056ac <__sinit>:
 80056ac:	6983      	ldr	r3, [r0, #24]
 80056ae:	b510      	push	{r4, lr}
 80056b0:	4604      	mov	r4, r0
 80056b2:	bb33      	cbnz	r3, 8005702 <__sinit+0x56>
 80056b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80056b8:	6503      	str	r3, [r0, #80]	; 0x50
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <__sinit+0x58>)
 80056bc:	4a12      	ldr	r2, [pc, #72]	; (8005708 <__sinit+0x5c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6282      	str	r2, [r0, #40]	; 0x28
 80056c2:	4298      	cmp	r0, r3
 80056c4:	bf04      	itt	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	6183      	streq	r3, [r0, #24]
 80056ca:	f000 f81f 	bl	800570c <__sfp>
 80056ce:	6060      	str	r0, [r4, #4]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 f81b 	bl	800570c <__sfp>
 80056d6:	60a0      	str	r0, [r4, #8]
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 f817 	bl	800570c <__sfp>
 80056de:	2200      	movs	r2, #0
 80056e0:	60e0      	str	r0, [r4, #12]
 80056e2:	2104      	movs	r1, #4
 80056e4:	6860      	ldr	r0, [r4, #4]
 80056e6:	f7ff ffa1 	bl	800562c <std>
 80056ea:	2201      	movs	r2, #1
 80056ec:	2109      	movs	r1, #9
 80056ee:	68a0      	ldr	r0, [r4, #8]
 80056f0:	f7ff ff9c 	bl	800562c <std>
 80056f4:	2202      	movs	r2, #2
 80056f6:	2112      	movs	r1, #18
 80056f8:	68e0      	ldr	r0, [r4, #12]
 80056fa:	f7ff ff97 	bl	800562c <std>
 80056fe:	2301      	movs	r3, #1
 8005700:	61a3      	str	r3, [r4, #24]
 8005702:	bd10      	pop	{r4, pc}
 8005704:	08006f5c 	.word	0x08006f5c
 8005708:	08005675 	.word	0x08005675

0800570c <__sfp>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <__sfp+0x70>)
 8005710:	681e      	ldr	r6, [r3, #0]
 8005712:	69b3      	ldr	r3, [r6, #24]
 8005714:	4607      	mov	r7, r0
 8005716:	b913      	cbnz	r3, 800571e <__sfp+0x12>
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff ffc7 	bl	80056ac <__sinit>
 800571e:	3648      	adds	r6, #72	; 0x48
 8005720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	d503      	bpl.n	8005730 <__sfp+0x24>
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	b133      	cbz	r3, 800573a <__sfp+0x2e>
 800572c:	6836      	ldr	r6, [r6, #0]
 800572e:	e7f7      	b.n	8005720 <__sfp+0x14>
 8005730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005734:	b16d      	cbz	r5, 8005752 <__sfp+0x46>
 8005736:	3468      	adds	r4, #104	; 0x68
 8005738:	e7f4      	b.n	8005724 <__sfp+0x18>
 800573a:	2104      	movs	r1, #4
 800573c:	4638      	mov	r0, r7
 800573e:	f7ff ff9f 	bl	8005680 <__sfmoreglue>
 8005742:	6030      	str	r0, [r6, #0]
 8005744:	2800      	cmp	r0, #0
 8005746:	d1f1      	bne.n	800572c <__sfp+0x20>
 8005748:	230c      	movs	r3, #12
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4604      	mov	r4, r0
 800574e:	4620      	mov	r0, r4
 8005750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <__sfp+0x74>)
 8005754:	6665      	str	r5, [r4, #100]	; 0x64
 8005756:	e9c4 5500 	strd	r5, r5, [r4]
 800575a:	60a5      	str	r5, [r4, #8]
 800575c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005760:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005764:	2208      	movs	r2, #8
 8005766:	4629      	mov	r1, r5
 8005768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800576c:	f7ff ff3e 	bl	80055ec <memset>
 8005770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005778:	e7e9      	b.n	800574e <__sfp+0x42>
 800577a:	bf00      	nop
 800577c:	08006f5c 	.word	0x08006f5c
 8005780:	ffff0001 	.word	0xffff0001

08005784 <_fwalk_reent>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4680      	mov	r8, r0
 800578a:	4689      	mov	r9, r1
 800578c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005790:	2600      	movs	r6, #0
 8005792:	b914      	cbnz	r4, 800579a <_fwalk_reent+0x16>
 8005794:	4630      	mov	r0, r6
 8005796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800579e:	3f01      	subs	r7, #1
 80057a0:	d501      	bpl.n	80057a6 <_fwalk_reent+0x22>
 80057a2:	6824      	ldr	r4, [r4, #0]
 80057a4:	e7f5      	b.n	8005792 <_fwalk_reent+0xe>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d907      	bls.n	80057bc <_fwalk_reent+0x38>
 80057ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b0:	3301      	adds	r3, #1
 80057b2:	d003      	beq.n	80057bc <_fwalk_reent+0x38>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4640      	mov	r0, r8
 80057b8:	47c8      	blx	r9
 80057ba:	4306      	orrs	r6, r0
 80057bc:	3568      	adds	r5, #104	; 0x68
 80057be:	e7ee      	b.n	800579e <_fwalk_reent+0x1a>

080057c0 <_malloc_r>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	1ccd      	adds	r5, r1, #3
 80057c4:	f025 0503 	bic.w	r5, r5, #3
 80057c8:	3508      	adds	r5, #8
 80057ca:	2d0c      	cmp	r5, #12
 80057cc:	bf38      	it	cc
 80057ce:	250c      	movcc	r5, #12
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	4606      	mov	r6, r0
 80057d4:	db01      	blt.n	80057da <_malloc_r+0x1a>
 80057d6:	42a9      	cmp	r1, r5
 80057d8:	d903      	bls.n	80057e2 <_malloc_r+0x22>
 80057da:	230c      	movs	r3, #12
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	2000      	movs	r0, #0
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	f000 fd6b 	bl	80062bc <__malloc_lock>
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <_malloc_r+0xac>)
 80057e8:	6814      	ldr	r4, [r2, #0]
 80057ea:	4621      	mov	r1, r4
 80057ec:	b991      	cbnz	r1, 8005814 <_malloc_r+0x54>
 80057ee:	4c20      	ldr	r4, [pc, #128]	; (8005870 <_malloc_r+0xb0>)
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	b91b      	cbnz	r3, 80057fc <_malloc_r+0x3c>
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 fb05 	bl	8005e04 <_sbrk_r>
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 fb00 	bl	8005e04 <_sbrk_r>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d124      	bne.n	8005852 <_malloc_r+0x92>
 8005808:	230c      	movs	r3, #12
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	4630      	mov	r0, r6
 800580e:	f000 fd56 	bl	80062be <__malloc_unlock>
 8005812:	e7e4      	b.n	80057de <_malloc_r+0x1e>
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	1b5b      	subs	r3, r3, r5
 8005818:	d418      	bmi.n	800584c <_malloc_r+0x8c>
 800581a:	2b0b      	cmp	r3, #11
 800581c:	d90f      	bls.n	800583e <_malloc_r+0x7e>
 800581e:	600b      	str	r3, [r1, #0]
 8005820:	50cd      	str	r5, [r1, r3]
 8005822:	18cc      	adds	r4, r1, r3
 8005824:	4630      	mov	r0, r6
 8005826:	f000 fd4a 	bl	80062be <__malloc_unlock>
 800582a:	f104 000b 	add.w	r0, r4, #11
 800582e:	1d23      	adds	r3, r4, #4
 8005830:	f020 0007 	bic.w	r0, r0, #7
 8005834:	1ac3      	subs	r3, r0, r3
 8005836:	d0d3      	beq.n	80057e0 <_malloc_r+0x20>
 8005838:	425a      	negs	r2, r3
 800583a:	50e2      	str	r2, [r4, r3]
 800583c:	e7d0      	b.n	80057e0 <_malloc_r+0x20>
 800583e:	428c      	cmp	r4, r1
 8005840:	684b      	ldr	r3, [r1, #4]
 8005842:	bf16      	itet	ne
 8005844:	6063      	strne	r3, [r4, #4]
 8005846:	6013      	streq	r3, [r2, #0]
 8005848:	460c      	movne	r4, r1
 800584a:	e7eb      	b.n	8005824 <_malloc_r+0x64>
 800584c:	460c      	mov	r4, r1
 800584e:	6849      	ldr	r1, [r1, #4]
 8005850:	e7cc      	b.n	80057ec <_malloc_r+0x2c>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d005      	beq.n	8005868 <_malloc_r+0xa8>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4630      	mov	r0, r6
 8005860:	f000 fad0 	bl	8005e04 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d0cf      	beq.n	8005808 <_malloc_r+0x48>
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	e7db      	b.n	8005824 <_malloc_r+0x64>
 800586c:	20000098 	.word	0x20000098
 8005870:	2000009c 	.word	0x2000009c

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	b410      	push	{r4}
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da08      	bge.n	8005892 <__sfputc_r+0x1e>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d103      	bne.n	8005892 <__sfputc_r+0x1e>
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	f000 bb0d 	b.w	8005eac <__swbuf_r>
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	1c58      	adds	r0, r3, #1
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	4608      	mov	r0, r1
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <__sfputs_r>:
 80058a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	18d5      	adds	r5, r2, r3
 80058ac:	42ac      	cmp	r4, r5
 80058ae:	d101      	bne.n	80058b4 <__sfputs_r+0x12>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e007      	b.n	80058c4 <__sfputs_r+0x22>
 80058b4:	463a      	mov	r2, r7
 80058b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffda 	bl	8005874 <__sfputc_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d1f3      	bne.n	80058ac <__sfputs_r+0xa>
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c8 <_vfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460c      	mov	r4, r1
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4617      	mov	r7, r2
 80058d2:	461d      	mov	r5, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_vfiprintf_r+0x18>
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b90b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x18>
 80058dc:	f7ff fee6 	bl	80056ac <__sinit>
 80058e0:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <_vfiprintf_r+0x20c>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d158      	bne.n	8005998 <_vfiprintf_r+0xd0>
 80058e6:	6874      	ldr	r4, [r6, #4]
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	0718      	lsls	r0, r3, #28
 80058ec:	d55e      	bpl.n	80059ac <_vfiprintf_r+0xe4>
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d05b      	beq.n	80059ac <_vfiprintf_r+0xe4>
 80058f4:	2300      	movs	r3, #0
 80058f6:	9309      	str	r3, [sp, #36]	; 0x24
 80058f8:	2320      	movs	r3, #32
 80058fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058fe:	2330      	movs	r3, #48	; 0x30
 8005900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005904:	9503      	str	r5, [sp, #12]
 8005906:	f04f 0b01 	mov.w	fp, #1
 800590a:	46b8      	mov	r8, r7
 800590c:	4645      	mov	r5, r8
 800590e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005912:	b10b      	cbz	r3, 8005918 <_vfiprintf_r+0x50>
 8005914:	2b25      	cmp	r3, #37	; 0x25
 8005916:	d154      	bne.n	80059c2 <_vfiprintf_r+0xfa>
 8005918:	ebb8 0a07 	subs.w	sl, r8, r7
 800591c:	d00b      	beq.n	8005936 <_vfiprintf_r+0x6e>
 800591e:	4653      	mov	r3, sl
 8005920:	463a      	mov	r2, r7
 8005922:	4621      	mov	r1, r4
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff ffbc 	bl	80058a2 <__sfputs_r>
 800592a:	3001      	adds	r0, #1
 800592c:	f000 80c2 	beq.w	8005ab4 <_vfiprintf_r+0x1ec>
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	4453      	add	r3, sl
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
 8005936:	f898 3000 	ldrb.w	r3, [r8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80ba 	beq.w	8005ab4 <_vfiprintf_r+0x1ec>
 8005940:	2300      	movs	r3, #0
 8005942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	9307      	str	r3, [sp, #28]
 800594e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005952:	931a      	str	r3, [sp, #104]	; 0x68
 8005954:	46a8      	mov	r8, r5
 8005956:	2205      	movs	r2, #5
 8005958:	f818 1b01 	ldrb.w	r1, [r8], #1
 800595c:	485e      	ldr	r0, [pc, #376]	; (8005ad8 <_vfiprintf_r+0x210>)
 800595e:	f7fa fc57 	bl	8000210 <memchr>
 8005962:	9b04      	ldr	r3, [sp, #16]
 8005964:	bb78      	cbnz	r0, 80059c6 <_vfiprintf_r+0xfe>
 8005966:	06d9      	lsls	r1, r3, #27
 8005968:	bf44      	itt	mi
 800596a:	2220      	movmi	r2, #32
 800596c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005970:	071a      	lsls	r2, r3, #28
 8005972:	bf44      	itt	mi
 8005974:	222b      	movmi	r2, #43	; 0x2b
 8005976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800597a:	782a      	ldrb	r2, [r5, #0]
 800597c:	2a2a      	cmp	r2, #42	; 0x2a
 800597e:	d02a      	beq.n	80059d6 <_vfiprintf_r+0x10e>
 8005980:	9a07      	ldr	r2, [sp, #28]
 8005982:	46a8      	mov	r8, r5
 8005984:	2000      	movs	r0, #0
 8005986:	250a      	movs	r5, #10
 8005988:	4641      	mov	r1, r8
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d969      	bls.n	8005a68 <_vfiprintf_r+0x1a0>
 8005994:	b360      	cbz	r0, 80059f0 <_vfiprintf_r+0x128>
 8005996:	e024      	b.n	80059e2 <_vfiprintf_r+0x11a>
 8005998:	4b50      	ldr	r3, [pc, #320]	; (8005adc <_vfiprintf_r+0x214>)
 800599a:	429c      	cmp	r4, r3
 800599c:	d101      	bne.n	80059a2 <_vfiprintf_r+0xda>
 800599e:	68b4      	ldr	r4, [r6, #8]
 80059a0:	e7a2      	b.n	80058e8 <_vfiprintf_r+0x20>
 80059a2:	4b4f      	ldr	r3, [pc, #316]	; (8005ae0 <_vfiprintf_r+0x218>)
 80059a4:	429c      	cmp	r4, r3
 80059a6:	bf08      	it	eq
 80059a8:	68f4      	ldreq	r4, [r6, #12]
 80059aa:	e79d      	b.n	80058e8 <_vfiprintf_r+0x20>
 80059ac:	4621      	mov	r1, r4
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 fae0 	bl	8005f74 <__swsetup_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d09d      	beq.n	80058f4 <_vfiprintf_r+0x2c>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	46a8      	mov	r8, r5
 80059c4:	e7a2      	b.n	800590c <_vfiprintf_r+0x44>
 80059c6:	4a44      	ldr	r2, [pc, #272]	; (8005ad8 <_vfiprintf_r+0x210>)
 80059c8:	1a80      	subs	r0, r0, r2
 80059ca:	fa0b f000 	lsl.w	r0, fp, r0
 80059ce:	4318      	orrs	r0, r3
 80059d0:	9004      	str	r0, [sp, #16]
 80059d2:	4645      	mov	r5, r8
 80059d4:	e7be      	b.n	8005954 <_vfiprintf_r+0x8c>
 80059d6:	9a03      	ldr	r2, [sp, #12]
 80059d8:	1d11      	adds	r1, r2, #4
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	9103      	str	r1, [sp, #12]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	db01      	blt.n	80059e6 <_vfiprintf_r+0x11e>
 80059e2:	9207      	str	r2, [sp, #28]
 80059e4:	e004      	b.n	80059f0 <_vfiprintf_r+0x128>
 80059e6:	4252      	negs	r2, r2
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	9207      	str	r2, [sp, #28]
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	f898 3000 	ldrb.w	r3, [r8]
 80059f4:	2b2e      	cmp	r3, #46	; 0x2e
 80059f6:	d10e      	bne.n	8005a16 <_vfiprintf_r+0x14e>
 80059f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80059fc:	2b2a      	cmp	r3, #42	; 0x2a
 80059fe:	d138      	bne.n	8005a72 <_vfiprintf_r+0x1aa>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	9203      	str	r2, [sp, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bfb8      	it	lt
 8005a0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a10:	f108 0802 	add.w	r8, r8, #2
 8005a14:	9305      	str	r3, [sp, #20]
 8005a16:	4d33      	ldr	r5, [pc, #204]	; (8005ae4 <_vfiprintf_r+0x21c>)
 8005a18:	f898 1000 	ldrb.w	r1, [r8]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f7fa fbf6 	bl	8000210 <memchr>
 8005a24:	b140      	cbz	r0, 8005a38 <_vfiprintf_r+0x170>
 8005a26:	2340      	movs	r3, #64	; 0x40
 8005a28:	1b40      	subs	r0, r0, r5
 8005a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a2e:	9b04      	ldr	r3, [sp, #16]
 8005a30:	4303      	orrs	r3, r0
 8005a32:	f108 0801 	add.w	r8, r8, #1
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	f898 1000 	ldrb.w	r1, [r8]
 8005a3c:	482a      	ldr	r0, [pc, #168]	; (8005ae8 <_vfiprintf_r+0x220>)
 8005a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a42:	2206      	movs	r2, #6
 8005a44:	f108 0701 	add.w	r7, r8, #1
 8005a48:	f7fa fbe2 	bl	8000210 <memchr>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d037      	beq.n	8005ac0 <_vfiprintf_r+0x1f8>
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <_vfiprintf_r+0x224>)
 8005a52:	bb1b      	cbnz	r3, 8005a9c <_vfiprintf_r+0x1d4>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	3307      	adds	r3, #7
 8005a58:	f023 0307 	bic.w	r3, r3, #7
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	444b      	add	r3, r9
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	e750      	b.n	800590a <_vfiprintf_r+0x42>
 8005a68:	fb05 3202 	mla	r2, r5, r2, r3
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	4688      	mov	r8, r1
 8005a70:	e78a      	b.n	8005988 <_vfiprintf_r+0xc0>
 8005a72:	2300      	movs	r3, #0
 8005a74:	f108 0801 	add.w	r8, r8, #1
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	250a      	movs	r5, #10
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a84:	3a30      	subs	r2, #48	; 0x30
 8005a86:	2a09      	cmp	r2, #9
 8005a88:	d903      	bls.n	8005a92 <_vfiprintf_r+0x1ca>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c3      	beq.n	8005a16 <_vfiprintf_r+0x14e>
 8005a8e:	9105      	str	r1, [sp, #20]
 8005a90:	e7c1      	b.n	8005a16 <_vfiprintf_r+0x14e>
 8005a92:	fb05 2101 	mla	r1, r5, r1, r2
 8005a96:	2301      	movs	r3, #1
 8005a98:	4680      	mov	r8, r0
 8005a9a:	e7f0      	b.n	8005a7e <_vfiprintf_r+0x1b6>
 8005a9c:	ab03      	add	r3, sp, #12
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <_vfiprintf_r+0x228>)
 8005aa4:	a904      	add	r1, sp, #16
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f3af 8000 	nop.w
 8005aac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ab0:	4681      	mov	r9, r0
 8005ab2:	d1d5      	bne.n	8005a60 <_vfiprintf_r+0x198>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	065b      	lsls	r3, r3, #25
 8005ab8:	f53f af7e 	bmi.w	80059b8 <_vfiprintf_r+0xf0>
 8005abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005abe:	e77d      	b.n	80059bc <_vfiprintf_r+0xf4>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <_vfiprintf_r+0x228>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f000 f888 	bl	8005be0 <_printf_i>
 8005ad0:	e7ec      	b.n	8005aac <_vfiprintf_r+0x1e4>
 8005ad2:	bf00      	nop
 8005ad4:	08006f80 	.word	0x08006f80
 8005ad8:	08006fc0 	.word	0x08006fc0
 8005adc:	08006fa0 	.word	0x08006fa0
 8005ae0:	08006f60 	.word	0x08006f60
 8005ae4:	08006fc6 	.word	0x08006fc6
 8005ae8:	08006fca 	.word	0x08006fca
 8005aec:	00000000 	.word	0x00000000
 8005af0:	080058a3 	.word	0x080058a3

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4691      	mov	r9, r2
 8005afa:	461f      	mov	r7, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	f8c9 3000 	str.w	r3, [r9]
 8005b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b12:	4606      	mov	r6, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	b112      	cbz	r2, 8005b1e <_printf_common+0x2a>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f8c9 3000 	str.w	r3, [r9]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	0699      	lsls	r1, r3, #26
 8005b22:	bf42      	ittt	mi
 8005b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b28:	3302      	addmi	r3, #2
 8005b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8005b2e:	6825      	ldr	r5, [r4, #0]
 8005b30:	f015 0506 	ands.w	r5, r5, #6
 8005b34:	d107      	bne.n	8005b46 <_printf_common+0x52>
 8005b36:	f104 0a19 	add.w	sl, r4, #25
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	42ab      	cmp	r3, r5
 8005b44:	dc28      	bgt.n	8005b98 <_printf_common+0xa4>
 8005b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	3300      	adds	r3, #0
 8005b4e:	bf18      	it	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	0692      	lsls	r2, r2, #26
 8005b54:	d42d      	bmi.n	8005bb2 <_printf_common+0xbe>
 8005b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	47c0      	blx	r8
 8005b60:	3001      	adds	r0, #1
 8005b62:	d020      	beq.n	8005ba6 <_printf_common+0xb2>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	68e5      	ldr	r5, [r4, #12]
 8005b68:	f8d9 2000 	ldr.w	r2, [r9]
 8005b6c:	f003 0306 	and.w	r3, r3, #6
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	bf08      	it	eq
 8005b74:	1aad      	subeq	r5, r5, r2
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	6922      	ldr	r2, [r4, #16]
 8005b7a:	bf0c      	ite	eq
 8005b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b80:	2500      	movne	r5, #0
 8005b82:	4293      	cmp	r3, r2
 8005b84:	bfc4      	itt	gt
 8005b86:	1a9b      	subgt	r3, r3, r2
 8005b88:	18ed      	addgt	r5, r5, r3
 8005b8a:	f04f 0900 	mov.w	r9, #0
 8005b8e:	341a      	adds	r4, #26
 8005b90:	454d      	cmp	r5, r9
 8005b92:	d11a      	bne.n	8005bca <_printf_common+0xd6>
 8005b94:	2000      	movs	r0, #0
 8005b96:	e008      	b.n	8005baa <_printf_common+0xb6>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d103      	bne.n	8005bae <_printf_common+0xba>
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bae:	3501      	adds	r5, #1
 8005bb0:	e7c3      	b.n	8005b3a <_printf_common+0x46>
 8005bb2:	18e1      	adds	r1, r4, r3
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	2030      	movs	r0, #48	; 0x30
 8005bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bbc:	4422      	add	r2, r4
 8005bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	e7c5      	b.n	8005b56 <_printf_common+0x62>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4639      	mov	r1, r7
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	47c0      	blx	r8
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d0e6      	beq.n	8005ba6 <_printf_common+0xb2>
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	e7d8      	b.n	8005b90 <_printf_common+0x9c>
	...

08005be0 <_printf_i>:
 8005be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005be8:	460c      	mov	r4, r1
 8005bea:	7e09      	ldrb	r1, [r1, #24]
 8005bec:	b085      	sub	sp, #20
 8005bee:	296e      	cmp	r1, #110	; 0x6e
 8005bf0:	4617      	mov	r7, r2
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	4698      	mov	r8, r3
 8005bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf8:	f000 80b3 	beq.w	8005d62 <_printf_i+0x182>
 8005bfc:	d822      	bhi.n	8005c44 <_printf_i+0x64>
 8005bfe:	2963      	cmp	r1, #99	; 0x63
 8005c00:	d036      	beq.n	8005c70 <_printf_i+0x90>
 8005c02:	d80a      	bhi.n	8005c1a <_printf_i+0x3a>
 8005c04:	2900      	cmp	r1, #0
 8005c06:	f000 80b9 	beq.w	8005d7c <_printf_i+0x19c>
 8005c0a:	2958      	cmp	r1, #88	; 0x58
 8005c0c:	f000 8083 	beq.w	8005d16 <_printf_i+0x136>
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c18:	e032      	b.n	8005c80 <_printf_i+0xa0>
 8005c1a:	2964      	cmp	r1, #100	; 0x64
 8005c1c:	d001      	beq.n	8005c22 <_printf_i+0x42>
 8005c1e:	2969      	cmp	r1, #105	; 0x69
 8005c20:	d1f6      	bne.n	8005c10 <_printf_i+0x30>
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	6813      	ldr	r3, [r2, #0]
 8005c26:	0605      	lsls	r5, r0, #24
 8005c28:	f103 0104 	add.w	r1, r3, #4
 8005c2c:	d52a      	bpl.n	8005c84 <_printf_i+0xa4>
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da03      	bge.n	8005c3e <_printf_i+0x5e>
 8005c36:	222d      	movs	r2, #45	; 0x2d
 8005c38:	425b      	negs	r3, r3
 8005c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c3e:	486f      	ldr	r0, [pc, #444]	; (8005dfc <_printf_i+0x21c>)
 8005c40:	220a      	movs	r2, #10
 8005c42:	e039      	b.n	8005cb8 <_printf_i+0xd8>
 8005c44:	2973      	cmp	r1, #115	; 0x73
 8005c46:	f000 809d 	beq.w	8005d84 <_printf_i+0x1a4>
 8005c4a:	d808      	bhi.n	8005c5e <_printf_i+0x7e>
 8005c4c:	296f      	cmp	r1, #111	; 0x6f
 8005c4e:	d020      	beq.n	8005c92 <_printf_i+0xb2>
 8005c50:	2970      	cmp	r1, #112	; 0x70
 8005c52:	d1dd      	bne.n	8005c10 <_printf_i+0x30>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	f043 0320 	orr.w	r3, r3, #32
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	e003      	b.n	8005c66 <_printf_i+0x86>
 8005c5e:	2975      	cmp	r1, #117	; 0x75
 8005c60:	d017      	beq.n	8005c92 <_printf_i+0xb2>
 8005c62:	2978      	cmp	r1, #120	; 0x78
 8005c64:	d1d4      	bne.n	8005c10 <_printf_i+0x30>
 8005c66:	2378      	movs	r3, #120	; 0x78
 8005c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c6c:	4864      	ldr	r0, [pc, #400]	; (8005e00 <_printf_i+0x220>)
 8005c6e:	e055      	b.n	8005d1c <_printf_i+0x13c>
 8005c70:	6813      	ldr	r3, [r2, #0]
 8005c72:	1d19      	adds	r1, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6011      	str	r1, [r2, #0]
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c80:	2301      	movs	r3, #1
 8005c82:	e08c      	b.n	8005d9e <_printf_i+0x1be>
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6011      	str	r1, [r2, #0]
 8005c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c8c:	bf18      	it	ne
 8005c8e:	b21b      	sxthne	r3, r3
 8005c90:	e7cf      	b.n	8005c32 <_printf_i+0x52>
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	6825      	ldr	r5, [r4, #0]
 8005c96:	1d18      	adds	r0, r3, #4
 8005c98:	6010      	str	r0, [r2, #0]
 8005c9a:	0628      	lsls	r0, r5, #24
 8005c9c:	d501      	bpl.n	8005ca2 <_printf_i+0xc2>
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	e002      	b.n	8005ca8 <_printf_i+0xc8>
 8005ca2:	0668      	lsls	r0, r5, #25
 8005ca4:	d5fb      	bpl.n	8005c9e <_printf_i+0xbe>
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	4854      	ldr	r0, [pc, #336]	; (8005dfc <_printf_i+0x21c>)
 8005caa:	296f      	cmp	r1, #111	; 0x6f
 8005cac:	bf14      	ite	ne
 8005cae:	220a      	movne	r2, #10
 8005cb0:	2208      	moveq	r2, #8
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb8:	6865      	ldr	r5, [r4, #4]
 8005cba:	60a5      	str	r5, [r4, #8]
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	f2c0 8095 	blt.w	8005dec <_printf_i+0x20c>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	f021 0104 	bic.w	r1, r1, #4
 8005cc8:	6021      	str	r1, [r4, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d13d      	bne.n	8005d4a <_printf_i+0x16a>
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	f040 808e 	bne.w	8005df0 <_printf_i+0x210>
 8005cd4:	4665      	mov	r5, ip
 8005cd6:	2a08      	cmp	r2, #8
 8005cd8:	d10b      	bne.n	8005cf2 <_printf_i+0x112>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	07db      	lsls	r3, r3, #31
 8005cde:	d508      	bpl.n	8005cf2 <_printf_i+0x112>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	bfde      	ittt	le
 8005ce8:	2330      	movle	r3, #48	; 0x30
 8005cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cf2:	ebac 0305 	sub.w	r3, ip, r5
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	f8cd 8000 	str.w	r8, [sp]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	aa03      	add	r2, sp, #12
 8005d00:	4621      	mov	r1, r4
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff fef6 	bl	8005af4 <_printf_common>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d14d      	bne.n	8005da8 <_printf_i+0x1c8>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d10:	b005      	add	sp, #20
 8005d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d16:	4839      	ldr	r0, [pc, #228]	; (8005dfc <_printf_i+0x21c>)
 8005d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	6821      	ldr	r1, [r4, #0]
 8005d20:	1d1d      	adds	r5, r3, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6015      	str	r5, [r2, #0]
 8005d26:	060a      	lsls	r2, r1, #24
 8005d28:	d50b      	bpl.n	8005d42 <_printf_i+0x162>
 8005d2a:	07ca      	lsls	r2, r1, #31
 8005d2c:	bf44      	itt	mi
 8005d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8005d32:	6021      	strmi	r1, [r4, #0]
 8005d34:	b91b      	cbnz	r3, 8005d3e <_printf_i+0x15e>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	f022 0220 	bic.w	r2, r2, #32
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	2210      	movs	r2, #16
 8005d40:	e7b7      	b.n	8005cb2 <_printf_i+0xd2>
 8005d42:	064d      	lsls	r5, r1, #25
 8005d44:	bf48      	it	mi
 8005d46:	b29b      	uxthmi	r3, r3
 8005d48:	e7ef      	b.n	8005d2a <_printf_i+0x14a>
 8005d4a:	4665      	mov	r5, ip
 8005d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d50:	fb02 3311 	mls	r3, r2, r1, r3
 8005d54:	5cc3      	ldrb	r3, [r0, r3]
 8005d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d1f5      	bne.n	8005d4c <_printf_i+0x16c>
 8005d60:	e7b9      	b.n	8005cd6 <_printf_i+0xf6>
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	6961      	ldr	r1, [r4, #20]
 8005d68:	1d18      	adds	r0, r3, #4
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	0628      	lsls	r0, r5, #24
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	d501      	bpl.n	8005d76 <_printf_i+0x196>
 8005d72:	6019      	str	r1, [r3, #0]
 8005d74:	e002      	b.n	8005d7c <_printf_i+0x19c>
 8005d76:	066a      	lsls	r2, r5, #25
 8005d78:	d5fb      	bpl.n	8005d72 <_printf_i+0x192>
 8005d7a:	8019      	strh	r1, [r3, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	4665      	mov	r5, ip
 8005d82:	e7b9      	b.n	8005cf8 <_printf_i+0x118>
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	1d19      	adds	r1, r3, #4
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	681d      	ldr	r5, [r3, #0]
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4628      	mov	r0, r5
 8005d92:	f7fa fa3d 	bl	8000210 <memchr>
 8005d96:	b108      	cbz	r0, 8005d9c <_printf_i+0x1bc>
 8005d98:	1b40      	subs	r0, r0, r5
 8005d9a:	6060      	str	r0, [r4, #4]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	2300      	movs	r3, #0
 8005da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da6:	e7a7      	b.n	8005cf8 <_printf_i+0x118>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	462a      	mov	r2, r5
 8005dac:	4639      	mov	r1, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0aa      	beq.n	8005d0c <_printf_i+0x12c>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	079b      	lsls	r3, r3, #30
 8005dba:	d413      	bmi.n	8005de4 <_printf_i+0x204>
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	4618      	movlt	r0, r3
 8005dc6:	e7a3      	b.n	8005d10 <_printf_i+0x130>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	464a      	mov	r2, r9
 8005dcc:	4639      	mov	r1, r7
 8005dce:	4630      	mov	r0, r6
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d09a      	beq.n	8005d0c <_printf_i+0x12c>
 8005dd6:	3501      	adds	r5, #1
 8005dd8:	68e3      	ldr	r3, [r4, #12]
 8005dda:	9a03      	ldr	r2, [sp, #12]
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	42ab      	cmp	r3, r5
 8005de0:	dcf2      	bgt.n	8005dc8 <_printf_i+0x1e8>
 8005de2:	e7eb      	b.n	8005dbc <_printf_i+0x1dc>
 8005de4:	2500      	movs	r5, #0
 8005de6:	f104 0919 	add.w	r9, r4, #25
 8005dea:	e7f5      	b.n	8005dd8 <_printf_i+0x1f8>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ac      	bne.n	8005d4a <_printf_i+0x16a>
 8005df0:	7803      	ldrb	r3, [r0, #0]
 8005df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfa:	e76c      	b.n	8005cd6 <_printf_i+0xf6>
 8005dfc:	08006fd1 	.word	0x08006fd1
 8005e00:	08006fe2 	.word	0x08006fe2

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4c06      	ldr	r4, [pc, #24]	; (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	f7fd f8d8 	bl	8002fc4 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	2000017c 	.word	0x2000017c

08005e24 <__sread>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	460c      	mov	r4, r1
 8005e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2c:	f000 fa96 	bl	800635c <_read_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	bfab      	itete	ge
 8005e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e36:	89a3      	ldrhlt	r3, [r4, #12]
 8005e38:	181b      	addge	r3, r3, r0
 8005e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e3e:	bfac      	ite	ge
 8005e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e42:	81a3      	strhlt	r3, [r4, #12]
 8005e44:	bd10      	pop	{r4, pc}

08005e46 <__swrite>:
 8005e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	898b      	ldrh	r3, [r1, #12]
 8005e4e:	05db      	lsls	r3, r3, #23
 8005e50:	4605      	mov	r5, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	4616      	mov	r6, r2
 8005e56:	d505      	bpl.n	8005e64 <__swrite+0x1e>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e60:	f000 f9b6 	bl	80061d0 <_lseek_r>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	4632      	mov	r2, r6
 8005e72:	463b      	mov	r3, r7
 8005e74:	4628      	mov	r0, r5
 8005e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7a:	f000 b869 	b.w	8005f50 <_write_r>

08005e7e <__sseek>:
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	460c      	mov	r4, r1
 8005e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e86:	f000 f9a3 	bl	80061d0 <_lseek_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	bf15      	itete	ne
 8005e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e9a:	81a3      	strheq	r3, [r4, #12]
 8005e9c:	bf18      	it	ne
 8005e9e:	81a3      	strhne	r3, [r4, #12]
 8005ea0:	bd10      	pop	{r4, pc}

08005ea2 <__sclose>:
 8005ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea6:	f000 b8d3 	b.w	8006050 <_close_r>
	...

08005eac <__swbuf_r>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	460e      	mov	r6, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	b118      	cbz	r0, 8005ebe <__swbuf_r+0x12>
 8005eb6:	6983      	ldr	r3, [r0, #24]
 8005eb8:	b90b      	cbnz	r3, 8005ebe <__swbuf_r+0x12>
 8005eba:	f7ff fbf7 	bl	80056ac <__sinit>
 8005ebe:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <__swbuf_r+0x98>)
 8005ec0:	429c      	cmp	r4, r3
 8005ec2:	d12a      	bne.n	8005f1a <__swbuf_r+0x6e>
 8005ec4:	686c      	ldr	r4, [r5, #4]
 8005ec6:	69a3      	ldr	r3, [r4, #24]
 8005ec8:	60a3      	str	r3, [r4, #8]
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	071a      	lsls	r2, r3, #28
 8005ece:	d52e      	bpl.n	8005f2e <__swbuf_r+0x82>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	b363      	cbz	r3, 8005f2e <__swbuf_r+0x82>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	1ac0      	subs	r0, r0, r3
 8005eda:	6963      	ldr	r3, [r4, #20]
 8005edc:	b2f6      	uxtb	r6, r6
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	4637      	mov	r7, r6
 8005ee2:	dc04      	bgt.n	8005eee <__swbuf_r+0x42>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f948 	bl	800617c <_fflush_r>
 8005eec:	bb28      	cbnz	r0, 8005f3a <__swbuf_r+0x8e>
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	60a3      	str	r3, [r4, #8]
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	701e      	strb	r6, [r3, #0]
 8005efc:	6963      	ldr	r3, [r4, #20]
 8005efe:	3001      	adds	r0, #1
 8005f00:	4283      	cmp	r3, r0
 8005f02:	d004      	beq.n	8005f0e <__swbuf_r+0x62>
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d519      	bpl.n	8005f3e <__swbuf_r+0x92>
 8005f0a:	2e0a      	cmp	r6, #10
 8005f0c:	d117      	bne.n	8005f3e <__swbuf_r+0x92>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 f933 	bl	800617c <_fflush_r>
 8005f16:	b190      	cbz	r0, 8005f3e <__swbuf_r+0x92>
 8005f18:	e00f      	b.n	8005f3a <__swbuf_r+0x8e>
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <__swbuf_r+0x9c>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d101      	bne.n	8005f24 <__swbuf_r+0x78>
 8005f20:	68ac      	ldr	r4, [r5, #8]
 8005f22:	e7d0      	b.n	8005ec6 <__swbuf_r+0x1a>
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__swbuf_r+0xa0>)
 8005f26:	429c      	cmp	r4, r3
 8005f28:	bf08      	it	eq
 8005f2a:	68ec      	ldreq	r4, [r5, #12]
 8005f2c:	e7cb      	b.n	8005ec6 <__swbuf_r+0x1a>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 f81f 	bl	8005f74 <__swsetup_r>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d0cc      	beq.n	8005ed4 <__swbuf_r+0x28>
 8005f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f3e:	4638      	mov	r0, r7
 8005f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f42:	bf00      	nop
 8005f44:	08006f80 	.word	0x08006f80
 8005f48:	08006fa0 	.word	0x08006fa0
 8005f4c:	08006f60 	.word	0x08006f60

08005f50 <_write_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4c07      	ldr	r4, [pc, #28]	; (8005f70 <_write_r+0x20>)
 8005f54:	4605      	mov	r5, r0
 8005f56:	4608      	mov	r0, r1
 8005f58:	4611      	mov	r1, r2
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	6022      	str	r2, [r4, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fc ffdf 	bl	8002f22 <_write>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_write_r+0x1e>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_write_r+0x1e>
 8005f6c:	602b      	str	r3, [r5, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	2000017c 	.word	0x2000017c

08005f74 <__swsetup_r>:
 8005f74:	4b32      	ldr	r3, [pc, #200]	; (8006040 <__swsetup_r+0xcc>)
 8005f76:	b570      	push	{r4, r5, r6, lr}
 8005f78:	681d      	ldr	r5, [r3, #0]
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	b125      	cbz	r5, 8005f8a <__swsetup_r+0x16>
 8005f80:	69ab      	ldr	r3, [r5, #24]
 8005f82:	b913      	cbnz	r3, 8005f8a <__swsetup_r+0x16>
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7ff fb91 	bl	80056ac <__sinit>
 8005f8a:	4b2e      	ldr	r3, [pc, #184]	; (8006044 <__swsetup_r+0xd0>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	d10f      	bne.n	8005fb0 <__swsetup_r+0x3c>
 8005f90:	686c      	ldr	r4, [r5, #4]
 8005f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	0715      	lsls	r5, r2, #28
 8005f9a:	d42c      	bmi.n	8005ff6 <__swsetup_r+0x82>
 8005f9c:	06d0      	lsls	r0, r2, #27
 8005f9e:	d411      	bmi.n	8005fc4 <__swsetup_r+0x50>
 8005fa0:	2209      	movs	r2, #9
 8005fa2:	6032      	str	r2, [r6, #0]
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fae:	e03e      	b.n	800602e <__swsetup_r+0xba>
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <__swsetup_r+0xd4>)
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	d101      	bne.n	8005fba <__swsetup_r+0x46>
 8005fb6:	68ac      	ldr	r4, [r5, #8]
 8005fb8:	e7eb      	b.n	8005f92 <__swsetup_r+0x1e>
 8005fba:	4b24      	ldr	r3, [pc, #144]	; (800604c <__swsetup_r+0xd8>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	bf08      	it	eq
 8005fc0:	68ec      	ldreq	r4, [r5, #12]
 8005fc2:	e7e6      	b.n	8005f92 <__swsetup_r+0x1e>
 8005fc4:	0751      	lsls	r1, r2, #29
 8005fc6:	d512      	bpl.n	8005fee <__swsetup_r+0x7a>
 8005fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fca:	b141      	cbz	r1, 8005fde <__swsetup_r+0x6a>
 8005fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	d002      	beq.n	8005fda <__swsetup_r+0x66>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 f973 	bl	80062c0 <_free_r>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	f043 0308 	orr.w	r3, r3, #8
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	b94b      	cbnz	r3, 800600e <__swsetup_r+0x9a>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006004:	d003      	beq.n	800600e <__swsetup_r+0x9a>
 8006006:	4621      	mov	r1, r4
 8006008:	4630      	mov	r0, r6
 800600a:	f000 f917 	bl	800623c <__smakebuf_r>
 800600e:	89a2      	ldrh	r2, [r4, #12]
 8006010:	f012 0301 	ands.w	r3, r2, #1
 8006014:	d00c      	beq.n	8006030 <__swsetup_r+0xbc>
 8006016:	2300      	movs	r3, #0
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6963      	ldr	r3, [r4, #20]
 800601c:	425b      	negs	r3, r3
 800601e:	61a3      	str	r3, [r4, #24]
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	b953      	cbnz	r3, 800603a <__swsetup_r+0xc6>
 8006024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800602c:	d1ba      	bne.n	8005fa4 <__swsetup_r+0x30>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	0792      	lsls	r2, r2, #30
 8006032:	bf58      	it	pl
 8006034:	6963      	ldrpl	r3, [r4, #20]
 8006036:	60a3      	str	r3, [r4, #8]
 8006038:	e7f2      	b.n	8006020 <__swsetup_r+0xac>
 800603a:	2000      	movs	r0, #0
 800603c:	e7f7      	b.n	800602e <__swsetup_r+0xba>
 800603e:	bf00      	nop
 8006040:	2000000c 	.word	0x2000000c
 8006044:	08006f80 	.word	0x08006f80
 8006048:	08006fa0 	.word	0x08006fa0
 800604c:	08006f60 	.word	0x08006f60

08006050 <_close_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4c06      	ldr	r4, [pc, #24]	; (800606c <_close_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4605      	mov	r5, r0
 8006058:	4608      	mov	r0, r1
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	f7fc ff7d 	bl	8002f5a <_close>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_close_r+0x1a>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b103      	cbz	r3, 800606a <_close_r+0x1a>
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000017c 	.word	0x2000017c

08006070 <__sflush_r>:
 8006070:	898a      	ldrh	r2, [r1, #12]
 8006072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006076:	4605      	mov	r5, r0
 8006078:	0710      	lsls	r0, r2, #28
 800607a:	460c      	mov	r4, r1
 800607c:	d458      	bmi.n	8006130 <__sflush_r+0xc0>
 800607e:	684b      	ldr	r3, [r1, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dc05      	bgt.n	8006090 <__sflush_r+0x20>
 8006084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	dc02      	bgt.n	8006090 <__sflush_r+0x20>
 800608a:	2000      	movs	r0, #0
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006092:	2e00      	cmp	r6, #0
 8006094:	d0f9      	beq.n	800608a <__sflush_r+0x1a>
 8006096:	2300      	movs	r3, #0
 8006098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800609c:	682f      	ldr	r7, [r5, #0]
 800609e:	6a21      	ldr	r1, [r4, #32]
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	d032      	beq.n	800610a <__sflush_r+0x9a>
 80060a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	075a      	lsls	r2, r3, #29
 80060aa:	d505      	bpl.n	80060b8 <__sflush_r+0x48>
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	1ac0      	subs	r0, r0, r3
 80060b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060b2:	b10b      	cbz	r3, 80060b8 <__sflush_r+0x48>
 80060b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b6:	1ac0      	subs	r0, r0, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	4602      	mov	r2, r0
 80060bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060be:	6a21      	ldr	r1, [r4, #32]
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b0      	blx	r6
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	d106      	bne.n	80060d8 <__sflush_r+0x68>
 80060ca:	6829      	ldr	r1, [r5, #0]
 80060cc:	291d      	cmp	r1, #29
 80060ce:	d848      	bhi.n	8006162 <__sflush_r+0xf2>
 80060d0:	4a29      	ldr	r2, [pc, #164]	; (8006178 <__sflush_r+0x108>)
 80060d2:	40ca      	lsrs	r2, r1
 80060d4:	07d6      	lsls	r6, r2, #31
 80060d6:	d544      	bpl.n	8006162 <__sflush_r+0xf2>
 80060d8:	2200      	movs	r2, #0
 80060da:	6062      	str	r2, [r4, #4]
 80060dc:	04d9      	lsls	r1, r3, #19
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	6022      	str	r2, [r4, #0]
 80060e2:	d504      	bpl.n	80060ee <__sflush_r+0x7e>
 80060e4:	1c42      	adds	r2, r0, #1
 80060e6:	d101      	bne.n	80060ec <__sflush_r+0x7c>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b903      	cbnz	r3, 80060ee <__sflush_r+0x7e>
 80060ec:	6560      	str	r0, [r4, #84]	; 0x54
 80060ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060f0:	602f      	str	r7, [r5, #0]
 80060f2:	2900      	cmp	r1, #0
 80060f4:	d0c9      	beq.n	800608a <__sflush_r+0x1a>
 80060f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060fa:	4299      	cmp	r1, r3
 80060fc:	d002      	beq.n	8006104 <__sflush_r+0x94>
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f8de 	bl	80062c0 <_free_r>
 8006104:	2000      	movs	r0, #0
 8006106:	6360      	str	r0, [r4, #52]	; 0x34
 8006108:	e7c0      	b.n	800608c <__sflush_r+0x1c>
 800610a:	2301      	movs	r3, #1
 800610c:	4628      	mov	r0, r5
 800610e:	47b0      	blx	r6
 8006110:	1c41      	adds	r1, r0, #1
 8006112:	d1c8      	bne.n	80060a6 <__sflush_r+0x36>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0c5      	beq.n	80060a6 <__sflush_r+0x36>
 800611a:	2b1d      	cmp	r3, #29
 800611c:	d001      	beq.n	8006122 <__sflush_r+0xb2>
 800611e:	2b16      	cmp	r3, #22
 8006120:	d101      	bne.n	8006126 <__sflush_r+0xb6>
 8006122:	602f      	str	r7, [r5, #0]
 8006124:	e7b1      	b.n	800608a <__sflush_r+0x1a>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	e7ad      	b.n	800608c <__sflush_r+0x1c>
 8006130:	690f      	ldr	r7, [r1, #16]
 8006132:	2f00      	cmp	r7, #0
 8006134:	d0a9      	beq.n	800608a <__sflush_r+0x1a>
 8006136:	0793      	lsls	r3, r2, #30
 8006138:	680e      	ldr	r6, [r1, #0]
 800613a:	bf08      	it	eq
 800613c:	694b      	ldreq	r3, [r1, #20]
 800613e:	600f      	str	r7, [r1, #0]
 8006140:	bf18      	it	ne
 8006142:	2300      	movne	r3, #0
 8006144:	eba6 0807 	sub.w	r8, r6, r7
 8006148:	608b      	str	r3, [r1, #8]
 800614a:	f1b8 0f00 	cmp.w	r8, #0
 800614e:	dd9c      	ble.n	800608a <__sflush_r+0x1a>
 8006150:	4643      	mov	r3, r8
 8006152:	463a      	mov	r2, r7
 8006154:	6a21      	ldr	r1, [r4, #32]
 8006156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006158:	4628      	mov	r0, r5
 800615a:	47b0      	blx	r6
 800615c:	2800      	cmp	r0, #0
 800615e:	dc06      	bgt.n	800616e <__sflush_r+0xfe>
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616c:	e78e      	b.n	800608c <__sflush_r+0x1c>
 800616e:	4407      	add	r7, r0
 8006170:	eba8 0800 	sub.w	r8, r8, r0
 8006174:	e7e9      	b.n	800614a <__sflush_r+0xda>
 8006176:	bf00      	nop
 8006178:	20400001 	.word	0x20400001

0800617c <_fflush_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b1db      	cbz	r3, 80061be <_fflush_r+0x42>
 8006186:	b118      	cbz	r0, 8006190 <_fflush_r+0x14>
 8006188:	6983      	ldr	r3, [r0, #24]
 800618a:	b90b      	cbnz	r3, 8006190 <_fflush_r+0x14>
 800618c:	f7ff fa8e 	bl	80056ac <__sinit>
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <_fflush_r+0x48>)
 8006192:	429c      	cmp	r4, r3
 8006194:	d109      	bne.n	80061aa <_fflush_r+0x2e>
 8006196:	686c      	ldr	r4, [r5, #4]
 8006198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619c:	b17b      	cbz	r3, 80061be <_fflush_r+0x42>
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a6:	f7ff bf63 	b.w	8006070 <__sflush_r>
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <_fflush_r+0x4c>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	d101      	bne.n	80061b4 <_fflush_r+0x38>
 80061b0:	68ac      	ldr	r4, [r5, #8]
 80061b2:	e7f1      	b.n	8006198 <_fflush_r+0x1c>
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <_fflush_r+0x50>)
 80061b6:	429c      	cmp	r4, r3
 80061b8:	bf08      	it	eq
 80061ba:	68ec      	ldreq	r4, [r5, #12]
 80061bc:	e7ec      	b.n	8006198 <_fflush_r+0x1c>
 80061be:	2000      	movs	r0, #0
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	08006f80 	.word	0x08006f80
 80061c8:	08006fa0 	.word	0x08006fa0
 80061cc:	08006f60 	.word	0x08006f60

080061d0 <_lseek_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4c07      	ldr	r4, [pc, #28]	; (80061f0 <_lseek_r+0x20>)
 80061d4:	4605      	mov	r5, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fc fee2 	bl	8002fa8 <_lseek>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_lseek_r+0x1e>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_lseek_r+0x1e>
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	2000017c 	.word	0x2000017c

080061f4 <__swhatbuf_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460e      	mov	r6, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	2900      	cmp	r1, #0
 80061fe:	b096      	sub	sp, #88	; 0x58
 8006200:	4614      	mov	r4, r2
 8006202:	461d      	mov	r5, r3
 8006204:	da07      	bge.n	8006216 <__swhatbuf_r+0x22>
 8006206:	2300      	movs	r3, #0
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	89b3      	ldrh	r3, [r6, #12]
 800620c:	061a      	lsls	r2, r3, #24
 800620e:	d410      	bmi.n	8006232 <__swhatbuf_r+0x3e>
 8006210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006214:	e00e      	b.n	8006234 <__swhatbuf_r+0x40>
 8006216:	466a      	mov	r2, sp
 8006218:	f000 f8b2 	bl	8006380 <_fstat_r>
 800621c:	2800      	cmp	r0, #0
 800621e:	dbf2      	blt.n	8006206 <__swhatbuf_r+0x12>
 8006220:	9a01      	ldr	r2, [sp, #4]
 8006222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800622a:	425a      	negs	r2, r3
 800622c:	415a      	adcs	r2, r3
 800622e:	602a      	str	r2, [r5, #0]
 8006230:	e7ee      	b.n	8006210 <__swhatbuf_r+0x1c>
 8006232:	2340      	movs	r3, #64	; 0x40
 8006234:	2000      	movs	r0, #0
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	b016      	add	sp, #88	; 0x58
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <__smakebuf_r>:
 800623c:	898b      	ldrh	r3, [r1, #12]
 800623e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006240:	079d      	lsls	r5, r3, #30
 8006242:	4606      	mov	r6, r0
 8006244:	460c      	mov	r4, r1
 8006246:	d507      	bpl.n	8006258 <__smakebuf_r+0x1c>
 8006248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	2301      	movs	r3, #1
 8006252:	6163      	str	r3, [r4, #20]
 8006254:	b002      	add	sp, #8
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	ab01      	add	r3, sp, #4
 800625a:	466a      	mov	r2, sp
 800625c:	f7ff ffca 	bl	80061f4 <__swhatbuf_r>
 8006260:	9900      	ldr	r1, [sp, #0]
 8006262:	4605      	mov	r5, r0
 8006264:	4630      	mov	r0, r6
 8006266:	f7ff faab 	bl	80057c0 <_malloc_r>
 800626a:	b948      	cbnz	r0, 8006280 <__smakebuf_r+0x44>
 800626c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006270:	059a      	lsls	r2, r3, #22
 8006272:	d4ef      	bmi.n	8006254 <__smakebuf_r+0x18>
 8006274:	f023 0303 	bic.w	r3, r3, #3
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	81a3      	strh	r3, [r4, #12]
 800627e:	e7e3      	b.n	8006248 <__smakebuf_r+0xc>
 8006280:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <__smakebuf_r+0x7c>)
 8006282:	62b3      	str	r3, [r6, #40]	; 0x28
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	6120      	str	r0, [r4, #16]
 8006296:	b15b      	cbz	r3, 80062b0 <__smakebuf_r+0x74>
 8006298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629c:	4630      	mov	r0, r6
 800629e:	f000 f881 	bl	80063a4 <_isatty_r>
 80062a2:	b128      	cbz	r0, 80062b0 <__smakebuf_r+0x74>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	431d      	orrs	r5, r3
 80062b4:	81a5      	strh	r5, [r4, #12]
 80062b6:	e7cd      	b.n	8006254 <__smakebuf_r+0x18>
 80062b8:	08005675 	.word	0x08005675

080062bc <__malloc_lock>:
 80062bc:	4770      	bx	lr

080062be <__malloc_unlock>:
 80062be:	4770      	bx	lr

080062c0 <_free_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4605      	mov	r5, r0
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d045      	beq.n	8006354 <_free_r+0x94>
 80062c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062cc:	1f0c      	subs	r4, r1, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bfb8      	it	lt
 80062d2:	18e4      	addlt	r4, r4, r3
 80062d4:	f7ff fff2 	bl	80062bc <__malloc_lock>
 80062d8:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <_free_r+0x98>)
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	4610      	mov	r0, r2
 80062de:	b933      	cbnz	r3, 80062ee <_free_r+0x2e>
 80062e0:	6063      	str	r3, [r4, #4]
 80062e2:	6014      	str	r4, [r2, #0]
 80062e4:	4628      	mov	r0, r5
 80062e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ea:	f7ff bfe8 	b.w	80062be <__malloc_unlock>
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	d90c      	bls.n	800630c <_free_r+0x4c>
 80062f2:	6821      	ldr	r1, [r4, #0]
 80062f4:	1862      	adds	r2, r4, r1
 80062f6:	4293      	cmp	r3, r2
 80062f8:	bf04      	itt	eq
 80062fa:	681a      	ldreq	r2, [r3, #0]
 80062fc:	685b      	ldreq	r3, [r3, #4]
 80062fe:	6063      	str	r3, [r4, #4]
 8006300:	bf04      	itt	eq
 8006302:	1852      	addeq	r2, r2, r1
 8006304:	6022      	streq	r2, [r4, #0]
 8006306:	6004      	str	r4, [r0, #0]
 8006308:	e7ec      	b.n	80062e4 <_free_r+0x24>
 800630a:	4613      	mov	r3, r2
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	b10a      	cbz	r2, 8006314 <_free_r+0x54>
 8006310:	42a2      	cmp	r2, r4
 8006312:	d9fa      	bls.n	800630a <_free_r+0x4a>
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	1858      	adds	r0, r3, r1
 8006318:	42a0      	cmp	r0, r4
 800631a:	d10b      	bne.n	8006334 <_free_r+0x74>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	4401      	add	r1, r0
 8006320:	1858      	adds	r0, r3, r1
 8006322:	4282      	cmp	r2, r0
 8006324:	6019      	str	r1, [r3, #0]
 8006326:	d1dd      	bne.n	80062e4 <_free_r+0x24>
 8006328:	6810      	ldr	r0, [r2, #0]
 800632a:	6852      	ldr	r2, [r2, #4]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	4401      	add	r1, r0
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	e7d7      	b.n	80062e4 <_free_r+0x24>
 8006334:	d902      	bls.n	800633c <_free_r+0x7c>
 8006336:	230c      	movs	r3, #12
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	e7d3      	b.n	80062e4 <_free_r+0x24>
 800633c:	6820      	ldr	r0, [r4, #0]
 800633e:	1821      	adds	r1, r4, r0
 8006340:	428a      	cmp	r2, r1
 8006342:	bf04      	itt	eq
 8006344:	6811      	ldreq	r1, [r2, #0]
 8006346:	6852      	ldreq	r2, [r2, #4]
 8006348:	6062      	str	r2, [r4, #4]
 800634a:	bf04      	itt	eq
 800634c:	1809      	addeq	r1, r1, r0
 800634e:	6021      	streq	r1, [r4, #0]
 8006350:	605c      	str	r4, [r3, #4]
 8006352:	e7c7      	b.n	80062e4 <_free_r+0x24>
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	bf00      	nop
 8006358:	20000098 	.word	0x20000098

0800635c <_read_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4c07      	ldr	r4, [pc, #28]	; (800637c <_read_r+0x20>)
 8006360:	4605      	mov	r5, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fc fdbc 	bl	8002ee8 <_read>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_read_r+0x1e>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	b103      	cbz	r3, 800637a <_read_r+0x1e>
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	2000017c 	.word	0x2000017c

08006380 <_fstat_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4c07      	ldr	r4, [pc, #28]	; (80063a0 <_fstat_r+0x20>)
 8006384:	2300      	movs	r3, #0
 8006386:	4605      	mov	r5, r0
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	f7fc fdf0 	bl	8002f72 <_fstat>
 8006392:	1c43      	adds	r3, r0, #1
 8006394:	d102      	bne.n	800639c <_fstat_r+0x1c>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	b103      	cbz	r3, 800639c <_fstat_r+0x1c>
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	bd38      	pop	{r3, r4, r5, pc}
 800639e:	bf00      	nop
 80063a0:	2000017c 	.word	0x2000017c

080063a4 <_isatty_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4c06      	ldr	r4, [pc, #24]	; (80063c0 <_isatty_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4605      	mov	r5, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	f7fc fdef 	bl	8002f92 <_isatty>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_isatty_r+0x1a>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	b103      	cbz	r3, 80063be <_isatty_r+0x1a>
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	2000017c 	.word	0x2000017c

080063c4 <asin>:
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	ed2d 8b02 	vpush	{d8}
 80063ca:	4e26      	ldr	r6, [pc, #152]	; (8006464 <asin+0xa0>)
 80063cc:	b08b      	sub	sp, #44	; 0x2c
 80063ce:	ec55 4b10 	vmov	r4, r5, d0
 80063d2:	f000 f851 	bl	8006478 <__ieee754_asin>
 80063d6:	f996 3000 	ldrsb.w	r3, [r6]
 80063da:	eeb0 8a40 	vmov.f32	s16, s0
 80063de:	eef0 8a60 	vmov.f32	s17, s1
 80063e2:	3301      	adds	r3, #1
 80063e4:	d036      	beq.n	8006454 <asin+0x90>
 80063e6:	4622      	mov	r2, r4
 80063e8:	462b      	mov	r3, r5
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7fa fbb5 	bl	8000b5c <__aeabi_dcmpun>
 80063f2:	4607      	mov	r7, r0
 80063f4:	bb70      	cbnz	r0, 8006454 <asin+0x90>
 80063f6:	ec45 4b10 	vmov	d0, r4, r5
 80063fa:	f000 fd7d 	bl	8006ef8 <fabs>
 80063fe:	2200      	movs	r2, #0
 8006400:	4b19      	ldr	r3, [pc, #100]	; (8006468 <asin+0xa4>)
 8006402:	ec51 0b10 	vmov	r0, r1, d0
 8006406:	f7fa fb9f 	bl	8000b48 <__aeabi_dcmpgt>
 800640a:	b318      	cbz	r0, 8006454 <asin+0x90>
 800640c:	2301      	movs	r3, #1
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4816      	ldr	r0, [pc, #88]	; (800646c <asin+0xa8>)
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <asin+0xac>)
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	9708      	str	r7, [sp, #32]
 8006418:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800641c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006420:	f000 fd76 	bl	8006f10 <nan>
 8006424:	f996 3000 	ldrsb.w	r3, [r6]
 8006428:	2b02      	cmp	r3, #2
 800642a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800642e:	d104      	bne.n	800643a <asin+0x76>
 8006430:	f7ff f8b2 	bl	8005598 <__errno>
 8006434:	2321      	movs	r3, #33	; 0x21
 8006436:	6003      	str	r3, [r0, #0]
 8006438:	e004      	b.n	8006444 <asin+0x80>
 800643a:	4668      	mov	r0, sp
 800643c:	f000 fd65 	bl	8006f0a <matherr>
 8006440:	2800      	cmp	r0, #0
 8006442:	d0f5      	beq.n	8006430 <asin+0x6c>
 8006444:	9b08      	ldr	r3, [sp, #32]
 8006446:	b11b      	cbz	r3, 8006450 <asin+0x8c>
 8006448:	f7ff f8a6 	bl	8005598 <__errno>
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	6003      	str	r3, [r0, #0]
 8006450:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006454:	eeb0 0a48 	vmov.f32	s0, s16
 8006458:	eef0 0a68 	vmov.f32	s1, s17
 800645c:	b00b      	add	sp, #44	; 0x2c
 800645e:	ecbd 8b02 	vpop	{d8}
 8006462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006464:	20000070 	.word	0x20000070
 8006468:	3ff00000 	.word	0x3ff00000
 800646c:	08006fc5 	.word	0x08006fc5
 8006470:	08006ff3 	.word	0x08006ff3

08006474 <atan2>:
 8006474:	f000 ba10 	b.w	8006898 <__ieee754_atan2>

08006478 <__ieee754_asin>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ec55 4b10 	vmov	r4, r5, d0
 8006480:	4bcb      	ldr	r3, [pc, #812]	; (80067b0 <__ieee754_asin+0x338>)
 8006482:	b087      	sub	sp, #28
 8006484:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006488:	429f      	cmp	r7, r3
 800648a:	9501      	str	r5, [sp, #4]
 800648c:	dd31      	ble.n	80064f2 <__ieee754_asin+0x7a>
 800648e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8006492:	ee10 3a10 	vmov	r3, s0
 8006496:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800649a:	433b      	orrs	r3, r7
 800649c:	d117      	bne.n	80064ce <__ieee754_asin+0x56>
 800649e:	a3aa      	add	r3, pc, #680	; (adr r3, 8006748 <__ieee754_asin+0x2d0>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	ee10 0a10 	vmov	r0, s0
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa f8bd 	bl	8000628 <__aeabi_dmul>
 80064ae:	a3a8      	add	r3, pc, #672	; (adr r3, 8006750 <__ieee754_asin+0x2d8>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7fa f8b4 	bl	8000628 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7f9 fef8 	bl	80002bc <__adddf3>
 80064cc:	e00a      	b.n	80064e4 <__ieee754_asin+0x6c>
 80064ce:	ee10 2a10 	vmov	r2, s0
 80064d2:	462b      	mov	r3, r5
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7f9 feee 	bl	80002b8 <__aeabi_dsub>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	f7fa f9cc 	bl	800087c <__aeabi_ddiv>
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	ec45 4b10 	vmov	d0, r4, r5
 80064ec:	b007      	add	sp, #28
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	4bb0      	ldr	r3, [pc, #704]	; (80067b4 <__ieee754_asin+0x33c>)
 80064f4:	429f      	cmp	r7, r3
 80064f6:	dc11      	bgt.n	800651c <__ieee754_asin+0xa4>
 80064f8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80064fc:	f280 80ae 	bge.w	800665c <__ieee754_asin+0x1e4>
 8006500:	a395      	add	r3, pc, #596	; (adr r3, 8006758 <__ieee754_asin+0x2e0>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	ee10 0a10 	vmov	r0, s0
 800650a:	4629      	mov	r1, r5
 800650c:	f7f9 fed6 	bl	80002bc <__adddf3>
 8006510:	2200      	movs	r2, #0
 8006512:	4ba9      	ldr	r3, [pc, #676]	; (80067b8 <__ieee754_asin+0x340>)
 8006514:	f7fa fb18 	bl	8000b48 <__aeabi_dcmpgt>
 8006518:	2800      	cmp	r0, #0
 800651a:	d1e5      	bne.n	80064e8 <__ieee754_asin+0x70>
 800651c:	ec45 4b10 	vmov	d0, r4, r5
 8006520:	f000 fcea 	bl	8006ef8 <fabs>
 8006524:	2000      	movs	r0, #0
 8006526:	ec53 2b10 	vmov	r2, r3, d0
 800652a:	49a3      	ldr	r1, [pc, #652]	; (80067b8 <__ieee754_asin+0x340>)
 800652c:	f7f9 fec4 	bl	80002b8 <__aeabi_dsub>
 8006530:	2200      	movs	r2, #0
 8006532:	4ba2      	ldr	r3, [pc, #648]	; (80067bc <__ieee754_asin+0x344>)
 8006534:	f7fa f878 	bl	8000628 <__aeabi_dmul>
 8006538:	a389      	add	r3, pc, #548	; (adr r3, 8006760 <__ieee754_asin+0x2e8>)
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	4604      	mov	r4, r0
 8006540:	460d      	mov	r5, r1
 8006542:	f7fa f871 	bl	8000628 <__aeabi_dmul>
 8006546:	a388      	add	r3, pc, #544	; (adr r3, 8006768 <__ieee754_asin+0x2f0>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f7f9 feb6 	bl	80002bc <__adddf3>
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	f7fa f868 	bl	8000628 <__aeabi_dmul>
 8006558:	a385      	add	r3, pc, #532	; (adr r3, 8006770 <__ieee754_asin+0x2f8>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f7f9 feab 	bl	80002b8 <__aeabi_dsub>
 8006562:	4622      	mov	r2, r4
 8006564:	462b      	mov	r3, r5
 8006566:	f7fa f85f 	bl	8000628 <__aeabi_dmul>
 800656a:	a383      	add	r3, pc, #524	; (adr r3, 8006778 <__ieee754_asin+0x300>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 fea4 	bl	80002bc <__adddf3>
 8006574:	4622      	mov	r2, r4
 8006576:	462b      	mov	r3, r5
 8006578:	f7fa f856 	bl	8000628 <__aeabi_dmul>
 800657c:	a380      	add	r3, pc, #512	; (adr r3, 8006780 <__ieee754_asin+0x308>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fe99 	bl	80002b8 <__aeabi_dsub>
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f7fa f84d 	bl	8000628 <__aeabi_dmul>
 800658e:	a37e      	add	r3, pc, #504	; (adr r3, 8006788 <__ieee754_asin+0x310>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7f9 fe92 	bl	80002bc <__adddf3>
 8006598:	4622      	mov	r2, r4
 800659a:	462b      	mov	r3, r5
 800659c:	f7fa f844 	bl	8000628 <__aeabi_dmul>
 80065a0:	a37b      	add	r3, pc, #492	; (adr r3, 8006790 <__ieee754_asin+0x318>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	4680      	mov	r8, r0
 80065a8:	4689      	mov	r9, r1
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fa f83b 	bl	8000628 <__aeabi_dmul>
 80065b2:	a379      	add	r3, pc, #484	; (adr r3, 8006798 <__ieee754_asin+0x320>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7f9 fe7e 	bl	80002b8 <__aeabi_dsub>
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	f7fa f832 	bl	8000628 <__aeabi_dmul>
 80065c4:	a376      	add	r3, pc, #472	; (adr r3, 80067a0 <__ieee754_asin+0x328>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7f9 fe77 	bl	80002bc <__adddf3>
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f7fa f829 	bl	8000628 <__aeabi_dmul>
 80065d6:	a374      	add	r3, pc, #464	; (adr r3, 80067a8 <__ieee754_asin+0x330>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fe6c 	bl	80002b8 <__aeabi_dsub>
 80065e0:	4622      	mov	r2, r4
 80065e2:	462b      	mov	r3, r5
 80065e4:	f7fa f820 	bl	8000628 <__aeabi_dmul>
 80065e8:	4b73      	ldr	r3, [pc, #460]	; (80067b8 <__ieee754_asin+0x340>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7f9 fe66 	bl	80002bc <__adddf3>
 80065f0:	ec45 4b10 	vmov	d0, r4, r5
 80065f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f8:	f000 fa2c 	bl	8006a54 <__ieee754_sqrt>
 80065fc:	4b70      	ldr	r3, [pc, #448]	; (80067c0 <__ieee754_asin+0x348>)
 80065fe:	429f      	cmp	r7, r3
 8006600:	ec5b ab10 	vmov	sl, fp, d0
 8006604:	f340 80de 	ble.w	80067c4 <__ieee754_asin+0x34c>
 8006608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800660c:	4640      	mov	r0, r8
 800660e:	4649      	mov	r1, r9
 8006610:	f7fa f934 	bl	800087c <__aeabi_ddiv>
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	f7fa f806 	bl	8000628 <__aeabi_dmul>
 800661c:	4652      	mov	r2, sl
 800661e:	465b      	mov	r3, fp
 8006620:	f7f9 fe4c 	bl	80002bc <__adddf3>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	f7f9 fe48 	bl	80002bc <__adddf3>
 800662c:	a348      	add	r3, pc, #288	; (adr r3, 8006750 <__ieee754_asin+0x2d8>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fe41 	bl	80002b8 <__aeabi_dsub>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	a143      	add	r1, pc, #268	; (adr r1, 8006748 <__ieee754_asin+0x2d0>)
 800663c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006640:	f7f9 fe3a 	bl	80002b8 <__aeabi_dsub>
 8006644:	9b01      	ldr	r3, [sp, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfdc      	itt	le
 800664a:	4602      	movle	r2, r0
 800664c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	bfdc      	itt	le
 8006656:	4614      	movle	r4, r2
 8006658:	461d      	movle	r5, r3
 800665a:	e745      	b.n	80064e8 <__ieee754_asin+0x70>
 800665c:	ee10 2a10 	vmov	r2, s0
 8006660:	ee10 0a10 	vmov	r0, s0
 8006664:	462b      	mov	r3, r5
 8006666:	4629      	mov	r1, r5
 8006668:	f7f9 ffde 	bl	8000628 <__aeabi_dmul>
 800666c:	a33c      	add	r3, pc, #240	; (adr r3, 8006760 <__ieee754_asin+0x2e8>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	f7f9 ffd7 	bl	8000628 <__aeabi_dmul>
 800667a:	a33b      	add	r3, pc, #236	; (adr r3, 8006768 <__ieee754_asin+0x2f0>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 fe1c 	bl	80002bc <__adddf3>
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	f7f9 ffce 	bl	8000628 <__aeabi_dmul>
 800668c:	a338      	add	r3, pc, #224	; (adr r3, 8006770 <__ieee754_asin+0x2f8>)
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f7f9 fe11 	bl	80002b8 <__aeabi_dsub>
 8006696:	4632      	mov	r2, r6
 8006698:	463b      	mov	r3, r7
 800669a:	f7f9 ffc5 	bl	8000628 <__aeabi_dmul>
 800669e:	a336      	add	r3, pc, #216	; (adr r3, 8006778 <__ieee754_asin+0x300>)
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7f9 fe0a 	bl	80002bc <__adddf3>
 80066a8:	4632      	mov	r2, r6
 80066aa:	463b      	mov	r3, r7
 80066ac:	f7f9 ffbc 	bl	8000628 <__aeabi_dmul>
 80066b0:	a333      	add	r3, pc, #204	; (adr r3, 8006780 <__ieee754_asin+0x308>)
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f7f9 fdff 	bl	80002b8 <__aeabi_dsub>
 80066ba:	4632      	mov	r2, r6
 80066bc:	463b      	mov	r3, r7
 80066be:	f7f9 ffb3 	bl	8000628 <__aeabi_dmul>
 80066c2:	a331      	add	r3, pc, #196	; (adr r3, 8006788 <__ieee754_asin+0x310>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 fdf8 	bl	80002bc <__adddf3>
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	f7f9 ffaa 	bl	8000628 <__aeabi_dmul>
 80066d4:	a32e      	add	r3, pc, #184	; (adr r3, 8006790 <__ieee754_asin+0x318>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	4680      	mov	r8, r0
 80066dc:	4689      	mov	r9, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 ffa1 	bl	8000628 <__aeabi_dmul>
 80066e6:	a32c      	add	r3, pc, #176	; (adr r3, 8006798 <__ieee754_asin+0x320>)
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fde4 	bl	80002b8 <__aeabi_dsub>
 80066f0:	4632      	mov	r2, r6
 80066f2:	463b      	mov	r3, r7
 80066f4:	f7f9 ff98 	bl	8000628 <__aeabi_dmul>
 80066f8:	a329      	add	r3, pc, #164	; (adr r3, 80067a0 <__ieee754_asin+0x328>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fddd 	bl	80002bc <__adddf3>
 8006702:	4632      	mov	r2, r6
 8006704:	463b      	mov	r3, r7
 8006706:	f7f9 ff8f 	bl	8000628 <__aeabi_dmul>
 800670a:	a327      	add	r3, pc, #156	; (adr r3, 80067a8 <__ieee754_asin+0x330>)
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f7f9 fdd2 	bl	80002b8 <__aeabi_dsub>
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	f7f9 ff86 	bl	8000628 <__aeabi_dmul>
 800671c:	2200      	movs	r2, #0
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <__ieee754_asin+0x340>)
 8006720:	f7f9 fdcc 	bl	80002bc <__adddf3>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa f8a6 	bl	800087c <__aeabi_ddiv>
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	f7f9 ff78 	bl	8000628 <__aeabi_dmul>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	e6c2      	b.n	80064c8 <__ieee754_asin+0x50>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
 8006748:	54442d18 	.word	0x54442d18
 800674c:	3ff921fb 	.word	0x3ff921fb
 8006750:	33145c07 	.word	0x33145c07
 8006754:	3c91a626 	.word	0x3c91a626
 8006758:	8800759c 	.word	0x8800759c
 800675c:	7e37e43c 	.word	0x7e37e43c
 8006760:	0dfdf709 	.word	0x0dfdf709
 8006764:	3f023de1 	.word	0x3f023de1
 8006768:	7501b288 	.word	0x7501b288
 800676c:	3f49efe0 	.word	0x3f49efe0
 8006770:	b5688f3b 	.word	0xb5688f3b
 8006774:	3fa48228 	.word	0x3fa48228
 8006778:	0e884455 	.word	0x0e884455
 800677c:	3fc9c155 	.word	0x3fc9c155
 8006780:	03eb6f7d 	.word	0x03eb6f7d
 8006784:	3fd4d612 	.word	0x3fd4d612
 8006788:	55555555 	.word	0x55555555
 800678c:	3fc55555 	.word	0x3fc55555
 8006790:	b12e9282 	.word	0xb12e9282
 8006794:	3fb3b8c5 	.word	0x3fb3b8c5
 8006798:	1b8d0159 	.word	0x1b8d0159
 800679c:	3fe6066c 	.word	0x3fe6066c
 80067a0:	9c598ac8 	.word	0x9c598ac8
 80067a4:	40002ae5 	.word	0x40002ae5
 80067a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80067ac:	40033a27 	.word	0x40033a27
 80067b0:	3fefffff 	.word	0x3fefffff
 80067b4:	3fdfffff 	.word	0x3fdfffff
 80067b8:	3ff00000 	.word	0x3ff00000
 80067bc:	3fe00000 	.word	0x3fe00000
 80067c0:	3fef3332 	.word	0x3fef3332
 80067c4:	ee10 2a10 	vmov	r2, s0
 80067c8:	ee10 0a10 	vmov	r0, s0
 80067cc:	465b      	mov	r3, fp
 80067ce:	4659      	mov	r1, fp
 80067d0:	f7f9 fd74 	bl	80002bc <__adddf3>
 80067d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa f84c 	bl	800087c <__aeabi_ddiv>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ec:	f7f9 ff1c 	bl	8000628 <__aeabi_dmul>
 80067f0:	2600      	movs	r6, #0
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	4632      	mov	r2, r6
 80067f8:	465b      	mov	r3, fp
 80067fa:	4630      	mov	r0, r6
 80067fc:	4659      	mov	r1, fp
 80067fe:	f7f9 ff13 	bl	8000628 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 fd55 	bl	80002b8 <__aeabi_dsub>
 800680e:	4632      	mov	r2, r6
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	465b      	mov	r3, fp
 8006816:	4650      	mov	r0, sl
 8006818:	4659      	mov	r1, fp
 800681a:	f7f9 fd4f 	bl	80002bc <__adddf3>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f7fa f829 	bl	800087c <__aeabi_ddiv>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	f7f9 fd45 	bl	80002bc <__adddf3>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	a114      	add	r1, pc, #80	; (adr r1, 8006888 <__ieee754_asin+0x410>)
 8006838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683c:	f7f9 fd3c 	bl	80002b8 <__aeabi_dsub>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4640      	mov	r0, r8
 8006846:	4649      	mov	r1, r9
 8006848:	f7f9 fd36 	bl	80002b8 <__aeabi_dsub>
 800684c:	465f      	mov	r7, fp
 800684e:	4604      	mov	r4, r0
 8006850:	460d      	mov	r5, r1
 8006852:	4632      	mov	r2, r6
 8006854:	465b      	mov	r3, fp
 8006856:	4630      	mov	r0, r6
 8006858:	4639      	mov	r1, r7
 800685a:	f7f9 fd2f 	bl	80002bc <__adddf3>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	a10b      	add	r1, pc, #44	; (adr r1, 8006890 <__ieee754_asin+0x418>)
 8006864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006868:	f7f9 fd26 	bl	80002b8 <__aeabi_dsub>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	f7f9 fd20 	bl	80002b8 <__aeabi_dsub>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	a104      	add	r1, pc, #16	; (adr r1, 8006890 <__ieee754_asin+0x418>)
 800687e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006882:	e6dd      	b.n	8006640 <__ieee754_asin+0x1c8>
 8006884:	f3af 8000 	nop.w
 8006888:	33145c07 	.word	0x33145c07
 800688c:	3c91a626 	.word	0x3c91a626
 8006890:	54442d18 	.word	0x54442d18
 8006894:	3fe921fb 	.word	0x3fe921fb

08006898 <__ieee754_atan2>:
 8006898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800689c:	ec57 6b11 	vmov	r6, r7, d1
 80068a0:	4273      	negs	r3, r6
 80068a2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80068a6:	4333      	orrs	r3, r6
 80068a8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006a50 <__ieee754_atan2+0x1b8>
 80068ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80068b0:	4573      	cmp	r3, lr
 80068b2:	ec51 0b10 	vmov	r0, r1, d0
 80068b6:	ee11 8a10 	vmov	r8, s2
 80068ba:	d80a      	bhi.n	80068d2 <__ieee754_atan2+0x3a>
 80068bc:	4244      	negs	r4, r0
 80068be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068c2:	4304      	orrs	r4, r0
 80068c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80068c8:	4574      	cmp	r4, lr
 80068ca:	468c      	mov	ip, r1
 80068cc:	ee10 9a10 	vmov	r9, s0
 80068d0:	d907      	bls.n	80068e2 <__ieee754_atan2+0x4a>
 80068d2:	4632      	mov	r2, r6
 80068d4:	463b      	mov	r3, r7
 80068d6:	f7f9 fcf1 	bl	80002bc <__adddf3>
 80068da:	ec41 0b10 	vmov	d0, r0, r1
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80068e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80068ea:	4334      	orrs	r4, r6
 80068ec:	d103      	bne.n	80068f6 <__ieee754_atan2+0x5e>
 80068ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f2:	f000 b961 	b.w	8006bb8 <atan>
 80068f6:	17bc      	asrs	r4, r7, #30
 80068f8:	f004 0402 	and.w	r4, r4, #2
 80068fc:	ea53 0909 	orrs.w	r9, r3, r9
 8006900:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006904:	d107      	bne.n	8006916 <__ieee754_atan2+0x7e>
 8006906:	2c02      	cmp	r4, #2
 8006908:	d073      	beq.n	80069f2 <__ieee754_atan2+0x15a>
 800690a:	2c03      	cmp	r4, #3
 800690c:	d1e5      	bne.n	80068da <__ieee754_atan2+0x42>
 800690e:	a13e      	add	r1, pc, #248	; (adr r1, 8006a08 <__ieee754_atan2+0x170>)
 8006910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006914:	e7e1      	b.n	80068da <__ieee754_atan2+0x42>
 8006916:	ea52 0808 	orrs.w	r8, r2, r8
 800691a:	d106      	bne.n	800692a <__ieee754_atan2+0x92>
 800691c:	f1bc 0f00 	cmp.w	ip, #0
 8006920:	da6b      	bge.n	80069fa <__ieee754_atan2+0x162>
 8006922:	a13b      	add	r1, pc, #236	; (adr r1, 8006a10 <__ieee754_atan2+0x178>)
 8006924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006928:	e7d7      	b.n	80068da <__ieee754_atan2+0x42>
 800692a:	4572      	cmp	r2, lr
 800692c:	d120      	bne.n	8006970 <__ieee754_atan2+0xd8>
 800692e:	4293      	cmp	r3, r2
 8006930:	d111      	bne.n	8006956 <__ieee754_atan2+0xbe>
 8006932:	2c02      	cmp	r4, #2
 8006934:	d007      	beq.n	8006946 <__ieee754_atan2+0xae>
 8006936:	2c03      	cmp	r4, #3
 8006938:	d009      	beq.n	800694e <__ieee754_atan2+0xb6>
 800693a:	2c01      	cmp	r4, #1
 800693c:	d155      	bne.n	80069ea <__ieee754_atan2+0x152>
 800693e:	a136      	add	r1, pc, #216	; (adr r1, 8006a18 <__ieee754_atan2+0x180>)
 8006940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006944:	e7c9      	b.n	80068da <__ieee754_atan2+0x42>
 8006946:	a136      	add	r1, pc, #216	; (adr r1, 8006a20 <__ieee754_atan2+0x188>)
 8006948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694c:	e7c5      	b.n	80068da <__ieee754_atan2+0x42>
 800694e:	a136      	add	r1, pc, #216	; (adr r1, 8006a28 <__ieee754_atan2+0x190>)
 8006950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006954:	e7c1      	b.n	80068da <__ieee754_atan2+0x42>
 8006956:	2c02      	cmp	r4, #2
 8006958:	d04b      	beq.n	80069f2 <__ieee754_atan2+0x15a>
 800695a:	2c03      	cmp	r4, #3
 800695c:	d0d7      	beq.n	800690e <__ieee754_atan2+0x76>
 800695e:	2c01      	cmp	r4, #1
 8006960:	f04f 0000 	mov.w	r0, #0
 8006964:	d102      	bne.n	800696c <__ieee754_atan2+0xd4>
 8006966:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800696a:	e7b6      	b.n	80068da <__ieee754_atan2+0x42>
 800696c:	2100      	movs	r1, #0
 800696e:	e7b4      	b.n	80068da <__ieee754_atan2+0x42>
 8006970:	4573      	cmp	r3, lr
 8006972:	d0d3      	beq.n	800691c <__ieee754_atan2+0x84>
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	151b      	asrs	r3, r3, #20
 8006978:	2b3c      	cmp	r3, #60	; 0x3c
 800697a:	dc1e      	bgt.n	80069ba <__ieee754_atan2+0x122>
 800697c:	2f00      	cmp	r7, #0
 800697e:	da01      	bge.n	8006984 <__ieee754_atan2+0xec>
 8006980:	333c      	adds	r3, #60	; 0x3c
 8006982:	db1e      	blt.n	80069c2 <__ieee754_atan2+0x12a>
 8006984:	4632      	mov	r2, r6
 8006986:	463b      	mov	r3, r7
 8006988:	f7f9 ff78 	bl	800087c <__aeabi_ddiv>
 800698c:	ec41 0b10 	vmov	d0, r0, r1
 8006990:	f000 fab2 	bl	8006ef8 <fabs>
 8006994:	f000 f910 	bl	8006bb8 <atan>
 8006998:	ec51 0b10 	vmov	r0, r1, d0
 800699c:	2c01      	cmp	r4, #1
 800699e:	d013      	beq.n	80069c8 <__ieee754_atan2+0x130>
 80069a0:	2c02      	cmp	r4, #2
 80069a2:	d015      	beq.n	80069d0 <__ieee754_atan2+0x138>
 80069a4:	2c00      	cmp	r4, #0
 80069a6:	d098      	beq.n	80068da <__ieee754_atan2+0x42>
 80069a8:	a321      	add	r3, pc, #132	; (adr r3, 8006a30 <__ieee754_atan2+0x198>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f7f9 fc83 	bl	80002b8 <__aeabi_dsub>
 80069b2:	a321      	add	r3, pc, #132	; (adr r3, 8006a38 <__ieee754_atan2+0x1a0>)
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	e014      	b.n	80069e4 <__ieee754_atan2+0x14c>
 80069ba:	a121      	add	r1, pc, #132	; (adr r1, 8006a40 <__ieee754_atan2+0x1a8>)
 80069bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c0:	e7ec      	b.n	800699c <__ieee754_atan2+0x104>
 80069c2:	2000      	movs	r0, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	e7e9      	b.n	800699c <__ieee754_atan2+0x104>
 80069c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069cc:	4619      	mov	r1, r3
 80069ce:	e784      	b.n	80068da <__ieee754_atan2+0x42>
 80069d0:	a317      	add	r3, pc, #92	; (adr r3, 8006a30 <__ieee754_atan2+0x198>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fc6f 	bl	80002b8 <__aeabi_dsub>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	a116      	add	r1, pc, #88	; (adr r1, 8006a38 <__ieee754_atan2+0x1a0>)
 80069e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e4:	f7f9 fc68 	bl	80002b8 <__aeabi_dsub>
 80069e8:	e777      	b.n	80068da <__ieee754_atan2+0x42>
 80069ea:	a117      	add	r1, pc, #92	; (adr r1, 8006a48 <__ieee754_atan2+0x1b0>)
 80069ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f0:	e773      	b.n	80068da <__ieee754_atan2+0x42>
 80069f2:	a111      	add	r1, pc, #68	; (adr r1, 8006a38 <__ieee754_atan2+0x1a0>)
 80069f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f8:	e76f      	b.n	80068da <__ieee754_atan2+0x42>
 80069fa:	a111      	add	r1, pc, #68	; (adr r1, 8006a40 <__ieee754_atan2+0x1a8>)
 80069fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a00:	e76b      	b.n	80068da <__ieee754_atan2+0x42>
 8006a02:	bf00      	nop
 8006a04:	f3af 8000 	nop.w
 8006a08:	54442d18 	.word	0x54442d18
 8006a0c:	c00921fb 	.word	0xc00921fb
 8006a10:	54442d18 	.word	0x54442d18
 8006a14:	bff921fb 	.word	0xbff921fb
 8006a18:	54442d18 	.word	0x54442d18
 8006a1c:	bfe921fb 	.word	0xbfe921fb
 8006a20:	7f3321d2 	.word	0x7f3321d2
 8006a24:	4002d97c 	.word	0x4002d97c
 8006a28:	7f3321d2 	.word	0x7f3321d2
 8006a2c:	c002d97c 	.word	0xc002d97c
 8006a30:	33145c07 	.word	0x33145c07
 8006a34:	3ca1a626 	.word	0x3ca1a626
 8006a38:	54442d18 	.word	0x54442d18
 8006a3c:	400921fb 	.word	0x400921fb
 8006a40:	54442d18 	.word	0x54442d18
 8006a44:	3ff921fb 	.word	0x3ff921fb
 8006a48:	54442d18 	.word	0x54442d18
 8006a4c:	3fe921fb 	.word	0x3fe921fb
 8006a50:	7ff00000 	.word	0x7ff00000

08006a54 <__ieee754_sqrt>:
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a58:	4955      	ldr	r1, [pc, #340]	; (8006bb0 <__ieee754_sqrt+0x15c>)
 8006a5a:	ec55 4b10 	vmov	r4, r5, d0
 8006a5e:	43a9      	bics	r1, r5
 8006a60:	462b      	mov	r3, r5
 8006a62:	462a      	mov	r2, r5
 8006a64:	d112      	bne.n	8006a8c <__ieee754_sqrt+0x38>
 8006a66:	ee10 2a10 	vmov	r2, s0
 8006a6a:	ee10 0a10 	vmov	r0, s0
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fdda 	bl	8000628 <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fc1e 	bl	80002bc <__adddf3>
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	ec45 4b10 	vmov	d0, r4, r5
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	ee10 0a10 	vmov	r0, s0
 8006a92:	4621      	mov	r1, r4
 8006a94:	dc0f      	bgt.n	8006ab6 <__ieee754_sqrt+0x62>
 8006a96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a9a:	4330      	orrs	r0, r6
 8006a9c:	d0f2      	beq.n	8006a84 <__ieee754_sqrt+0x30>
 8006a9e:	b155      	cbz	r5, 8006ab6 <__ieee754_sqrt+0x62>
 8006aa0:	ee10 2a10 	vmov	r2, s0
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fc06 	bl	80002b8 <__aeabi_dsub>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	f7f9 fee4 	bl	800087c <__aeabi_ddiv>
 8006ab4:	e7e4      	b.n	8006a80 <__ieee754_sqrt+0x2c>
 8006ab6:	151b      	asrs	r3, r3, #20
 8006ab8:	d073      	beq.n	8006ba2 <__ieee754_sqrt+0x14e>
 8006aba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006abe:	07dd      	lsls	r5, r3, #31
 8006ac0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006ac4:	bf48      	it	mi
 8006ac6:	0fc8      	lsrmi	r0, r1, #31
 8006ac8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006acc:	bf44      	itt	mi
 8006ace:	0049      	lslmi	r1, r1, #1
 8006ad0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	1058      	asrs	r0, r3, #1
 8006ad8:	0fcb      	lsrs	r3, r1, #31
 8006ada:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006ade:	0049      	lsls	r1, r1, #1
 8006ae0:	2316      	movs	r3, #22
 8006ae2:	462c      	mov	r4, r5
 8006ae4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006ae8:	19a7      	adds	r7, r4, r6
 8006aea:	4297      	cmp	r7, r2
 8006aec:	bfde      	ittt	le
 8006aee:	19bc      	addle	r4, r7, r6
 8006af0:	1bd2      	suble	r2, r2, r7
 8006af2:	19ad      	addle	r5, r5, r6
 8006af4:	0fcf      	lsrs	r7, r1, #31
 8006af6:	3b01      	subs	r3, #1
 8006af8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006afc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b04:	d1f0      	bne.n	8006ae8 <__ieee754_sqrt+0x94>
 8006b06:	f04f 0c20 	mov.w	ip, #32
 8006b0a:	469e      	mov	lr, r3
 8006b0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b10:	42a2      	cmp	r2, r4
 8006b12:	eb06 070e 	add.w	r7, r6, lr
 8006b16:	dc02      	bgt.n	8006b1e <__ieee754_sqrt+0xca>
 8006b18:	d112      	bne.n	8006b40 <__ieee754_sqrt+0xec>
 8006b1a:	428f      	cmp	r7, r1
 8006b1c:	d810      	bhi.n	8006b40 <__ieee754_sqrt+0xec>
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	eb07 0e06 	add.w	lr, r7, r6
 8006b24:	da42      	bge.n	8006bac <__ieee754_sqrt+0x158>
 8006b26:	f1be 0f00 	cmp.w	lr, #0
 8006b2a:	db3f      	blt.n	8006bac <__ieee754_sqrt+0x158>
 8006b2c:	f104 0801 	add.w	r8, r4, #1
 8006b30:	1b12      	subs	r2, r2, r4
 8006b32:	428f      	cmp	r7, r1
 8006b34:	bf88      	it	hi
 8006b36:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006b3a:	1bc9      	subs	r1, r1, r7
 8006b3c:	4433      	add	r3, r6
 8006b3e:	4644      	mov	r4, r8
 8006b40:	0052      	lsls	r2, r2, #1
 8006b42:	f1bc 0c01 	subs.w	ip, ip, #1
 8006b46:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006b4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b52:	d1dd      	bne.n	8006b10 <__ieee754_sqrt+0xbc>
 8006b54:	430a      	orrs	r2, r1
 8006b56:	d006      	beq.n	8006b66 <__ieee754_sqrt+0x112>
 8006b58:	1c5c      	adds	r4, r3, #1
 8006b5a:	bf13      	iteet	ne
 8006b5c:	3301      	addne	r3, #1
 8006b5e:	3501      	addeq	r5, #1
 8006b60:	4663      	moveq	r3, ip
 8006b62:	f023 0301 	bicne.w	r3, r3, #1
 8006b66:	106a      	asrs	r2, r5, #1
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	07e9      	lsls	r1, r5, #31
 8006b6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006b70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006b74:	bf48      	it	mi
 8006b76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006b7a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006b7e:	461c      	mov	r4, r3
 8006b80:	e780      	b.n	8006a84 <__ieee754_sqrt+0x30>
 8006b82:	0aca      	lsrs	r2, r1, #11
 8006b84:	3815      	subs	r0, #21
 8006b86:	0549      	lsls	r1, r1, #21
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	d0fa      	beq.n	8006b82 <__ieee754_sqrt+0x12e>
 8006b8c:	02d6      	lsls	r6, r2, #11
 8006b8e:	d50a      	bpl.n	8006ba6 <__ieee754_sqrt+0x152>
 8006b90:	f1c3 0420 	rsb	r4, r3, #32
 8006b94:	fa21 f404 	lsr.w	r4, r1, r4
 8006b98:	1e5d      	subs	r5, r3, #1
 8006b9a:	4099      	lsls	r1, r3
 8006b9c:	4322      	orrs	r2, r4
 8006b9e:	1b43      	subs	r3, r0, r5
 8006ba0:	e78b      	b.n	8006aba <__ieee754_sqrt+0x66>
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	e7f0      	b.n	8006b88 <__ieee754_sqrt+0x134>
 8006ba6:	0052      	lsls	r2, r2, #1
 8006ba8:	3301      	adds	r3, #1
 8006baa:	e7ef      	b.n	8006b8c <__ieee754_sqrt+0x138>
 8006bac:	46a0      	mov	r8, r4
 8006bae:	e7bf      	b.n	8006b30 <__ieee754_sqrt+0xdc>
 8006bb0:	7ff00000 	.word	0x7ff00000
 8006bb4:	00000000 	.word	0x00000000

08006bb8 <atan>:
 8006bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	ec55 4b10 	vmov	r4, r5, d0
 8006bc0:	4bc3      	ldr	r3, [pc, #780]	; (8006ed0 <atan+0x318>)
 8006bc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bc6:	429e      	cmp	r6, r3
 8006bc8:	46ab      	mov	fp, r5
 8006bca:	dd18      	ble.n	8006bfe <atan+0x46>
 8006bcc:	4bc1      	ldr	r3, [pc, #772]	; (8006ed4 <atan+0x31c>)
 8006bce:	429e      	cmp	r6, r3
 8006bd0:	dc01      	bgt.n	8006bd6 <atan+0x1e>
 8006bd2:	d109      	bne.n	8006be8 <atan+0x30>
 8006bd4:	b144      	cbz	r4, 8006be8 <atan+0x30>
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	462b      	mov	r3, r5
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fb6d 	bl	80002bc <__adddf3>
 8006be2:	4604      	mov	r4, r0
 8006be4:	460d      	mov	r5, r1
 8006be6:	e006      	b.n	8006bf6 <atan+0x3e>
 8006be8:	f1bb 0f00 	cmp.w	fp, #0
 8006bec:	f340 8131 	ble.w	8006e52 <atan+0x29a>
 8006bf0:	a59b      	add	r5, pc, #620	; (adr r5, 8006e60 <atan+0x2a8>)
 8006bf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bf6:	ec45 4b10 	vmov	d0, r4, r5
 8006bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	4bb6      	ldr	r3, [pc, #728]	; (8006ed8 <atan+0x320>)
 8006c00:	429e      	cmp	r6, r3
 8006c02:	dc14      	bgt.n	8006c2e <atan+0x76>
 8006c04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006c08:	429e      	cmp	r6, r3
 8006c0a:	dc0d      	bgt.n	8006c28 <atan+0x70>
 8006c0c:	a396      	add	r3, pc, #600	; (adr r3, 8006e68 <atan+0x2b0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	ee10 0a10 	vmov	r0, s0
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fb50 	bl	80002bc <__adddf3>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4baf      	ldr	r3, [pc, #700]	; (8006edc <atan+0x324>)
 8006c20:	f7f9 ff92 	bl	8000b48 <__aeabi_dcmpgt>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1e6      	bne.n	8006bf6 <atan+0x3e>
 8006c28:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006c2c:	e02b      	b.n	8006c86 <atan+0xce>
 8006c2e:	f000 f963 	bl	8006ef8 <fabs>
 8006c32:	4bab      	ldr	r3, [pc, #684]	; (8006ee0 <atan+0x328>)
 8006c34:	429e      	cmp	r6, r3
 8006c36:	ec55 4b10 	vmov	r4, r5, d0
 8006c3a:	f300 80bf 	bgt.w	8006dbc <atan+0x204>
 8006c3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006c42:	429e      	cmp	r6, r3
 8006c44:	f300 80a0 	bgt.w	8006d88 <atan+0x1d0>
 8006c48:	ee10 2a10 	vmov	r2, s0
 8006c4c:	ee10 0a10 	vmov	r0, s0
 8006c50:	462b      	mov	r3, r5
 8006c52:	4629      	mov	r1, r5
 8006c54:	f7f9 fb32 	bl	80002bc <__adddf3>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4ba0      	ldr	r3, [pc, #640]	; (8006edc <atan+0x324>)
 8006c5c:	f7f9 fb2c 	bl	80002b8 <__aeabi_dsub>
 8006c60:	2200      	movs	r2, #0
 8006c62:	4606      	mov	r6, r0
 8006c64:	460f      	mov	r7, r1
 8006c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 fb25 	bl	80002bc <__adddf3>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fdff 	bl	800087c <__aeabi_ddiv>
 8006c7e:	f04f 0a00 	mov.w	sl, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	460d      	mov	r5, r1
 8006c86:	4622      	mov	r2, r4
 8006c88:	462b      	mov	r3, r5
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7f9 fccb 	bl	8000628 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4680      	mov	r8, r0
 8006c98:	4689      	mov	r9, r1
 8006c9a:	f7f9 fcc5 	bl	8000628 <__aeabi_dmul>
 8006c9e:	a374      	add	r3, pc, #464	; (adr r3, 8006e70 <atan+0x2b8>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 fcbe 	bl	8000628 <__aeabi_dmul>
 8006cac:	a372      	add	r3, pc, #456	; (adr r3, 8006e78 <atan+0x2c0>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f7f9 fb03 	bl	80002bc <__adddf3>
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	463b      	mov	r3, r7
 8006cba:	f7f9 fcb5 	bl	8000628 <__aeabi_dmul>
 8006cbe:	a370      	add	r3, pc, #448	; (adr r3, 8006e80 <atan+0x2c8>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fafa 	bl	80002bc <__adddf3>
 8006cc8:	4632      	mov	r2, r6
 8006cca:	463b      	mov	r3, r7
 8006ccc:	f7f9 fcac 	bl	8000628 <__aeabi_dmul>
 8006cd0:	a36d      	add	r3, pc, #436	; (adr r3, 8006e88 <atan+0x2d0>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f7f9 faf1 	bl	80002bc <__adddf3>
 8006cda:	4632      	mov	r2, r6
 8006cdc:	463b      	mov	r3, r7
 8006cde:	f7f9 fca3 	bl	8000628 <__aeabi_dmul>
 8006ce2:	a36b      	add	r3, pc, #428	; (adr r3, 8006e90 <atan+0x2d8>)
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fae8 	bl	80002bc <__adddf3>
 8006cec:	4632      	mov	r2, r6
 8006cee:	463b      	mov	r3, r7
 8006cf0:	f7f9 fc9a 	bl	8000628 <__aeabi_dmul>
 8006cf4:	a368      	add	r3, pc, #416	; (adr r3, 8006e98 <atan+0x2e0>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f7f9 fadf 	bl	80002bc <__adddf3>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	f7f9 fc91 	bl	8000628 <__aeabi_dmul>
 8006d06:	a366      	add	r3, pc, #408	; (adr r3, 8006ea0 <atan+0x2e8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4689      	mov	r9, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fc88 	bl	8000628 <__aeabi_dmul>
 8006d18:	a363      	add	r3, pc, #396	; (adr r3, 8006ea8 <atan+0x2f0>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 facb 	bl	80002b8 <__aeabi_dsub>
 8006d22:	4632      	mov	r2, r6
 8006d24:	463b      	mov	r3, r7
 8006d26:	f7f9 fc7f 	bl	8000628 <__aeabi_dmul>
 8006d2a:	a361      	add	r3, pc, #388	; (adr r3, 8006eb0 <atan+0x2f8>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f7f9 fac2 	bl	80002b8 <__aeabi_dsub>
 8006d34:	4632      	mov	r2, r6
 8006d36:	463b      	mov	r3, r7
 8006d38:	f7f9 fc76 	bl	8000628 <__aeabi_dmul>
 8006d3c:	a35e      	add	r3, pc, #376	; (adr r3, 8006eb8 <atan+0x300>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fab9 	bl	80002b8 <__aeabi_dsub>
 8006d46:	4632      	mov	r2, r6
 8006d48:	463b      	mov	r3, r7
 8006d4a:	f7f9 fc6d 	bl	8000628 <__aeabi_dmul>
 8006d4e:	a35c      	add	r3, pc, #368	; (adr r3, 8006ec0 <atan+0x308>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f7f9 fab0 	bl	80002b8 <__aeabi_dsub>
 8006d58:	4632      	mov	r2, r6
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	f7f9 fc64 	bl	8000628 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 faa8 	bl	80002bc <__adddf3>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	462b      	mov	r3, r5
 8006d70:	f7f9 fc5a 	bl	8000628 <__aeabi_dmul>
 8006d74:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	d14b      	bne.n	8006e16 <atan+0x25e>
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fa99 	bl	80002b8 <__aeabi_dsub>
 8006d86:	e72c      	b.n	8006be2 <atan+0x2a>
 8006d88:	ee10 0a10 	vmov	r0, s0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4b53      	ldr	r3, [pc, #332]	; (8006edc <atan+0x324>)
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7f9 fa91 	bl	80002b8 <__aeabi_dsub>
 8006d96:	2200      	movs	r2, #0
 8006d98:	4606      	mov	r6, r0
 8006d9a:	460f      	mov	r7, r1
 8006d9c:	4b4f      	ldr	r3, [pc, #316]	; (8006edc <atan+0x324>)
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa8b 	bl	80002bc <__adddf3>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fd65 	bl	800087c <__aeabi_ddiv>
 8006db2:	f04f 0a01 	mov.w	sl, #1
 8006db6:	4604      	mov	r4, r0
 8006db8:	460d      	mov	r5, r1
 8006dba:	e764      	b.n	8006c86 <atan+0xce>
 8006dbc:	4b49      	ldr	r3, [pc, #292]	; (8006ee4 <atan+0x32c>)
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	dc1d      	bgt.n	8006dfe <atan+0x246>
 8006dc2:	ee10 0a10 	vmov	r0, s0
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4b47      	ldr	r3, [pc, #284]	; (8006ee8 <atan+0x330>)
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 fa74 	bl	80002b8 <__aeabi_dsub>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460f      	mov	r7, r1
 8006dd6:	4b44      	ldr	r3, [pc, #272]	; (8006ee8 <atan+0x330>)
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f7f9 fc24 	bl	8000628 <__aeabi_dmul>
 8006de0:	2200      	movs	r2, #0
 8006de2:	4b3e      	ldr	r3, [pc, #248]	; (8006edc <atan+0x324>)
 8006de4:	f7f9 fa6a 	bl	80002bc <__adddf3>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fd44 	bl	800087c <__aeabi_ddiv>
 8006df4:	f04f 0a02 	mov.w	sl, #2
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	e743      	b.n	8006c86 <atan+0xce>
 8006dfe:	462b      	mov	r3, r5
 8006e00:	ee10 2a10 	vmov	r2, s0
 8006e04:	2000      	movs	r0, #0
 8006e06:	4939      	ldr	r1, [pc, #228]	; (8006eec <atan+0x334>)
 8006e08:	f7f9 fd38 	bl	800087c <__aeabi_ddiv>
 8006e0c:	f04f 0a03 	mov.w	sl, #3
 8006e10:	4604      	mov	r4, r0
 8006e12:	460d      	mov	r5, r1
 8006e14:	e737      	b.n	8006c86 <atan+0xce>
 8006e16:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <atan+0x338>)
 8006e18:	4e36      	ldr	r6, [pc, #216]	; (8006ef4 <atan+0x33c>)
 8006e1a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006e1e:	4456      	add	r6, sl
 8006e20:	449a      	add	sl, r3
 8006e22:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e26:	f7f9 fa47 	bl	80002b8 <__aeabi_dsub>
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	f7f9 fa43 	bl	80002b8 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006e3a:	f7f9 fa3d 	bl	80002b8 <__aeabi_dsub>
 8006e3e:	f1bb 0f00 	cmp.w	fp, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	460d      	mov	r5, r1
 8006e46:	f6bf aed6 	bge.w	8006bf6 <atan+0x3e>
 8006e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e4e:	461d      	mov	r5, r3
 8006e50:	e6d1      	b.n	8006bf6 <atan+0x3e>
 8006e52:	a51d      	add	r5, pc, #116	; (adr r5, 8006ec8 <atan+0x310>)
 8006e54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e58:	e6cd      	b.n	8006bf6 <atan+0x3e>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
 8006e60:	54442d18 	.word	0x54442d18
 8006e64:	3ff921fb 	.word	0x3ff921fb
 8006e68:	8800759c 	.word	0x8800759c
 8006e6c:	7e37e43c 	.word	0x7e37e43c
 8006e70:	e322da11 	.word	0xe322da11
 8006e74:	3f90ad3a 	.word	0x3f90ad3a
 8006e78:	24760deb 	.word	0x24760deb
 8006e7c:	3fa97b4b 	.word	0x3fa97b4b
 8006e80:	a0d03d51 	.word	0xa0d03d51
 8006e84:	3fb10d66 	.word	0x3fb10d66
 8006e88:	c54c206e 	.word	0xc54c206e
 8006e8c:	3fb745cd 	.word	0x3fb745cd
 8006e90:	920083ff 	.word	0x920083ff
 8006e94:	3fc24924 	.word	0x3fc24924
 8006e98:	5555550d 	.word	0x5555550d
 8006e9c:	3fd55555 	.word	0x3fd55555
 8006ea0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006ea4:	bfa2b444 	.word	0xbfa2b444
 8006ea8:	52defd9a 	.word	0x52defd9a
 8006eac:	3fadde2d 	.word	0x3fadde2d
 8006eb0:	af749a6d 	.word	0xaf749a6d
 8006eb4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006eb8:	fe231671 	.word	0xfe231671
 8006ebc:	3fbc71c6 	.word	0x3fbc71c6
 8006ec0:	9998ebc4 	.word	0x9998ebc4
 8006ec4:	3fc99999 	.word	0x3fc99999
 8006ec8:	54442d18 	.word	0x54442d18
 8006ecc:	bff921fb 	.word	0xbff921fb
 8006ed0:	440fffff 	.word	0x440fffff
 8006ed4:	7ff00000 	.word	0x7ff00000
 8006ed8:	3fdbffff 	.word	0x3fdbffff
 8006edc:	3ff00000 	.word	0x3ff00000
 8006ee0:	3ff2ffff 	.word	0x3ff2ffff
 8006ee4:	40037fff 	.word	0x40037fff
 8006ee8:	3ff80000 	.word	0x3ff80000
 8006eec:	bff00000 	.word	0xbff00000
 8006ef0:	08007018 	.word	0x08007018
 8006ef4:	08006ff8 	.word	0x08006ff8

08006ef8 <fabs>:
 8006ef8:	ec51 0b10 	vmov	r0, r1, d0
 8006efc:	ee10 2a10 	vmov	r2, s0
 8006f00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f04:	ec43 2b10 	vmov	d0, r2, r3
 8006f08:	4770      	bx	lr

08006f0a <matherr>:
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	4770      	bx	lr
	...

08006f10 <nan>:
 8006f10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006f18 <nan+0x8>
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	7ff80000 	.word	0x7ff80000

08006f20 <_init>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr

08006f2c <_fini>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	bf00      	nop
 8006f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f32:	bc08      	pop	{r3}
 8006f34:	469e      	mov	lr, r3
 8006f36:	4770      	bx	lr
